/*!
 * Copyright 2014 Netflix, Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var Rx = require('rx');
var Observable = Rx.Observable;

var falkor = {},
    __GENERATION_GENERATION = 0,
    __CONTAINER = "__reference_container",
    __CONTEXT = "__context",
    __GENERATION = "__generation",
    __GENERATION_UPDATED = "__generation_updated",
    __INVALIDATED = "__invalidated",
    __KEY = "__key",
    __KEYS = "__keys",
    __IS_KEY_SET = "__is_key_set",
    __NULL = "__null",
    __SELF = "./",
    __PARENT = "../",
    __REF = "__ref",
    __REF_INDEX = "__ref_index",
    __REFS_LENGTH = "__refs_length",
    __ROOT = "/",
    __OFFSET = "__offset",
    __FALKOR_EMPTY_OBJECT = '__FALKOR_EMPTY_OBJECT',
    __INTERNAL_KEYS = [
        __CONTAINER, __CONTEXT, __GENERATION, __GENERATION_UPDATED,
        __INVALIDATED, __KEY, __KEYS, __IS_KEY_SET, __NULL, __SELF,
        __PARENT, __REF, __REF_INDEX, __REFS_LENGTH, __OFFSET, __ROOT
    ];

var $TYPE = "$type",
    $SIZE = "$size",
    $EXPIRES = "$expires",
    $TIMESTAMP = "$timestamp";

function now() {
    return Date.now();
}

function NOOP() {};

falkor.__Internals = {};
falkor.Observable = Rx.Observable;

var JSONGModelResponse = (function(falkor) {
    
    var Observable  = falkor.Observable,
        valuesMixin = { format: { value: "AsValues"  } },
        jsonMixin   = { format: { value: "AsPathMap" } },
        jsongMixin  = { format: { value: "AsJSONG"   } };
    
    function JSONGModelResponse(forEach) {
        this._subscribe = forEach;
    }
    
    JSONGModelResponse.create = function(forEach) {
        return new JSONGModelResponse(forEach);
    };
    
    function noop() {};
    function mixin(self) {
        var mixins = Array.prototype.slice.call(arguments, 1);
        return new JSONGModelResponse(function(other) {
            return self.subscribe(mixins.reduce(function(proto, mixin) {
                return Object.create(proto, mixin);
            }, other));
        });
    };
    
    JSONGModelResponse.prototype = Observable.create(noop);
    JSONGModelResponse.prototype.format = "AsPathMap";
    JSONGModelResponse.prototype.toValues = function() {
        return mixin(this, valuesMixin);
    };
    JSONGModelResponse.prototype.toJSON = function() {
        return mixin(this, jsonMixin);
    };
    JSONGModelResponse.prototype.toJSONG = function() {
        return mixin(this, jsongMixin);
    };
    return JSONGModelResponse;
}(falkor));
function getContextSync() {
    var model = this,
        clone = model,
        context = model.__context,
        boundPath = model._path.slice(0),
        result, values, optimized, pathValue;
    
    if (context == null || context[__PARENT] == null) {
        clone = model.boxValues();
        clone._path = [];
        result = model._getPathsAsValues(clone, [boundPath.concat(null)], []);
        values = result.values;
        optimized = result.optimizedPaths;
        if(values && values.length && (pathValue = values.pop())) {
            model._path = pathValue.path = optimized.pop() || pathValue.path;
            context     = pathValue.value;
            if (context) {
                // Set up the hard-link so we don't have to do all
                // this work the next time we follow this reference.
                var backRefs = context.__refsLength || 0;
                // create a back reference
                context[__REF + backRefs] = model;
                context.__refsLength = backRefs + 1;
                // create a hard reference
                model.__refIndex = backRefs;
                model.__context  = context;
            }
        } else {
            pathValue = {
                path: (model._path || (model._path = [])),
                value: null
            };
        }
    } else {
        pathValue = {
            path: (model._path || (model._path = [])),
            value: context
        };
    }
    return pathValue;
}
function valueNode(node) {
    return !Object.keys(node).some(function(x) {
        return x === '__integers' ||
            x === '__integersOrRanges' ||
            x === '__keys' ||
            !~x.indexOf('__');
    });
}


falkor.VirtualPaths = {
     integersOrRanges: '__integersOrRanges__',
     integers: '__integers__',
     keys: '__keys__'
};

/* istanbul ignore next */
var SemanticAnalyzer = (function() {
    return {
        /**
         * Returns a new function that is the generated virtual code.
         * @param parser
         * @returns {*}
         */
        generate: function(parser) {
            return new Function('model', 'falkor', 'return (function innerFunction(pathActions) { ' +
                topLevelStack(parser.largestPath, buildVirtualCode(parser.head, 0)) +
            ' });')(parser.model, falkor);
        }
    };
    function buildVirtualCode(node, depth) {
        return [].
            concat(readyStack(node, depth)).
            concat(treeTraversal(node, depth)).
            join('');
    }

    function topLevelStack(largestStack, innerCode) {
        var str = "var i = -1, results = [], dataResults = [], path, action, virtualRunner = [], valueRunner = [], copyRunner";
        for (var i = 0; i < largestStack; i++) {
            str += ', ' + SyntaxGenerator.variableDeclarationAtDepth(i);
        }

        str += ';virtualRunner.precedence = [];\n';
        str += '\nwhile (++i < pathActions.length) {\n';
        str += 'path = pathActions[i].path;\n';
        str += 'action = pathActions[i].action;\n';
        str += innerCode + '\n}\n';
        str += 'return dataResults;\n';

        return str;
    }

    function readyStack(node, depth) {
        var exitEarly = valueNode(node);
        if (exitEarly) { return '// EMPTY SWITCH\n'; }
        return SyntaxGenerator.readyStackAtDepth(depth, node);
    }

    function treeTraversal(node, depth) {
        var exitEarly = valueNode(node);
        if (exitEarly) { return '// EMPTY KEY SET\n'; }
        var str = SyntaxGenerator.
            searchBody().
            replace('__SWITCH_KEYS__', switchKeys(node, depth)).
            replace('__INTEGERS_OR_RANGES__', integersOrRanges(node, depth)).
            replace('__INTEGERS__', integers(node, depth)).
            replace('__KEYS__', keys(node, depth)).
            replace(/DEPTH/g, depth).
            split('\n');
        return str.slice(1, str.length - 1).join('\n');
    }

    function switchKeys(node, depth) {
        if (!(node.__hasKeys || node.__hasInts)) {
            return "";
        }

        // Filters all private keys
        var keys = Object.
            keys(node).
            filter(function(x) { return !~x.indexOf('__'); });

        var str = "switch (valueDEPTH) {\n";
        keys.forEach(function(k) {
            if (typeof k === 'string' && isNaN(+k)) {
                str += ['case ', '"', k, '"', ':\n'].join('');
            } else {
                str += ['case ', k, ':\n'].join('');
            }
            str += executeMatched(node[k]);
            if (!valueNode(node[k])) {
                str += buildVirtualCode(node[k], depth + 1);
            }

            str += 'break;'
        });
        str += "}\n";
        return str;
    }

    function integersOrRanges(node, depth) {

        if (node.__integersOrRanges) {
            return SyntaxGenerator.integersOrRanges(depth, executeMatched(node) + buildVirtualCode(node.__integersOrRanges, depth + 1));
        }

        // nothing.  No code to generate at this level
        return '';
    }

    function integers(node, depth) {
        if (node.__integers) {
            return SyntaxGenerator.integers(depth, executeMatched(node) + buildVirtualCode(node.__integers, depth + 1));
        }

        // nothing.  No code to generate at this level
        return '';
    }

    function keys(node, depth) {
        if (node.__keys) {
            return SyntaxGenerator.keysStringFn(depth, executeMatched(node) + buildVirtualCode(node.__keys, depth + 1));
        }

        // nothing.  No code to generate at this level
        return '';
    }

    function executeMatched(node) {

        if (node.__match) {
            var str = '';
            if (typeof node.__match.get === 'number') {
                str += [
                    'if (action === "get") {',
                        'copyRunner = virtualRunner.concat();',
                        'copyRunner.precedence = virtualRunner.precedence.concat();',
                        'dataResults.push({',
                            'actionType: "get",',
                            'action: model.__virtualFns[' + node.__match.get + '],',
                            'virtualRunner: copyRunner,',
                            'valueRunner: valueRunner.concat()',
                        '});',
                    '}'
                ].join('\n') + '\n';
            }
            if (typeof node.__match.set === 'number') {
                str += [
                    'if (action === "set") {',
                    'copyRunner = virtualRunner.concat();',
                    'copyRunner.precedence = virtualRunner.precedence.concat();',
                        'dataResults.push({',
                            'actionType: "set",',
                            'action: model.__virtualFns[' + node.__match.set + '],',
                            'virtualRunner: copyRunner,',
                            'valueRunner: valueRunner.concat()',
                        '});',
                    '}'
                ].join('\n') + '\n';
            }

            return str;
        }
        return '// EMPTY MATCHES\n';
    }


})(falkor);

falkor.Precedence = { specific: 4, integersOrRanges: 3, integers: 2, keys: 1 };

/* istanbul ignore next */
var SyntaxGenerator = (function() {

    var SyntaxGenerator = {
        /* istanbul ignore next */
        variableDeclarationAtDepth: function(depth) {
            return [
                'p', 'i', 'hasNumericKeys', 'numericKeys', 'someNumericKeys',
                'objectKeys', 'isArray', 'isRange',
                'inRange', 'start', 'stop',
                'value', 'typeofP', 'convertedRange', 'convertedArray', 'convertedKeys'
            ].map(function(x) { return x + depth; }).join(',');
        },
        integersOrRanges: function(depth, innerSrc) {
            var src = integersOrRangesString.
                replace(/DEPTH/g, depth).
                replace('__INNER_INTEGERS_OR_RANGES__', innerSrc).
                split('\n');

            return src.slice(1, src.length - 1).join('\n');
        },
        integers: function(depth, innerSrc) {
            var src = integersString.
                replace(/DEPTH/g, depth).
                replace('__INNER_INTEGERS__', innerSrc).
                split('\n');

            return src.slice(1, src.length - 1).join('\n');
        },
        keysStringFn: function(depth, innerSrc) {
            var src = keysString.
                replace(/DEPTH/g, depth).
                replace('__INNER_KEYS__', innerSrc).
                split('\n');

            return src.slice(1, src.length - 1).join('\n');
        },
        readyStackAtDepth: function(depth, node) {
            var str = resetStackString.
                replace(/DEPTH/g, depth).
                replace(/HAS_INTS/g, node.__hasInts).
                replace(/START/g, node.__start).
                replace(/STOP/g, node.__stop).
                split('\n');
            return str.slice(1, str.length - 1).join('\n') + '\n';
        },
        searchBody: function() {
            return searchBody;
        }
    };

    var integersOrRangesString = (function innerBlock() {
        // TODO: isArrayDEPTH could be made faster.
        if (isRangeDEPTH || isArrayDEPTH && someNumericKeysDEPTH) {

            if (isArrayDEPTH) {
                convertedRangeDEPTH = (
                    numericKeysDEPTH ?
                        pDEPTH.sort() :
                        pDEPTH.filter(function (x) {
                            return typeof x === 'number';
                        }).sort()).
                    reduce(function (acc, x) {
                        if (!acc) {
                            return [
                                {from: x, to: x}
                            ];
                        }

                        var searching = true;
                        acc.some(function (range) {
                            if (range.to + 1 === x) {
                                range.to++;
                            }

                            return searching;
                        });
                        if (searching) {
                            acc.push({from: x, to: x});
                        }

                        return acc;
                    }, null);
            } else if (isRangeDEPTH) {
                convertedRangeDEPTH = {};
                pDEPTH.length && (convertedRangeDEPTH.length = pDEPTH.length);
                (pDEPTH.from || pDEPTH.from === 0) && (convertedRangeDEPTH.from = pDEPTH.from);
                (pDEPTH.to || pDEPTH.to === 0) && (convertedRangeDEPTH.to = pDEPTH.to);
            } else {
                convertedRangeDEPTH = {from: pDEPTH, to: pDEPTH};
            }
            virtualRunner.push(falkor.VirtualPaths.integersOrRanges);
            virtualRunner.precedence.push(falkor.Precedence.integersOrRanges);
            valueRunner.push(valueDEPTH);
            __INNER_INTEGERS_OR_RANGES__
            valueRunner.splice(DEPTH);
            virtualRunner.splice(DEPTH);
            virtualRunner.precedence.splice(DEPTH);
        }
    }).toString();

    var integersString = (function() {
        // TODO: isArrayDEPTH could be made faster.
        if (isRangeDEPTH || isArrayDEPTH && someNumericKeysDEPTH || typeofPDEPTH === 'number') {

            if (isArrayDEPTH) {
                if (numericKeysDEPTH) {
                    convertedArrayDEPTH = pDEPTH.concat();
                } else {
                    convertedArrayDEPTH = pDEPTH.filter(function(x) { return typeof x === 'number'; });
                }
            } else if (isRangeDEPTH) {
                convertedArrayDEPTH = [];
                for (iDEPTH = pDEPTH.from; iDEPTH < pDEPTH.to; iDEPTH++) {
                    convertedArrayDEPTH.push(iDEPTH);
                }
            } else {
                convertedArrayDEPTH = [pDEPTH];
            }
            virtualRunner.push(falkor.VirtualPaths.integers);
            virtualRunner.precedence.push(falkor.Precedence.integers);
            valueRunner.push(valueDEPTH);
            __INNER_INTEGERS__
            valueRunner.splice(DEPTH);
            virtualRunner.splice(DEPTH);
            virtualRunner.precedence.splice(DEPTH);
        }
    }).toString();

    var keysString = (function() {
        if (isRangeDEPTH) {
            convertedKeysDEPTH = [];
            for (iDEPTH = pDEPTH.from; iDEPTH < pDEPTH.to; iDEPTH++) {
                convertedKeysDEPTH.push(iDEPTH);
            }
        } else if (isArrayDEPTH) {
            convertedKeysDEPTH = pDEPTH.concat();
        } else {
            convertedKeysDEPTH = [pDEPTH];
        }
        virtualRunner.push(falkor.VirtualPaths.keys);
        virtualRunner.precedence.push(falkor.Precedence.keys);
        valueRunner.push(valueDEPTH);
        __INNER_KEYS__
        valueRunner.splice(DEPTH);
        virtualRunner.splice(DEPTH);
        virtualRunner.precedence.splice(DEPTH);
    }).toString();

    var resetStackString = (function(path) {
        return (function() {
            // reset
            // cannot go forward.
            pDEPTH = path[DEPTH];
            hasNumericKeysDEPTH = HAS_INTS;
            startDEPTH = START;
            stopDEPTH = STOP;
            typeofPDEPTH = typeof pDEPTH;
            valueDEPTH = false;

            // Type setup
            if (typeofPDEPTH === 'object') {
                pDEPTH.position = 0;
                if (pDEPTH instanceof Array) {
                    isArrayDEPTH = true;
                    someNumericKeysDEPTH = pDEPTH.some(function(el) { return typeof el === 'number'; });
                    numericKeysDEPTH = someNumericKeysDEPTH && pDEPTH.every(function(el) { return typeof el === 'number'; });
                    objectKeysDEPTH = !numericKeysDEPTH && pDEPTH.some(function(el) { return typeof el === 'object'; });
                    pDEPTH.__length = pDEPTH.length;
                } else {
                    isRangeDEPTH = true;
                    pDEPTH.from = pDEPTH.from || 0;
                    if (pDEPTH.to === undefined) {
                        pDEPTH.to = (pDEPTH.length - 1) || 0;
                    }

                    pDEPTH.__length = pDEPTH.to - pDEPTH.from;

                    // range intersects the available numeric keys
                    inRangeDEPTH = isRangeDEPTH && hasNumericKeysDEPTH &&
                        pDEPTH.from <= stopDEPTH && pDEPTH.to >= startDEPTH ;
                }
            }
            // last line
        }).toString();
    }());

    var searchBody = (function() {
        if (!isArrayDEPTH || !isRangeDEPTH || (numericKeysDEPTH || inRangeDEPTH) && hasNumericKeysDEPTH || !hasNumericKeysDEPTH) {
            do {
                valueDEPTH = isArrayDEPTH ? pDEPTH[pDEPTH.position] : (isRangeDEPTH ? pDEPTH.position + pDEPTH.from : pDEPTH);
                virtualRunner.push(valueDEPTH);
                virtualRunner.precedence.push(falkor.Precedence.specific);
                valueRunner.push(valueDEPTH);
                __SWITCH_KEYS__
                valueRunner.splice(DEPTH);
                virtualRunner.splice(DEPTH);
                virtualRunner.precedence.splice(DEPTH);
            } while((isArrayDEPTH || isRangeDEPTH) && ++pDEPTH.position < pDEPTH.__length);
        }

        __INTEGERS_OR_RANGES__
        __INTEGERS__
        __KEYS__
    }).toString();

    return SyntaxGenerator;
})();


/* istanbul ignore next */
var ParseTree = (function() {
    return {
        generateParseTree: function(model, virtualPaths) {
            virtualPaths = model.__virtualPaths && model.__virtualPaths.concat(virtualPaths) || virtualPaths;
            model.__virtualPaths = virtualPaths;
            model.__virtualFns = [];
            var parseTree = {};
            var largestPath = 0;
            virtualPaths.forEach(function(virtualPath) {
                largestPath = buildParseTree(parseTree, virtualPath, 0, model);
            });
            return {
                model: model,
                head: parseTree,
                largestPath: largestPath
            };
        }
    };

    function buildParseTree(node, pathAndAction, depth, model, largestPath) {
        var path = pathAndAction.path;
        var get = pathAndAction.get;
        var set = pathAndAction.set;
        var el = path[depth];
        var VirtualPaths = falkor.VirtualPaths;
        var potentialLargestPath = -1;

        largestPath = largestPath || 0;

        if (path.length > largestPath) {
            largestPath = path.length;
        }

        el = !isNaN(+el) && +el || el;
        var isArray = Array.isArray(el);
        var i = 0;

        do {
            var value = el;
            var next;
            if (isArray) {
                value = value[i];
            }

            if (value === VirtualPaths.keys) {
                next = node.__keys || (node.__keys = {});
            } else if (value === VirtualPaths.integers) {
                next = node.__integers || (node.__integers = {});
            } else if (value === VirtualPaths.integersOrRanges) {
                next = node.__integersOrRanges || (node.__integersOrRanges = {});
            } else {
                if (typeof value === 'number') {
                    node.__hasInts = true;
                    if (node.__start === undefined) {
                        node.__start = node.__stop = value;
                    } else if (value < node.__start) {
                        node.__start = value;
                    } else if (value > node.__stop) {
                        node.__stop = value;
                    }
                } else {
                    node.__hasKeys = true;
                }

                next = node[value] || (node[value] = {});
            }
            if (depth + 1 === path.length) {
                next.__match = {};
                if (get) {
                    next.__match.get = model.__virtualFns.length;
                    model.__virtualFns.push(get);
                }
                if (set) {
                    next.__match.set = model.__virtualFns.length;
                    model.__virtualFns.push(set);
                }
            } else {
                potentialLargestPath = buildParseTree(next, pathAndAction, depth + 1, model);
            }
        } while(isArray && ++i < el.length);

        return potentialLargestPath > largestPath && potentialLargestPath || largestPath;
    }

})();


/* istanbul ignore next */
// TODO: This will be the place for biggest performance wins.
var PrecedenceProcessor = (function(falkor) {
    var VirtualPaths = falkor.VirtualPaths;
    var PrecedenceProcessor = {
        execute: executeByPrecedence
    };

    function executeByPrecedence(paths, matches) {

        // process until there are no more paths or no more matches.
        var matched;
        var newPerms;
        var matchedPaths;
        var i = 0;
        var generatedResults;
        var results = [];
        while (paths.length && matches.length) {
            matched = matches.shift();

            // Mutates the paths object.
            newPerms = [];
            matchedPaths = [];
            i = 0;
            do {
                // TODO: PERFORMANCE: doesn't need to be executed the first time.
                if (isMatch(paths[i], matched.valueRunner, matched.virtualRunner)) {
                    generatedResults = generateFromMatched(paths[i], matched.virtualRunner, 0);
                    newPerms = newPerms.concat(generatedResults.newPermutations);
                    matchedPaths.push(generatedResults.matchedPath);
                }

                // if its not a match, then put it into the new perms.
                else {
                    newPerms.push(paths[i]);
                }
            } while (++i < paths.length);

            paths.length = 0;
            paths = paths.concat(newPerms);

            // There will possibly have to be contexts
            matchedPaths.forEach(function(path) {
                results.push(matched.action(matchVirtualPathFormat(path, matched.virtualRunner)));
            });
        }

        return {
            misses: paths,
            results: results
        };
    }

    function isMatch(incoming, value, virtual) {
        for (var i = 0; i < virtual.length; i++) {
            if (!isMatchAtom(incoming[i], value[i], virtual[i])) {
                return false;
            }
        }
        return true;
    }

    function isStrictComparable(incomingAtom, virtualAtom) {
        return typeof incomingAtom !== 'object' && typeof virtualAtom !== 'object' &&
            virtualAtom !== VirtualPaths.integers && virtualAtom !== VirtualPaths.integersOrRanges;
    }

    function arrayComparable(incomingAtom, virtualAtom) {
        // is an array of keys
        if (typeof virtualAtom === 'object') {
            // TODO: PERFORMANCE: value map?
            for (var i = 0; i < incomingAtom.length; i++) {
                for (var j = 0; j < virtualAtom.length; j++) {
                    if (incomingAtom[i] === virtualAtom[j]) {
                        return true;
                    }
                }
            }
        }

        // match on integers or ranges.
        else if (virtualAtom === VirtualPaths.integersOrRanges || virtualAtom === VirtualPaths.integers) {
            return incomingAtom.some(function(x) { return typeof x === 'number'; });
        }

        // matches everything
        else if (virtualAtom === VirtualPaths.keys) {
            return true;
        }

        // Loop through incoming and compare against virtualAtom
        else {
            // TODO: PERFORMANCE: value map?
            for (var i = 0; i < incomingAtom.length; i++) {
                if (incomingAtom[i] === virtualAtom) {
                    return true;
                }
            }
        }

        return false;
    }

    function objectComparable(incomingAtom, virtualAtom) {
        var from = incomingAtom.from || 0;
        var to = incomingAtom.to || (incomingAtom.length + incomingAtom.from) || 0;

        // is an array of keys
        if (typeof virtualAtom === 'object') {
            for (var i = 0; i < virtualAtom.length; i++) {
                if (virtualAtom[i] >= from && virtualAtom[i] <= to) {
                    return true;
                }
            }
        }

        // match on integers or ranges.
        else if (virtualAtom === VirtualPaths.integersOrRanges || virtualAtom === VirtualPaths.integers) {
            return true;
        }

        // matches everything
        else if (virtualAtom === VirtualPaths.keys) {
            return true;
        }

        else {
            if (virtualAtom >= from && virtualAtom <= to) {
                return true;
            }
        }

        return false;
    }

    function isMatchAtom(incomingAtom, valueAtom, virtualAtom) {
        // Shortcut for keys
        if (virtualAtom === VirtualPaths.keys) {
            return true;
        }

        if (isStrictComparable(incomingAtom, valueAtom)) {
            return incomingAtom === valueAtom;
        } else if (Array.isArray(incomingAtom)) {
            return arrayComparable(incomingAtom, virtualAtom);
        }

        return objectComparable(incomingAtom, virtualAtom);
    }

    function generateFromMatched(incoming, virtual, matchedIdx) {
        // remove from array
        var virtualAtom, incomingAtom;
        var prefix = [];
        var newPermutations = [];
        var results;
        var prefixAtom;

        // push onto stack matched with each permutation point stripped out.
        for (var i = 0; i < virtual.length; i++) {
            virtualAtom = virtual[i];
            incomingAtom = incoming[i];
            prefixAtom = incomingAtom;

            // It is permutable.  Time to permute and produce a new array.
            if (typeof incomingAtom === 'object') {
                // [...] - x0
                results = permuateAt(prefix, virtualAtom, incomingAtom, incoming.slice(i + 1));
                if (results) {
                    newPermutations = newPermutations.concat(results.newPermutations);
                    prefixAtom = results.newPrefixAtom;
                }
            }
            prefix.push(prefixAtom);
        }

        return {
            newPermutations: newPermutations,
            matchedPath: flatten(prefix)
        };
    }

    function permuateAt(prefix, virtualAtom, incomingAtom, suffix) {
        // If its keys, we never permute.
        if (virtualAtom === VirtualPaths.keys) {
            return null;
        }

        var virtualAtomIsIntegers = virtualAtom === VirtualPaths.integers;
        var virtualAtomIsIntsOrRanges = virtualAtom === VirtualPaths.integersOrRanges;
        var virtualAtomIsMatcher = virtualAtomIsIntegers || virtualAtomIsIntsOrRanges;
        var newPermutations = [];
        var newPrefixAtom = incomingAtom;

        if (Array.isArray(incomingAtom)) {
            var stripped;
            newPrefixAtom = [];

            // incoming atom is all integers and were expecting integers.
            if ((virtualAtomIsIntegers || virtualAtomIsIntsOrRanges) && incomingAtom.every(function(x) { return typeof x === 'number'; })) {
                return null;
            }

            // is virtualAtom an array of keys
            else if (Array.isArray(virtualAtom)) {
                // n^2 match
                var larger, smaller;
                larger = virtualAtom.length >= incomingAtom.length ? virtualAtom : incomingAtom;
                smaller = virtualAtom.length >= incomingAtom.length ? incomingAtom : virtualAtom;
                stripped = [larger.reduce(function(acc, largerKey) {
                    var matched = false;
                    for (var i = 0; i < smaller.length; i++) {
                        matched = smaller[i] === largerKey;
                        if (matched) {
                            break;
                        }
                    }

                    if (matched) {
                        newPrefixAtom.push(largerKey);
                    } else {
                        acc.push(largerKey);
                    }
                    return acc;
                }, [])];
            }

            // addressing virtualAtom as an integers matcher.
            else if (virtualAtomIsMatcher) {
                stripped = [incomingAtom.reduce(function(acc, x) {
                    if (typeof x !== 'number') {
                        acc.push(x);
                    } else {
                        newPrefixAtom.push(x);
                    }

                    return acc;
                }, [])];
            }

            // virtualAtom is a primitive, check against each element.
            else {

                stripped = [incomingAtom.reduce(function(acc, el) {
                    if (el !== virtualAtom) {
                        acc.push(el);
                    } else {
                        newPrefixAtom.push(el);
                    }
                    return acc;
                }, [])];
            }

            // Stripped is a 2d array because its concat'd (flattened)
            // into prefix.
            if (stripped[0].length) {
                newPermutations.push(prefix.
                    concat(flatten(stripped)).
                    concat(suffix));
            }
        }

        else if (typeof incomingAtom === 'object') {
            // short circuit on ints/ranges
            if (virtualAtomIsIntsOrRanges || virtualAtomIsIntegers) {
                return null;
            }

            var from = incomingAtom.from || 0;
            var to = incomingAtom.to || from + incomingAtom.length;

            if (virtualAtom === from) {
                if (from + 1 > to) {
                    return null;
                }
                newPermutations.push(
                    prefix.
                        concat({from: from + 1, to: to}).
                        concat(suffix));
            } else if (virtualAtom === to) {
                if (to - 1 < from) {
                    return null;
                }
                newPermutations.push(
                    prefix.
                        concat({from: from, to: to - 1}).
                        concat(suffix));
            } else {
                newPermutations.push(
                    prefix.
                        concat({from: from, to: virtualAtom - 1}).
                        concat(suffix));
                newPermutations.push(
                    prefix.
                        concat({from: virtualAtom + 1, to: to}).
                        concat(suffix));
            }
            newPrefixAtom = virtualAtom;
        }

        // incomingAtom is a primitive, virtualAtom is unknown.
        else {
            // short circuit on ints/ranges
            if (virtualAtomIsIntsOrRanges || virtualAtomIsIntegers) {
                return null;
            }

            // either virtualAtom is array or primitive
            // No permutation on strictComparable.
            if (isStrictComparable(incomingAtom, virtualAtom)) {
                return null;
            }

            // virtualAtom is an array.
            stripped = [virtualAtom.reduce(function(acc, el) {
                if (el !== incomingAtom) {
                    acc.push(el);
                } else {
                    newPrefixAtom.push(el);
                }

                return acc;
            }, [])];

            if (stripped.length) {
                newPermutations.push(prefix.
                    concat(flatten(stripped)).
                    concat(suffix));
            }
        }

        return {
            newPermutations: newPermutations,
            newPrefixAtom: newPrefixAtom
        };
    }

    function flatten(x) {
        return x.map(function(atom) {
            if (Array.isArray(atom) &&  atom.length === 1) {
                return atom[0];
            }
            return atom;
        });
    }

    function matchVirtualPathFormat(incomingValues, virtualExpected) {
        virtualExpected.forEach(function(vK, i) {
            if (vK === VirtualPaths.integers) {
                if (typeof incomingValues[i] !== 'object') {
                    incomingValues[i] = [incomingValues[i]];
                } else if (!Array.isArray(incomingValues[i])) {
                    incomingValues[i] = convertRangeToArray(array);
                }
            } else if (vK === VirtualPaths.integersOrRanges) {
                if (typeof incomingValues[i] !== 'object') {
                    incomingValues[i] = [incomingValues[i]];
                } else if (Array.isArray(incomingValues[i])) {
                    incomingValues[i] = convertArrayToRange(incomingValues[i]);
                }
            } else if (vK === VirtualPaths.keys) {
                if (typeof incomingValues[i] !== 'object') {
                    incomingValues[i] = [incomingValues[i]];
                } else if (!Array.isArray(incomingValues[i])) {
                    incomingValues[i] = convertRangeToArray(array);
                }
            }
        });

        return incomingValues;
    }

    function convertRangeToArray(range) {
        var from = range.from || 0;
        var to = typeof range.to === 'number' ? range.to : range.length || 1;
        var convertedValue = [];
        for (var j = from; j <= to; j++) {
            convertedValue.push(j);
        }
        return convertedValue;
    }

    function convertArrayToRange(array) {
        var convertedRange = array.
            sort().
            reduce(function(acc, v) {
                if (!acc.length) {
                    acc.push({from: v, to: v});
                } else {
                    var currRange = acc[acc.length - 1];
                    if (currRange.to + 1 < v) {
                        acc.push({from: v, to: v});
                    } else {
                        currRange.to = v;
                    }
                }

                return acc;
            }, []);

        if (convertedRange.length === 0) {
            return convertedRange[0];
        }
        return convertedRange;
    }

    return PrecedenceProcessor;
})(falkor);
/* istanbul ignore next */
var addVirtualPaths = (function() {
    function addVirtualPaths(virtualPaths, model) {
        virtualPaths = Array.isArray(virtualPaths) && virtualPaths || [virtualPaths];
        var virtualWrapper = SemanticAnalyzer.generate(ParseTree.generateParseTree(model, virtualPaths));

        return function(pathActions) {
            var results = virtualWrapper(pathActions);
            var sorted = results.
                map(function(a) {
                    a.precedence = +a.virtualRunner.precedence.join('');
                    return a;
                }).
                sort(function(a, b) {
                    // reverse precedence ordering.
                    if (a.precedence > b.precedence) {
                        return -1;
                    } else if (b.precedence > a.precedence) {
                        return 1;
                    }
                    // can't happen?
                    return 0;
                });

            //TODO: Bug: We need to separate gets and sets before processing.
            var executionResults = PrecedenceProcessor.execute(
                pathActions.map(function(x) {
                    return x.path;
                }), sorted);
            return executionResults.results;
        };
    }

    return addVirtualPaths;
})();


falkor.DataSource = DataSource;
/**
 * A DataSource object is used by the {@link JSONGModel} to retrieve data from a remote JSONG model. {@link DataSource} is an interface that should be implemented for a given transport layer.
 * @constructor DataSource
 * @abstract
 */
function DataSource() {}

/**
 * @name get
 * @arg {...PathSet} path the path(s) to retrieve
 * @returns {Observable.<JSONGResponse>} jsongResponse the response returned from the server.
 * @memberof DataSource.prototype
 */
DataSource.prototype.get = function() {
    throw new Error("DataSource#get should be overridden by a concrete implementation.");
};

/**
 * @name set
 * @arg {...PathValue} pathBoundValue the series of path and value pairs to set on the remote JSONG model.
 * @returns {Observable.<JSONGResponse>} jsongResponse the response returned from the server.
 * @memberof DataSource.prototype
 */
DataSource.prototype.set = function() {
    throw new Error("DataSource#set should be overridden by a concrete implementation.");
};

/**
 * @name call
 * @function
 * @arg {Path} functionPath the path to the function to invoke
 * @arg {Array.<Object>} args the arguments to pass to the function
 * @arg {Array.<PathSet>} pathSuffixes paths to retrieve from objects returned from the Function
 * @arg {Array.<PathSet>} paths paths to retrieve after successful Function execution
 * @returns {Observable.<JSONGResponse>} jsongResponse the response returned from the server.
 * @memberof DataSource.prototype
 */
DataSource.prototype.call = function() {
    throw new Error("DataSource#call should be overridden by a concrete implementation.");
};

falkor.XMLHttpDataSource = XMLHttpDataSource;

/**
 * A XMLHttpDataSource object is a {@link DataSource} can be used to retrieve data from a remote JSONG model using the browser's {@link XMLHttpRequest} object.
 * @constructor XMLHttpDataSource
 * @augments DataSource
 * @param jsongUrl the URL of the JSONG model.
 * @example
 var jsongModel = new falkor.JSONGModel(new falkor.XMLHttpRequestDataSource("http://netflix.com/user.jsong"));
 var movieNames = jsongModel.getValues(["lolomo",{length:10},{length:10}, "name"]);
 */
function XMLHttpDataSource(jsongUrl, timeout) {
    this._jsongUrl = jsongUrl;
    this._timeout = timeout || 15000;
};

XMLHttpDataSource.prototype = {
    /**
     * @inheritDoc DataSource#get
     */
    get: function(pathSet) {
        var method = 'GET';
        var path = 'path=' + (pathSet.map(function(path) {
            // Bug in encoding, single quotes not encoded
            return encodeURIComponent(JSON.stringify(path));
        })).join('&path=');
        var config = buildQueryObject(this._jsongUrl, method, path);
        return request(method, config);
    },
    /**
     * @inheritDoc DataSource#set
     */
    set: function() {
        // TODO: What to send what to send
    },

    /**
     * @inheritDoc DataSource#call
     */
    call: function(callPath, args, pathSuffix, paths) {
        var method = 'GET';
        var queryData = [];
        args = args || [];
        pathSuffix = pathSuffix || [];
        paths = paths || [];
        paths.forEach(function(path) {
            queryData.push('path=' + encodeURIComponent(JSON.stringify(path)));
        });

        queryData.push('method=call');
        queryData.push('callPath=' + encodeURIComponent(JSON.stringify(callPath)));

        if (Array.isArray(args)) {
            args.forEach(function(value) {
                queryData.push('param=' + encodeURIComponent(JSON.stringify(value)));
            });
        }

        if (Array.isArray(pathSuffix)) {
            pathSuffix.forEach(function(value) {
                queryData.push('pathSuffix=' + encodeURIComponent(JSON.stringify(value)));
            });
        }

        var config = buildQueryObject(this._jsongUrl, method, queryData.join('&'));
        return request(method, config);
    }
};

// The Rx Observable facade to an XMLHttpRequest.
function request(method, config) {
    // Expects Rx to be defined
    return Rx.Observable.create(function(observer) {
        // i have to actual work now :(
        var xhr = new XMLHttpRequest();

        // Link the response methods
        xhr.onload = onXhrLoad.bind(null, observer, xhr);
        xhr.onerror = onXhrError.bind(null, observer, xhr);
        xhr.ontimeout = onXhrTimeout.bind(null, observer, xhr);

        // Sets information
        xhr.timeout = config.timeout;

        // Anything but explicit false results in true.
        xhr.withCredentials = !(config.withCredentials === false);
        xhr.responseType = 'json';

        // Takes the url and opens the connection
        xhr.open(method, config.url);

        // Fills the request headers
        var requestHeaders = config.requestHeaders || {};
        var keys = Object.keys(requestHeaders);
        keys.forEach(function(k) {
            xhr.setRequestHeader(k, requestHeaders[k]);
        });

        // Sends the request.
        xhr.send(config.data);

        return function() {
            // TODO: Dispose of request.
        };
    });
}

/*
 * General handling of a successfully completed request (that had a 200 response code)
 */
function _handleXhrComplete(observer, data) {
    observer.onNext(data);
    observer.onCompleted();
}

/*
 * General handling of ultimate failure (after appropriate retries)
 */
function _handleXhrError(observer, textStatus, errorThrown) {
    if (!errorThrown) {
        errorThrown = new Error(textStatus);
    }

    observer.onError(errorThrown);
}

function onXhrLoad(observer, xhr) {
    var status,
        responseData,
        responseObject;

    // If there's no observer, the request has been (or is being) cancelled.
    if (xhr && observer) {
        status = xhr.status;
        responseData = xhr.responseText;

        if (status >= 200 && status <= 399) {
            try {
                responseData = JSON.parse(responseData || '');
            } catch (e) {
                _handleXhrError(observer, 'invalid json', e);
            }
            _handleXhrComplete(observer, responseData);
        } else if (status === 401 || status === 403 || status === 407) {
            _handleXhrError(observer, responseData);
        } else if (status === 410) {
            // TODO: Retry ?
            _handleXhrError(observer, responseData);
        } else if (status === 408 || status === 504) {
            // TODO: Retry ?
            _handleXhrError(observer, responseData);
        } else {
            _handleXhrError(observer, responseData || ('Response code ' + status));
        }
    }
}

function onXhrError(observer, xhr) {
    _handleXhrError(observer, xhr.statusText || 'request error');
}

function onXhrTimeout(observer) {
    _handleXhrError(observer, 'request timeout');
}

function buildQueryObject(url, method, queryData) {
    var qData = [];
    var keys;
    var data = {url: url};

    if (typeof queryData === 'string') {
        qData.push(queryData);
    } else {
        keys = Object.keys(queryData);
        keys.forEach(function(k) {
            var value = typeof queryData[k] === 'object' ? JSON.stringify(queryData[k]) : queryData[k];
            qData.push(k + '=' + value);
        });
    }

    if (method === 'GET') {
        data.url += '?' + qData.join('&');
    } else {
        data.data = qData.join('&');
    }

    return data;
}

falkor.ImmediateScheduler = ImmediateScheduler;

function ImmediateScheduler() {
}

ImmediateScheduler.prototype = {
    schedule: function(action) {
        action();
    }
};

falkor.TimeoutScheduler = TimeoutScheduler;

function TimeoutScheduler(delay) {
    this.delay = delay;
}

TimeoutScheduler.prototype = {
    schedule: function(action) {
        setTimeout(action, this.delay);
    }
};


// Ties the requestQueue to a jsongModel.
// For dataSource purposes.
var RequestQueue2 = falkor.RequestQueue2 = function(jsongModel, scheduler) {
    this._scheduler = scheduler;
    this._jsongModel = jsongModel;

    this._scheduled = false;
    this._requests = [];
};

RequestQueue2.prototype = {
    _get: function() {
        var i = -1;
        var requests = this._requests;
        while (++i < requests.length) {
            if (!requests[i].pending) {
                return requests[i];
            }
        }
        return requests[requests.length] = new Request2(this._jsongModel, this);
    },

    remove: function(request) {
        for (var i = this._requests.length - 1; i > -1; i--) {
            if (this._requests[i].id === request.id && this._requests.splice(i, 1)) {
                break;
            }
        }
    },

    request: function(requestedPaths, optimizedPaths, observer) {
        var self = this;

        // TODO: A contains check.
        self._get().batch(requestedPaths, optimizedPaths, observer);

        if (!self._scheduled) {
            self._scheduled = true;
            self._scheduler.schedule(self._flush.bind(self));
        }

        return {
            dispose: function() {
                // TODO: 2 things to dispose of.
                // TODO: Current batched requests (if any).
            }
        };
    },

    _flush: function() {
        this._scheduled = false;

        var requests = this._requests, i = -1;
        var disposables = [];
        while (++i < requests.length) {
            if (!requests[i].pending) {
                disposables[disposables.length] = requests[i].flush();
            }
        }

        return {
            dispose: function() {
                // TODO: In-flight batched requests.  This is just a place holder.
                disposables.forEach(function(d) { d.dispose(); });
            }
        }
    }
};

var REQUEST_ID = 0;

var Request2 = function(jsongModel, queue) {
    var self = this;
    self._jsongModel = jsongModel;
    self._queue = queue;
    self.observers = [];
    self.optimizedPaths = [];
    self.requestedPaths = [];
    self.pending = false;
    self.id = ++REQUEST_ID;
};

Request2.prototype = {

    batch: function(requestedPaths, optimizedPaths, observer) {
        // TODO: Do we need to gap fill?
        var self = this;
        observer.onNext = observer.onNext || NOOP;
        observer.onError = observer.onError || NOOP;
        observer.onCompleted = observer.onCompleted || NOOP;
        var onNext = observer.onNext.bind(observer);

        observer.onNext = function(value) {
            // TODO: Do we need to do any intercepting?
            onNext(value);
        };

        if (!observer.__observerId) {
            observer.__observerId = ++REQUEST_ID;
        }
        observer._requestId = self.id;

        self.observers[self.observers.length] = observer;
        self.optimizedPaths[self.optimizedPaths.length] = optimizedPaths;
        self.requestedPaths[self.requestedPaths.length] = requestedPaths;

        return self;
    },

    flush: function() {
        var incomingValues, query, op, len;
        var self = this;
        var requested = self.requestedPaths;
        var optimized = self.optimizedPaths;
        var observers = self.observers;
        var disposables = [];
        var results = [];
        var model = self._jsongModel;
        self._scheduled = false;
        self.pending = true;

        function recurseGet(requested, optimized) {
            var optimizedMaps = {};
            var requestedMaps = {};
            var r, o, i, j, obs, resultIndex;
            for (i = 0, len = requested.length; i < len; i++) {
                r = requested[i];
                o = optimized[i];
                obs = observers[i];
                for (j = 0; j < r.length; j++) {
                    pathsToMapWithObservers(r[j], 0, readyNode(requestedMaps, null, obs), obs);
                    pathsToMapWithObservers(o[j], 0, readyNode(optimizedMaps, null, obs), obs);
                }
            }
            return model._dataSource.
                get(collapse(optimizedMaps)).
                subscribe(function(response) {
                    incomingValues = response;
                }, function(err) {
                    var i = -1;
                    var n = observers.length;
                    while (++i < n) {
                        obs = observers[i];
                        obs.onError && obs.onError(err);
                    }
                }, function() {
                    var i, n, obs;
                    self._queue.remove(self);
                    i = -1;
                    n = observers.length;
                    while (++i < n) {
                        obs = observers[i];
                        obs.onNext && obs.onNext({
                            jsong: incomingValues.jsong || incomingValues.values || incomingValues.value,
                            paths: incomingValues.paths
                        });
                        obs.onCompleted && obs.onCompleted();
                    }
                });
        }

        return recurseGet(requested, optimized);
    },
    // Returns the paths that are contained within this request.
    contains: function(requestedPaths, optimizedPaths) {
        // TODO: 
    }
};

function pathsToMapWithObservers(path, idx, branch, observer) {
    var curr = path[idx];

    // Object / Array
    if (typeof curr === 'object') {
        if (Array.isArray(curr)) {
            curr.forEach(function(v) {
                readyNode(branch, v, observer);
                if (path.length > idx + 1) {
                    pathsToMapWithObservers(path, idx + 1, branch[v], observer);
                }
            });
        } else {
            var from = curr.from || 0;
            var to = curr.to >= 0 ? curr.to : curr.length;
            for (var i = from; i <= to; i++) {
                readyNode(branch, i, observer);
                if (path.length > idx + 1) {
                    pathsToMapWithObservers(path, idx + 1, branch[i], observer);
                }
            }
        }
    } else {
        readyNode(branch, curr, observer);
        if (path.length > idx + 1) {
            pathsToMapWithObservers(path, idx + 1, branch[curr], observer);
        }
    }
}

/**
 * Builds the set of collapsed
 * queries by traversing the tree
 * once
 */
var charPattern = /\D/i;

function readyNode(branch, key, observer) {
    if (key === null) {
        branch.__observers = branch.__observers || [];
        !containsObserver(branch.__observers, observer) && branch.__observers.push(observer);
        return branch;
    }

    if (!branch[key]) {
        branch[key] = {__observers: []};
    }

    !containsObserver(branch[key].__observers, observer) && branch[key].__observers.push(observer);
    return branch;
}

function containsObserver(observers, observer) {
    if (!observer) {
        return;
    }
    return observers.reduce(function(acc, x) {
        return acc || x.__observerId === observer.__observerId;
    }, false);
}

function collapse(pathMap) {
    return rangeCollapse(buildQueries(pathMap));
}

/**
 * Collapse ranges, e.g. when there is a continuous range
 * in an array, turn it into an object instead
 *
 * [1,2,3,4,5,6] => {"from":1, "to":6}
 *
 */
function rangeCollapse(paths) {
    paths.forEach(function (path) {
        path.forEach(function (elt, index) {
            var range;
            if (Array.isArray(elt) && elt.every(isNumber) && allUnique(elt)) {
                elt.sort(function(a, b) {
                    return a - b;
                });
                if (elt[elt.length-1] - elt[0] === elt.length-1) {
                    // create range
                    range = {};
                    range.from = elt[0];
                    range.to = elt[elt.length-1];
                    path[index] = range;
                }
            }
        });
    });
    return paths;
}

/* jshint forin: false */
function buildQueries(root) {

    if(root == null) {
        return [ [] ];
    }

    var children = Object.keys(root).filter(notPathMapInternalKeys),
        child, memo, paths, key, childIsNum,
        list, head, tail, clone, results,
        i = -1, n = children.length,
        j, k, x;

    if (n === 0 || Array.isArray(root) === true) {
        return [ [] ];
    }

    memo = {};
    while(++i < n) {
        child = children[i];
        paths = buildQueries(root[child]);
        key = createKey(paths);

        childIsNum = typeof child === 'string' && !charPattern.test(child);

        if ((list = memo[key]) && (head = list.head)) {
            head[head.length] = childIsNum ? parseInt(child, 10) : child;
        } else {
            memo[key] = {
                head: [childIsNum ? parseInt(child, 10) : child],
                tail: paths
            };
        }
    }

    results = [];
    for(x in memo) {
        head = (list = memo[x]).head;
        tail = list.tail;
        i = -1;
        n = tail.length;
        while(++i < n) {
            list = tail[i];
            j = -1;
            k = list.length;
            if(head[0] === '') {
                clone = [];
            } else {
                clone = [head.length === 1 ? head[0] : head];
                while(++j < k) {
                    clone[j + 1] = list[j];
                }
            }
            results[results.length] = clone;
        }
    }
    return results;
}

function notPathMapInternalKeys(key) {
    return (
        key !== "__observers" &&
        key !== "__pending" &&
        key !== "__batchID"
        );
}

/**
 * Return true if argument is a number
 */
function isNumber(val) {
    return typeof val === "number";
}

/**
 * allUnique
 * return true if every number in an array is unique
 */
function allUnique(arr) {
    var hash = {},
        index,
        len;

    for (index = 0, len = arr.length; index < len; index++) {
        if (hash[arr[index]]) {
            return false;
        }
        hash[arr[index]] = true;
    }
    return true;
}

/**
 * Sort a list-of-lists
 * Used for generating a unique hash
 * key for each subtree; used by the
 * memoization
 */
function sortLol(lol) {
    return lol.reduce(function (result, curr) {
        if (curr instanceof Array) {
            result.push(sortLol(curr).slice(0).sort());
            return result;
        }
        return result.concat(curr);
    }, []).slice(0).sort();
}

/**
 * Create a unique hash key for a set
 * of paths
 */
function createKey(list) {
    return JSON.stringify(sortLol(list));
}
// Note: For testing
falkor.__Internals.buildQueries = buildQueries;


falkor.JSONGModel = JSONGModel;

function JSONGModel(dataSource, maxSize, collectRatio, cache, errorSelector) {
    this._dataSource = dataSource;
    this._cache = cache || {};
    this._maxSize = maxSize || Math.pow(2, 53) - 1;
    this._collectRatio = collectRatio || 0.75;
    this._scheduler = new falkor.ImmediateScheduler();
    this._request = new RequestQueue2(this, this._scheduler);
    this._errorSelector = errorSelector;
    this._retryCount = 3;
}

function jsongModelOperation(name) {
    return function() {
        
        var model = this, root = model._root,
            args = Array.prototype.slice.call(arguments),
            selector = args[args.length - 1];

        selector = typeof selector === "function" ? args.pop() : undefined;
        
        return JSONGModelResponse.create(function(options) {
            
            var onNext = options.onNext.bind(options),
                onError = options.onError.bind(options),
                onCompleted = options.onCompleted.bind(options),
                isProgressive = options.isProgressive,
                valuesCount = selector && selector.length || 0;
            var operationalName = name;
            var disposed = false;
            var hasSelector = !!selector;
            var format = hasSelector && 'AsJSON' || options.format || 'AsPathMap';
            var isJSONG = format === 'AsJSONG';
            var seedRequired = isSeedRequired(format);
            var isValues = format === 'AsValues';
            var requestExternalData = false;
            var pathSetValues = [];
            var errors = [];
            var indices = [];
            var undefineds = [];
            var jsongPaths = [];
            var errorSelector = options.errorSelector || model._errorSelector;
            var counter = -1;
            var atLeastOneValue = false;

            // TODO: Should be defined on the model.
            var retryMax = model._retryCount;

            if (hasSelector) {
                for (var i = 0; i < args.length; i++) {
                    if (i < valuesCount) {
                        pathSetValues[pathSetValues.length] = {};
                    }
                    undefineds[undefineds.length] = false;
                    indices[indices.length] = i;
                }
            } else if (seedRequired) {
                pathSetValues[0] = {};
                undefineds[0] = true;
            }

            function recurse(requested, relativePathSetValues) {
                counter++;
                var operations = getOperationArgGroups(requested, operationalName, format, relativePathSetValues, hasSelector, isValues && onNext, errorSelector);
                var results = processOperations(model, operations);
                
                errors = errors.concat(results.errors);
                atLeastOneValue = atLeastOneValue || results.valuesReceived;

                // from each of the operations, the results must be remerged back into the values array
                operations.forEach(function(op) {
                    if (hasSelector) {
                        var absoluteIndex;
                        var hasIndex;
                        op.values.forEach(function(valueObject, i) {
                            absoluteIndex = indices[i + op.valuesOffset];
                            hasIndex = typeof absoluteIndex === 'number';
                            if (hasIndex) {
                                if (valueObject) {
                                    if (valueObject.json !== undefined) {
                                        pathSetValues[absoluteIndex] = valueObject;
                                    } else {
                                        pathSetValues[absoluteIndex] = {json: valueObject};
                                    }
                                    undefineds[absoluteIndex] = false;
                                } else {
                                    undefineds[absoluteIndex] = undefineds[absoluteIndex] && true;
                                }
                            }
                        });
                    } else if (seedRequired) {
                        if (op.values[0]) {
                            pathSetValues = op.values;
                            undefineds[0] = false;
                            if (isJSONG) {
                                jsongPaths = jsongPaths.concat(op.values[0].paths);
                            }
                        } else {
                            undefineds[0] = true;
                        }
                    }
                });
                var nextRequest = results.requestedMissingPaths;
                var missingLength = nextRequest.length;
                var incomingValues;

                // no need to inform the user of the current state if in value mode
                if (isProgressive && missingLength && !isValues) {
                    emitValues();
                }

                if (missingLength &&
                    (operationalName !== 'set' || requestExternalData) &&
                    counter <= retryMax && !model._local &&
                    model._dataSource) {
                    model._request.request(nextRequest, results.optimizedMissingPaths, {
                        onNext: function(jsongEnvelop) {
                            incomingValues = jsongEnvelop;
                        },
                        onError: function(err) {
                            // When an error is thrown, all currently requested paths are
                            // inserted as errors and the output format is not needed.
                            // TODO: There must be a way to make this more efficient.
                            var out = model._setPathsAsValues.apply(null, [model].concat(
                                nextRequest.
                                    reduce(function(acc, r) {
                                        acc[0].push({
                                            path: r,
                                            value: err
                                        });
                                        return acc;
                                    }, [[]])
                            ));
                            errors = errors.concat(out.errors);
                            
                            // there could still be values within the cache
                            emitValues();
                            executeOnErrorOrCompleted();
                        },
                        onCompleted: function() {
                            // Note: processing the requested missing paths
                            var newOperations = [];
                            var previousIndices = indices;
                            var newSelectorIndex = 0;
                            indices = [];

                            nextRequest.forEach(function(r) {
                                var op = newOperations[newOperations.length - 1];
                                if (!op) {
                                    op = newOperations[newOperations.length] = {jsong: incomingValues.jsong, paths: []};
                                }
                                if (hasSelector) {
                                    if (typeof r.pathSetIndex !== 'undefined') {
                                        var pathSetIndex = r.pathSetIndex;
                                        var absoluteIndex = previousIndices[pathSetIndex];
                                        var hasIndex = typeof absoluteIndex === 'number' && absoluteIndex < valuesCount;
                                        if (op && op.pathSetIndex !== pathSetIndex && typeof op.pathSetIndex !== 'undefined') {
                                            if (op && op.paths.length > 1) {
                                                op.paths = fastCollapse(op.paths);
                                            }
                                            op = newOperations[newOperations.length] = {jsong: incomingValues.jsong, paths: []};
                                            op.pathSetIndex = pathSetIndex;
                                            hasIndex && (indices[indices.length] = absoluteIndex);
                                        } else if (typeof op.pathSetIndex === 'undefined') {
                                            hasIndex && (op.pathSetIndex = pathSetIndex);
                                            hasIndex && (indices[indices.length] = absoluteIndex);
                                        }
                                    }
                                } else if (seedRequired) {
                                    // single seed white board
                                } else {
                                    // isValues
                                }
                                op.paths[op.paths.length] = r;
                            });
                            
                            // Note: We fast collapse all hasSelector ops.
                            if (hasSelector) {
                                var op = newOperations[newOperations.length - 1];
                                if (op && op.paths.length > 1) {
                                    op.paths = fastCollapse(op.paths);
                                }
                            }
                            // TODO: Error tracking

                            // recurse the new paths
                            // has to be set to a set since we are now merging in data
                            // TODO: external set could be triggered by this
                            operationalName = 'set';
                            requestExternalData = true;
                            if (hasSelector) {
                                var arr = [];
                                for (var i = 0; i < indices.length; i++) {
                                    arr[arr.length] = relativePathSetValues[indices[i]];
                                }
                                recurse(newOperations, arr);
                            } else if (seedRequired) {
                                recurse(newOperations, pathSetValues);
                            } else {
                                recurse(newOperations, []);
                            }
                        }
                    });
                } else {
                    emitValues();
                    executeOnErrorOrCompleted();
                }
            }

            recurse(args, pathSetValues);

            function emitValues() {
                if (disposed) {
                    return;
                }

                root.allowSync = true;
                if (atLeastOneValue) {
                    if (hasSelector) {
                        if (valuesCount > 0) {
                            // they should be wrapped in json items
                            onNext(selector.apply(model, pathSetValues.map(function(x, i) {
                                if (undefineds[i]) {
                                    return undefined;
                                }

                                return x && x.json;
                            })));
                        } else {
                            onNext(selector.call(model));
                        }
                    } else if (!isValues && !model._progressive) {
                        // this means there is an onNext function that is not AsValues or progressive,
                        // therefore there must only be one onNext call, which should only be the 0
                        // index of the values of the array
                        if (isJSONG) {
                            pathSetValues[0].paths = jsongPaths;
                        }
                        onNext(pathSetValues[0]);
                    }
                    root.allowSync = false;
                }
            }

            function executeOnErrorOrCompleted() {
                if (disposed) {
                    return;
                }

                root.allowSync = true;
                if (errors.length) {
                    onError(errors);
                } else {
                    onCompleted();
                }
                root.allowSync = false;
            }

            return {
                dispose: function() {
                    disposed = true;
                }
            };
        });
    }
}

function fastCollapse(paths) {
    return paths.reduce(function(acc, p) {
        var curr = acc[0];
        if (!curr) {
            acc[0] = p;
        } else {
            p.forEach(function(v, i) {
                // i think
                if (typeof v === 'object') {
                    curr[curr[i].length] = v[0];
                }
            });
        }
        return acc;
    }, []);
}

function getOperationArgGroups(ops, name, format, values, hasSelector, onNext, errorSelector) {
    var seedRequired = isSeedRequired(format);
    var isValues = !seedRequired;
    var valuesIndex = 0, valueEnvelope;
    return ops.
        map(cloneIfPathOrPathValue).
        reduce(function(groups, argument, index) {
            var group = groups[groups.length - 1],
                type  = isPathOrPathValue(argument) ? "Paths" :
                        isJSONG(argument) ? "JSONG" : "JSON",
                groupType = group && group.type,
                op = JSONGModel.prototype['_' + name + type + format];

            if (type !== groupType) {
                group = groups[groups.length] = [];
            }

            if (groupType === null || type !== groupType) {
                group.type = type;
                group.op = op;
                group.isSeedRequired = seedRequired;
                group.isValues = isValues;
                group.values = [];
                group.onNext = onNext;
                group.valuesOffset = valuesIndex;
                group.errorSelector = errorSelector;
            }
            group[group.length] = argument;
            valueEnvelope = values[valuesIndex];
            if (seedRequired && hasSelector && valuesIndex < values.length) {
                // This is the relative offset into the values array
                group.values[group.values.length] = valueEnvelope.json || valueEnvelope.jsong || valueEnvelope;
                valuesIndex++;
            } else if (!hasSelector && seedRequired) {
                // no need to know the value index
                group.values[group.values.length] = valueEnvelope.json || valueEnvelope.jsong || valueEnvelope;
            }

            return groups;
        }, []);
}

function processOperations(model, operations) {
    // no value has to be kept track of since its all in the 'values' array that is attached
    // to each operation
    return operations.reduce(function(memo, operation) {
        var results = operation.isValues ?
            operation.op(model, operation, operation.onNext, operation.errorSelector) :
            operation.op(model, operation, operation.values, operation.errorSelector);
        var missing = results.requestedMissingPaths;
        var offset = operation.valuesOffset;

        for (var i = 0, len = missing.length; i < len; i++) {
            missing[i].pathSetIndex += offset;
        }

        memo.requestedMissingPaths = memo.requestedMissingPaths.concat(missing);
        memo.optimizedMissingPaths = memo.optimizedMissingPaths.concat(results.optimizedMissingPaths);
        memo.errors = memo.errors.concat(results.errors);
        memo.valuesReceived = memo.valuesReceived || results.requestedPaths.length > 0;

        return memo;
    }, {
        errors: [],
        requestedMissingPaths: [],
        optimizedMissingPaths: [],
        valuesReceived: false
    });
}

function not() {
    var fns = Array.prototype.slice.call(arguments);
    return function() {
        var args = arguments;
        return !fns.every(function(fn) {
            return fn.apply(null, args);
        });
    }
}

function isPathOrPathValue(x) {
    return !!(Array.isArray(x)) || (
        x.hasOwnProperty("path") && x.hasOwnProperty("value"));
}

function isJSONG(x) {
    return x.hasOwnProperty("jsong");
}

function isSeedRequired(format) {
    return format === 'AsJSON' || format === 'AsJSONG' || format === 'AsPathMap';
}

function cloneIfPathOrPathValue(x) {
    return (Array.isArray(x) && x.concat()) || (
        x.hasOwnProperty("path") && x.hasOwnProperty("value") && (
        x.path = x.path.concat()) && x || x) || x;
}

JSONGModel.prototype = {
    _root: {
        expired: [],
        allowSync: false,
        unsafeMode: true
    },
    _path: [],
    _boxed: false,
    _local: false,
    _progressive: false,
    _request: new falkor.RequestQueue2(new falkor.ImmediateScheduler()),
    get: jsongModelOperation("get"),
    set: jsongModelOperation("set"),
    call: jsongModelOperation("call"),
    invalidate: function() {
        var pathValues = Array.prototype.slice.call(arguments).map(function(path) {
                return { path: path, value: undefined };
            }),
            model = this;
        return JSONGModelResponse.create(function(observer) {
            try {
                model._setPathsAsJSON(model, pathValues);
                observer.onNext(model);
                observer.onCompleted();
            } catch(e) {
                observer.onError(e);
            }
        });
    },
    setRetryCount: function(x) {
        return this.clone(["_retryMax", x]);
    },
    setCache: function(cache) {
        return this._setJSONAsValues(this, [cache], 0);
    },
    bindSync: function(path) {
        if(Array.isArray(path) === false) {
            throw new Error("JSONGModel#bindSync must be called with an Array path.");
        }
        return this.syncCheck("bindSync") && this.clone(
            ["_path", this._path.concat(path)],
            ["__context", undefined]
        );
    },
    getBoundValue: function() {
        return getContextSync.call(this).value;
    },
    clone: function() {
        var self = this;
        return Array.prototype.slice.call(arguments).reduce(function(model, tuple) {
            return (model[tuple[0]] = tuple[1]) && model || model;
        }, Object.keys(self).reduce(function(model, key) {
            return (model[key] = self[key]) && model || model;
        }, new JSONGModel(
            self._dataSource,
            self._cache,
            self._maxSize,
            self._collectRatio)));
    },
    batch: function(schedulerOrDelay) {
        if(typeof schedulerOrDelay === "number") {
            schedulerOrDelay = new falkor.TimeoutScheduler(Math.round(Math.abs(schedulerOrDelay)));
        } else if(!schedulerOrDelay || !schedulerOrDelay.schedule) {
            schedulerOrDelay = new falkor.ImmediateScheduler();
        }
        return this.clone(["_request", new falkor.RequestQueue2(this, schedulerOrDelay)]);
    },
    unbatch: function() {
        return this.clone(["_request", new falkor.RequestQueue2(this, new ImmediateScheduler())]);
    },
    boxValues: function() {
        return this.clone(["_boxed", true]);
    },
    unboxValues: function() {
        return this.clone(["_boxed", false]);
    },
    toLocal: function() {
        return this.clone(["_local", true]);
    },
    syncCheck: function(name) {
        if(this._root.allowSync === false && this._root.unsafeMode === false) {
            throw new Error("JSONGModel#" + name + " may only be called within the context of a request selector.");
        }
        return true;
    },
    addVirtualPaths: function(pathsAndActions) {
        this._virtualPaths = addVirtualPaths(pathsAndActions, this);
    },
    _getPathsAsValues  :  getPathsAsValues,
    _getPathsAsJSON    :    getPathsAsJSON,
    _getPathsAsPathMap : getPathsAsPathMap,
    _getPathsAsJSONG   :   getPathsAsJSONG,
    _getJSONAsValues   :   getJSONAsValues,
    _getJSONAsJSON     :     getJSONAsJSON,
    _getJSONAsPathMap  :  getJSONAsPathMap,
    _getJSONAsJSONG    :    getJSONAsJSONG,
    _setPathsAsValues  :  setPathsAsValues,
    _setPathsAsJSON    :    setPathsAsJSON,
    _setPathsAsPathMap : setPathsAsPathMap,
    _setPathsAsJSONG   :   setPathsAsJSONG,
    _setJSONAsValues   :   setJSONAsValues,
    _setJSONAsJSON     :     setJSONAsJSON,
    _setJSONAsPathMap  :  setJSONAsPathMap,
    _setJSONAsJSONG    :    setJSONAsJSONG,
    _setJSONGAsValues  :  setJSONGAsValues,
    _setJSONGAsJSON    :    setJSONGAsJSON,
    _setJSONGAsPathMap : setJSONGAsPathMap,
    _setJSONGAsJSONG   :   setJSONGAsJSONG
};

function getJSONAsJSON() {
    var returnBlocker;
    var generation, model, state, values, errorSelector, onNext, errors, boxed, includeErrors, refreshing, connected, root, contextCache, context, expired, expiredLength, boundPath, optimizedBoundPath, column, offset, jsonDepth, boundPathValue, contexts, requested, optimized, requestedPaths, optimizedPaths, requestedMissingPaths, optimizedMissingPaths, requestedPath, optimizedPath, pathMaps, messages, path, jsons, jsonKeys, contextParent, index, count, hasValues, jsonCache, json, refsByCols, length, message, pathSet, keys, key, isKeySet, isBranch, resetOptimizedDepth, reference, i, j, n, messageParent, contextExpires, contextInvalidated, head, tail, next, prev, contextType, contextValue, branchKeyTmp, expandsCount, outermostColumn, refLen, outermostLength, outermostPath, refContainer, backRefs, jsonKey, src, dest, opt, req, reqLen, key2, k, optLen, err, x, val, jsonLength;
    generation = __GENERATION_GENERATION++;
    model = arguments[0];
    state = arguments[1];
    values = arguments[2];
    errorSelector = arguments[3];
    if (typeof values === 'function') {
        onNext = values;
        values = undefined;
    }
    errors = state.errors || (state.errors = []);
    boxed = model._boxed;
    includeErrors = model._includeErrors;
    refreshing = model._refreshing;
    connected = model._connected;
    root = model._root;
    contextCache = context = model._cache;
    expired = root.expired;
    expiredLength = expired.length;
    boundPath = state.boundPath || model._path;
    optimizedBoundPath = [];
    column = state.column || (state.column = 0) - 1;
    offset = state.offset || (state.offset = 0);
    jsonDepth = state.jsonDepth || (state.jsonDepth = 0);
    boundPathValue = state.boundPathValue;
    contexts = state.contexts || (state.contexts = []);
    requested = state.requested || (state.requested = {});
    optimized = state.optimized || (state.optimized = {});
    requestedPaths = state.requestedPaths || (state.requestedPaths = []);
    optimizedPaths = state.optimizedPaths || (state.optimizedPaths = []);
    requestedMissingPaths = state.requestedMissingPaths || (state.requestedMissingPaths = []);
    optimizedMissingPaths = state.optimizedMissingPaths || (state.optimizedMissingPaths = []);
    requestedPath = state.requestedPath || (state.requestedPath = []);
    optimizedPath = state.optimizedPath || (state.optimizedPath = []);
    pathMaps = state;
    messages = state.messages || (state.messages = []);
    path = [];
    jsons = state.jsons || (state.jsons = []);
    jsonKeys = state.jsonKeys || (state.jsonKeys = []);
    optimizedBoundPath = boundPath;
    if (contextParent == null && (contextParent = model.__context) == null) {
        if (boundPath.length === 0) {
            contextParent = contextCache;
        } else {
            if (boundPathValue == null) {
                boundPathValue = getContextSync.call(model);
            }
            optimizedBoundPath = boundPathValue.path;
            if ((contextParent = boundPathValue.value) == null) {
                contextParent = {};
            }
            boundPathValue.requested = [];
            boundPathValue.optimized = [];
            state.boundPathValue = boundPathValue;
        }
    }
    contexts[-1] = context = contextParent;
    index = pathMaps.index || (pathMaps.index = 0);
    count = pathMaps.length;
    for (; index < count; ++index) {
        pathSet = pathMaps[index];
        hasValues = false;
        jsonDepth = jsonKeys.length = 0;
        jsonCache = json = jsons[-1] = !!values && values[index] || undefined;
        offset = 0;
        refsByCols = state.refsByCols = [];
        refsByCols[-1] = optimizedBoundPath;
        path.length = 0;
        column = 0;
        length = 0;
        messages[-1] = message = pathSet;
        while (length > -1) {
            if (!!message) {
                keys = message[__KEYS] || (message[__KEYS] = Object.keys(message));
                keys[__OFFSET] || (keys[__OFFSET] = 0);
                if (keys.length === 0) {
                    length -= 1;
                    message = messages[length - 1];
                    keys = message[__KEYS];
                    keys[__OFFSET] -= 1;
                }
                if ((key = keys[++keys[__OFFSET] - 1]) !== undefined) {
                    key === __NULL && (key = null);
                    if (key == null || !(!(key[0] !== '_' || key[1] !== '_') || (key === __SELF || key === __PARENT || key === __ROOT) || key[0] === '$')) {
                        isKeySet = message[__IS_KEY_SET] = keys.length > 1;
                        path[length] = isKeySet && [key] || key;
                        message = messages[length] = message[key];
                        isBranch = !!message && typeof message === 'object' && !message[$TYPE] && !Array.isArray(message) && !(message[__KEYS] && message[__KEYS].length);
                        if (isBranch) {
                            length += 1;
                            continue;
                        } else {
                            resetOptimizedDepth = column;
                            while (--resetOptimizedDepth >= -1) {
                                if (!!(reference = refsByCols[resetOptimizedDepth])) {
                                    i = j = -1;
                                    n = reference.length;
                                    offset = n - ++resetOptimizedDepth;
                                    while (++i < n) {
                                        optimizedPath[++j] = reference[i];
                                    }
                                    while (resetOptimizedDepth < column) {
                                        optimizedPath[++j] = requestedPath[resetOptimizedDepth++];
                                    }
                                    optimizedPath.length = offset + resetOptimizedDepth;
                                    break;
                                }
                            }
                            contextParent = context = contexts[column - 1];
                            messageParent = message = messages[column - 1];
                            contextParent = contexts[column - 1];
                            resolvePath:
                                do {
                                    for (; column < length; ++column) {
                                        key = path[column];
                                        messageParent = messages[column - 1];
                                        message = messages[column];
                                        isKeySet = messageParent[__IS_KEY_SET];
                                        key = isKeySet ? key[0] : key;
                                        requestedPath[requestedPath.length = column] = key;
                                        if (key != null && key !== __NULL) {
                                            !!jsonCache && isKeySet === true && (jsonKeys[jsonDepth] = key);
                                            optimizedPath[optimizedPath.length = column + offset] = key;
                                            context = contextParent[key];
                                            if (context != null) {
                                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                    contextInvalidated = context != null && context[__INVALIDATED];
                                                    if (contextInvalidated === true === false) {
                                                        context.__invalidated = true;
                                                        context[$EXPIRES] = 0;
                                                        expired[++expiredLength] = context;
                                                        if (context != null && typeof context === 'object') {
                                                            head = root.__head;
                                                            tail = root.__tail;
                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                            context === head && (root.__head = root.__next = head = next);
                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                            context.__next = context.__prev = undefined;
                                                            head = tail = next = prev = undefined;
                                                        }
                                                    }
                                                    context = undefined;
                                                }
                                            }
                                            contextType = context != null && context[$TYPE];
                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                            branchKeyTmp = key;
                                            if ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue)) {
                                                expandsCount = -1;
                                                refsByCols[outermostColumn = column] = contextValue;
                                                do {
                                                    branchKeyTmp = key;
                                                    if ((context = context.__context) !== undefined) {
                                                        i = -1;
                                                        refLen = contextValue.length;
                                                        offset = refLen - column - 1;
                                                        optimizedPath.length = refLen;
                                                        while (++i < refLen) {
                                                            optimizedPath[i] = contextValue[i];
                                                        }
                                                        if (context != null) {
                                                            if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                                contextInvalidated = context != null && context[__INVALIDATED];
                                                                if (contextInvalidated === true === false) {
                                                                    context.__invalidated = true;
                                                                    context[$EXPIRES] = 0;
                                                                    expired[++expiredLength] = context;
                                                                    if (context != null && typeof context === 'object') {
                                                                        head = root.__head;
                                                                        tail = root.__tail;
                                                                        (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                        (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                        context === head && (root.__head = root.__next = head = next);
                                                                        context === tail && (root.__tail = root.__prev = tail = prev);
                                                                        context.__next = context.__prev = undefined;
                                                                        head = tail = next = prev = undefined;
                                                                    }
                                                                }
                                                                context = undefined;
                                                            }
                                                        }
                                                        contextType = context != null && context[$TYPE];
                                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                                        if (contextType === 'error') {
                                                            expandsCount = 0;
                                                            break resolvePath;
                                                        } else if (context != null === false) {
                                                            expandsCount = -1;
                                                            break resolvePath;
                                                        }
                                                        contextParent = context;
                                                    } else {
                                                        refsByCols[outermostColumn = column] = contextValue;
                                                        outermostLength = length;
                                                        outermostPath = path;
                                                        offset = 0;
                                                        column = -1;
                                                        path = contextValue;
                                                        length = path.length - 1;
                                                        contextParent = contextCache;
                                                        while (++column < length) {
                                                            if ((key = path[column]) == null) {
                                                                continue;
                                                            }
                                                            optimizedPath[optimizedPath.length = column + offset] = key;
                                                            context = contextParent[key];
                                                            if (context != null) {
                                                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                                    contextInvalidated = context != null && context[__INVALIDATED];
                                                                    if (contextInvalidated === true === false) {
                                                                        context.__invalidated = true;
                                                                        context[$EXPIRES] = 0;
                                                                        expired[++expiredLength] = context;
                                                                        if (context != null && typeof context === 'object') {
                                                                            head = root.__head;
                                                                            tail = root.__tail;
                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                            context === head && (root.__head = root.__next = head = next);
                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                            context.__next = context.__prev = undefined;
                                                                            head = tail = next = prev = undefined;
                                                                        }
                                                                    }
                                                                    context = undefined;
                                                                }
                                                            }
                                                            contextType = context != null && context[$TYPE];
                                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                                            if (context === undefined) {
                                                                i = -1;
                                                                refLen = path.length;
                                                                offset = refLen - column - 1;
                                                                optimizedPath.length = refLen;
                                                                while (++i < refLen) {
                                                                    optimizedPath[i] = path[i];
                                                                }
                                                                break;
                                                            } else if (!!contextType || Array.isArray(contextValue)) {
                                                                break;
                                                            }
                                                            contextParent = context;
                                                        }
                                                        if (column === length) {
                                                            if ((key = path[column]) != null) {
                                                                optimizedPath[optimizedPath.length = column + offset] = key;
                                                                context = contextParent[key];
                                                                if (context != null) {
                                                                    if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                                        contextInvalidated = context != null && context[__INVALIDATED];
                                                                        if (contextInvalidated === true === false) {
                                                                            context.__invalidated = true;
                                                                            context[$EXPIRES] = 0;
                                                                            expired[++expiredLength] = context;
                                                                            if (context != null && typeof context === 'object') {
                                                                                head = root.__head;
                                                                                tail = root.__tail;
                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                context.__next = context.__prev = undefined;
                                                                                head = tail = next = prev = undefined;
                                                                            }
                                                                        }
                                                                        context = undefined;
                                                                    }
                                                                }
                                                                contextType = context != null && context[$TYPE];
                                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                            }
                                                            if (context != null) {
                                                                if ((refContainer = path[__CONTAINER] || path).__context === undefined) {
                                                                    backRefs = context.__refsLength || 0;
                                                                    context['__ref' + backRefs] = refContainer;
                                                                    context.__refsLength = backRefs + 1;
                                                                    refContainer.__refIndex = backRefs;
                                                                    refContainer.__context = context;
                                                                    refContainer = backRefs = undefined;
                                                                }
                                                            }
                                                        }
                                                        expandsCount = Number(contextType === 'error') - 1;
                                                        column = outermostColumn;
                                                        path = outermostPath;
                                                        offset = length - column;
                                                        length = outermostLength;
                                                        key = branchKeyTmp;
                                                        outermostColumn = undefined;
                                                        outermostPath = undefined;
                                                        outermostLength = undefined;
                                                        branchKeyTmp = undefined;
                                                    }
                                                } while ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue));
                                            }
                                            key = branchKeyTmp;
                                            if (!!(contextType === 'error') || context != null === false) {
                                                break resolvePath;
                                            }
                                            contexts[column] = contextParent = context;
                                            if (!!jsonCache && isKeySet === true) {
                                                do {
                                                    jsonKey = jsonKeys[jsonDepth];
                                                } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                                                if (jsonKey != null && jsonKey !== __NULL) {
                                                    json = jsons[jsonDepth - 1] || jsonCache;
                                                } else {
                                                    json = jsonCache;
                                                }
                                                if (jsonKey != null && jsonKey !== __NULL) {
                                                    json = json[jsonKey] || (json[jsonKey] = {});
                                                }
                                                jsons[jsonDepth] = json;
                                                jsonDepth += 1;
                                            }
                                        }
                                    }
                                    if (column === length) {
                                        key = path[column];
                                        messageParent = messages[column - 1];
                                        message = messages[column];
                                        isKeySet = messageParent[__IS_KEY_SET];
                                        key = isKeySet ? key[0] : key;
                                        requestedPath[requestedPath.length = column] = key;
                                        if (key != null && key !== __NULL) {
                                            !!jsonCache && isKeySet === true && (jsonKeys[jsonDepth] = key);
                                            optimizedPath[optimizedPath.length = column + offset] = key;
                                            context = contextParent[key];
                                            if (context != null) {
                                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                    contextInvalidated = context != null && context[__INVALIDATED];
                                                    if (contextInvalidated === true === false) {
                                                        context.__invalidated = true;
                                                        context[$EXPIRES] = 0;
                                                        expired[++expiredLength] = context;
                                                        if (context != null && typeof context === 'object') {
                                                            head = root.__head;
                                                            tail = root.__tail;
                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                            context === head && (root.__head = root.__next = head = next);
                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                            context.__next = context.__prev = undefined;
                                                            head = tail = next = prev = undefined;
                                                        }
                                                    }
                                                    context = undefined;
                                                }
                                            }
                                            contextType = context != null && context[$TYPE];
                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                        }
                                    }
                                    break resolvePath;
                                } while (true);
                            if (context != null) {
                                if (context != null && typeof context === 'object' && contextExpires !== 1) {
                                    head = root.__head;
                                    tail = root.__tail;
                                    next = context.__next, prev = context.__prev;
                                    if (context !== head) {
                                        next && (next != null && typeof next === 'object') && (next.__prev = prev);
                                        prev && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                        (next = head) && (head != null && typeof head === 'object') && (head.__prev = context);
                                        root.__head = root.__next = head = context;
                                        head.__next = next;
                                        head.__prev = undefined;
                                    }
                                    if (tail == null || context === tail) {
                                        root.__tail = root.__prev = tail = prev || context;
                                    }
                                    head = tail = next = prev = undefined;
                                }
                                if (contextType === 'error') {
                                    if (expandsCount > -1) {
                                        requestedPath[requestedPath.length] = null;
                                    }
                                    contextValue = context;
                                }
                            }
                            if (context == null || refreshing === true) {
                                src = optimizedPath;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                opt = dest;
                                src = optimizedBoundPath;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                req = dest;
                                reqLen = n;
                                i = -1;
                                n = requestedPath.length;
                                while (++i < n) {
                                    key = path[i];
                                    key2 = requestedPath[i];
                                    req[reqLen + i] = key && typeof key === 'object' && [key2] || key2;
                                }
                                if (column < length) {
                                    j = column + 1;
                                    k = length + 1;
                                    reqLen = req.length;
                                    optLen = opt.length;
                                    i = -1;
                                    n = k - j;
                                    while (++i < n) {
                                        req[reqLen + i] = opt[optLen + i] = path[j + i];
                                    }
                                }
                                req.pathSetIndex = index;
                                requestedMissingPaths[requestedMissingPaths.length] = req;
                                optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                            } else if (contextValue !== undefined || boxed === true) {
                                src = optimizedPath;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                opt = dest;
                                src = requestedPath;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                req = dest;
                                requestedPaths[requestedPaths.length] = req;
                                optimizedPaths[optimizedPaths.length] = opt;
                                if (!!jsonCache) {
                                    hasValues = true;
                                    if (contextType === 'error') {
                                        if (err === undefined) {
                                            if (boxed === true) {
                                                err = context;
                                            } else {
                                                dest = {};
                                                src = context;
                                                keys = Object.keys(src);
                                                i = -1;
                                                n = keys.length;
                                                while (++i < n) {
                                                    x = keys[i];
                                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                                                }
                                                err = dest;
                                            }
                                            val = !!includeErrors && err || undefined;
                                        }
                                        errors[errors.length] = {
                                            path: req,
                                            value: err
                                        };
                                        err = undefined;
                                    } else {
                                        if (boxed === true) {
                                            val = context;
                                        } else if (contextValue != null && typeof contextValue === 'object') {
                                            if (Array.isArray(contextValue)) {
                                                src = contextValue;
                                                dest = new Array(n = src.length);
                                                i = -1;
                                                while (++i < n) {
                                                    dest[i] = src[i];
                                                }
                                                val = dest;
                                            } else {
                                                dest = {};
                                                src = contextValue;
                                                keys = Object.keys(src);
                                                i = -1;
                                                n = keys.length;
                                                while (++i < n) {
                                                    x = keys[i];
                                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                                                }
                                                val = dest;
                                            }
                                        } else {
                                            val = contextValue;
                                        }
                                    }
                                    do {
                                        jsonKey = jsonKeys[jsonDepth];
                                    } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                                    if (jsonKey != null && jsonKey !== __NULL) {
                                        json = jsons[jsonDepth - 1] || jsonCache;
                                    } else {
                                        json = jsonCache;
                                    }
                                    if (jsonKey != null && jsonKey !== __NULL) {
                                        json[jsonKey] = val;
                                    } else {
                                        json = jsons[jsonDepth] = val;
                                    }
                                }
                            }
                            column = length;
                        }
                    }
                } else {
                    keys[__OFFSET] = 0;
                    length -= 1;
                    column -= 1;
                }
            }
            message = messages[length - 1];
        }
        if (!!jsonCache) {
            jsonDepth = -2;
            jsonLength = jsons.length;
            while (++jsonDepth < jsonLength) {
                if ((json = jsons[jsonDepth]) != null) {
                    break;
                }
            }
            if (hasValues) {
                values[index] = { json: json };
            } else {
                values[index] = undefined;
            }
        }
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function getJSONAsJSONG() {
    var returnBlocker;
    var generation, model, state, values, errorSelector, onNext, errors, boxed, includeErrors, refreshing, connected, root, contextCache, context, expired, expiredLength, boundPath, optimizedBoundPath, column, offset, jsonDepth, boundPathValue, contexts, requested, optimized, requestedPaths, optimizedPaths, requestedMissingPaths, optimizedMissingPaths, requestedPath, optimizedPath, pathMaps, messages, path, jsons, jsonKeys, contextParent, index, count, hasValues, jsonCache, json, refsByCols, length, message, pathSet, keys, key, isKeySet, isBranch, resetOptimizedDepth, reference, i, j, n, messageParent, contextExpires, contextInvalidated, head, tail, next, prev, contextType, contextValue, branchKeyTmp, jsonKey, val, src, dest, expandsCount, outermostColumn, outermostLength, outermostPath, err, x, refLen, refContainer, backRefs, opt, req, reqLen, key2, k, optLen;
    generation = __GENERATION_GENERATION++;
    model = arguments[0];
    state = arguments[1];
    values = arguments[2];
    errorSelector = arguments[3];
    if (typeof values === 'function') {
        onNext = values;
        values = undefined;
    }
    errors = state.errors || (state.errors = []);
    boxed = model._boxed;
    includeErrors = model._includeErrors;
    refreshing = model._refreshing;
    connected = model._connected;
    root = model._root;
    contextCache = context = model._cache;
    expired = root.expired;
    expiredLength = expired.length;
    boundPath = state.boundPath || model._path;
    optimizedBoundPath = [];
    column = state.column || (state.column = 0) - 1;
    offset = state.offset || (state.offset = 0);
    jsonDepth = state.jsonDepth || (state.jsonDepth = 0);
    boundPathValue = state.boundPathValue;
    contexts = state.contexts || (state.contexts = []);
    requested = state.requested || (state.requested = {});
    optimized = state.optimized || (state.optimized = {});
    requestedPaths = state.requestedPaths || (state.requestedPaths = []);
    optimizedPaths = state.optimizedPaths || (state.optimizedPaths = []);
    requestedMissingPaths = state.requestedMissingPaths || (state.requestedMissingPaths = []);
    optimizedMissingPaths = state.optimizedMissingPaths || (state.optimizedMissingPaths = []);
    requestedPath = state.requestedPath || (state.requestedPath = []);
    optimizedPath = state.optimizedPath || (state.optimizedPath = []);
    pathMaps = state;
    messages = state.messages || (state.messages = []);
    path = [];
    jsons = state.jsons || (state.jsons = []);
    jsonKeys = state.jsonKeys || (state.jsonKeys = []);
    includeErrors = true;
    optimizedBoundPath = boundPath;
    if (contextParent == null && (contextParent = model.__context) == null) {
        if (boundPath.length === 0) {
            contextParent = contextCache;
        } else {
            if (boundPathValue == null) {
                boundPathValue = getContextSync.call(model);
            }
            optimizedBoundPath = boundPathValue.path;
            if ((contextParent = boundPathValue.value) == null) {
                contextParent = {};
            }
            boundPathValue.requested = [];
            boundPathValue.optimized = [];
            state.boundPathValue = boundPathValue;
        }
    }
    contexts[-1] = context = contextParent;
    index = pathMaps.index || (pathMaps.index = 0);
    count = pathMaps.length;
    for (; index < count; ++index) {
        pathSet = pathMaps[index];
        hasValues = hasValues || false;
        jsonDepth = jsonKeys.length = 0;
        jsonCache = json = jsons[-1] = !!values && values[0] || undefined;
        offset = 0;
        refsByCols = state.refsByCols = [];
        refsByCols[-1] = optimizedBoundPath;
        path.length = 0;
        column = 0;
        length = 0;
        messages[-1] = message = pathSet;
        while (length > -1) {
            if (!!message) {
                keys = message[__KEYS] || (message[__KEYS] = Object.keys(message));
                keys[__OFFSET] || (keys[__OFFSET] = 0);
                if (keys.length === 0) {
                    length -= 1;
                    message = messages[length - 1];
                    keys = message[__KEYS];
                    keys[__OFFSET] -= 1;
                }
                if ((key = keys[++keys[__OFFSET] - 1]) !== undefined) {
                    key === __NULL && (key = null);
                    if (key == null || !(!(key[0] !== '_' || key[1] !== '_') || (key === __SELF || key === __PARENT || key === __ROOT) || key[0] === '$')) {
                        isKeySet = message[__IS_KEY_SET] = keys.length > 1;
                        path[length] = isKeySet && [key] || key;
                        message = messages[length] = message[key];
                        isBranch = !!message && typeof message === 'object' && !message[$TYPE] && !Array.isArray(message) && !(message[__KEYS] && message[__KEYS].length);
                        if (isBranch) {
                            length += 1;
                            continue;
                        } else {
                            resetOptimizedDepth = column;
                            while (--resetOptimizedDepth >= -1) {
                                if (!!(reference = refsByCols[resetOptimizedDepth])) {
                                    i = j = -1;
                                    n = reference.length;
                                    offset = n - ++resetOptimizedDepth;
                                    while (++i < n) {
                                        optimizedPath[++j] = reference[i];
                                    }
                                    while (resetOptimizedDepth < column) {
                                        optimizedPath[++j] = requestedPath[resetOptimizedDepth++];
                                    }
                                    optimizedPath.length = offset + resetOptimizedDepth;
                                    break;
                                }
                            }
                            contextParent = context = contexts[column - 1];
                            messageParent = message = messages[column - 1];
                            contextParent = contexts[column - 1];
                            resolvePath:
                                do {
                                    for (; column < length; ++column) {
                                        key = path[column];
                                        messageParent = messages[column - 1];
                                        message = messages[column];
                                        isKeySet = messageParent[__IS_KEY_SET];
                                        key = isKeySet ? key[0] : key;
                                        requestedPath[requestedPath.length = column] = key;
                                        if (key != null && key !== __NULL) {
                                            isKeySet = true;
                                            jsonKeys[jsonDepth = column] = key;
                                            optimizedPath[optimizedPath.length = column + offset] = key;
                                            context = contextParent[key];
                                            if (context != null) {
                                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                    contextInvalidated = context != null && context[__INVALIDATED];
                                                    if (contextInvalidated === true === false) {
                                                        context.__invalidated = true;
                                                        context[$EXPIRES] = 0;
                                                        expired[++expiredLength] = context;
                                                        if (context != null && typeof context === 'object') {
                                                            head = root.__head;
                                                            tail = root.__tail;
                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                            context === head && (root.__head = root.__next = head = next);
                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                            context.__next = context.__prev = undefined;
                                                            head = tail = next = prev = undefined;
                                                        }
                                                    }
                                                    context = undefined;
                                                }
                                            }
                                            contextType = context != null && context[$TYPE];
                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                            branchKeyTmp = key;
                                            if ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue)) {
                                                isKeySet = false;
                                                if ((jsonKey = key) != null && jsonKey !== __NULL) {
                                                    if (boxed === true) {
                                                        val = context;
                                                    } else {
                                                        src = contextValue;
                                                        dest = new Array(n = src.length);
                                                        i = -1;
                                                        while (++i < n) {
                                                            dest[i] = src[i];
                                                        }
                                                        val = dest;
                                                    }
                                                    do {
                                                        jsonKey = jsonKeys[jsonDepth];
                                                    } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                                                    if (jsonKey != null && jsonKey !== __NULL) {
                                                        json = jsons[jsonDepth - 1] || jsonCache;
                                                    } else {
                                                        json = jsonCache;
                                                    }
                                                    if (jsonKey != null && jsonKey !== __NULL) {
                                                        json[jsonKey] = val;
                                                    } else {
                                                        json = jsons[jsonDepth] = val;
                                                    }
                                                }
                                                expandsCount = -1;
                                                refsByCols[outermostColumn = column] = contextValue;
                                                do {
                                                    branchKeyTmp = key;
                                                    if (false) {
                                                    } else {
                                                        json = jsonCache;
                                                        refsByCols[outermostColumn = column] = contextValue;
                                                        outermostLength = length;
                                                        outermostPath = path;
                                                        offset = 0;
                                                        column = -1;
                                                        path = contextValue;
                                                        length = path.length - 1;
                                                        contextParent = contextCache;
                                                        while (++column < length) {
                                                            if ((key = path[column]) == null) {
                                                                continue;
                                                            }
                                                            optimizedPath[optimizedPath.length = column + offset] = key;
                                                            context = contextParent[key];
                                                            if (context != null) {
                                                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                                    contextInvalidated = context != null && context[__INVALIDATED];
                                                                    if (contextInvalidated === true === false) {
                                                                        context.__invalidated = true;
                                                                        context[$EXPIRES] = 0;
                                                                        expired[++expiredLength] = context;
                                                                        if (context != null && typeof context === 'object') {
                                                                            head = root.__head;
                                                                            tail = root.__tail;
                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                            context === head && (root.__head = root.__next = head = next);
                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                            context.__next = context.__prev = undefined;
                                                                            head = tail = next = prev = undefined;
                                                                        }
                                                                    }
                                                                    context = undefined;
                                                                }
                                                            }
                                                            contextType = context != null && context[$TYPE];
                                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                                            if (context != null && ((jsonKey = key) != null && jsonKey !== __NULL)) {
                                                                if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                    if (contextType === 'error') {
                                                                        if (boxed === true) {
                                                                            err = context;
                                                                        } else {
                                                                            dest = {};
                                                                            src = context;
                                                                            keys = Object.keys(src);
                                                                            i = -1;
                                                                            n = keys.length;
                                                                            while (++i < n) {
                                                                                x = keys[i];
                                                                                !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                                            }
                                                                            err = dest;
                                                                        }
                                                                        val = !!includeErrors && err || undefined;
                                                                    } else {
                                                                        if (boxed === true) {
                                                                            val = context;
                                                                        } else if (contextValue != null && typeof contextValue === 'object') {
                                                                            if (Array.isArray(contextValue)) {
                                                                                src = contextValue;
                                                                                dest = new Array(n = src.length);
                                                                                i = -1;
                                                                                while (++i < n) {
                                                                                    dest[i] = src[i];
                                                                                }
                                                                                val = dest;
                                                                            } else {
                                                                                dest = {};
                                                                                src = contextValue;
                                                                                keys = Object.keys(src);
                                                                                i = -1;
                                                                                n = keys.length;
                                                                                while (++i < n) {
                                                                                    x = keys[i];
                                                                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                                                }
                                                                                val = dest;
                                                                            }
                                                                        } else {
                                                                            val = contextValue;
                                                                        }
                                                                    }
                                                                    if (jsonKey != null && jsonKey !== __NULL) {
                                                                        json[jsonKey] = val;
                                                                    } else {
                                                                        json = jsons[jsonDepth] = val;
                                                                    }
                                                                } else {
                                                                    if (jsonKey != null && jsonKey !== __NULL) {
                                                                        json = json[jsonKey] || (json[jsonKey] = {});
                                                                    }
                                                                }
                                                            }
                                                            if (context === undefined) {
                                                                i = -1;
                                                                refLen = path.length;
                                                                offset = refLen - column - 1;
                                                                optimizedPath.length = refLen;
                                                                while (++i < refLen) {
                                                                    optimizedPath[i] = path[i];
                                                                }
                                                                break;
                                                            } else if (!!contextType || Array.isArray(contextValue)) {
                                                                break;
                                                            }
                                                            contextParent = context;
                                                        }
                                                        if (column === length) {
                                                            if ((key = path[column]) != null) {
                                                                optimizedPath[optimizedPath.length = column + offset] = key;
                                                                context = contextParent[key];
                                                                if (context != null) {
                                                                    if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                                        contextInvalidated = context != null && context[__INVALIDATED];
                                                                        if (contextInvalidated === true === false) {
                                                                            context.__invalidated = true;
                                                                            context[$EXPIRES] = 0;
                                                                            expired[++expiredLength] = context;
                                                                            if (context != null && typeof context === 'object') {
                                                                                head = root.__head;
                                                                                tail = root.__tail;
                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                context.__next = context.__prev = undefined;
                                                                                head = tail = next = prev = undefined;
                                                                            }
                                                                        }
                                                                        context = undefined;
                                                                    }
                                                                }
                                                                contextType = context != null && context[$TYPE];
                                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                                if (context != null && ((jsonKey = key) != null && jsonKey !== __NULL)) {
                                                                    if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                        if (contextType === 'error') {
                                                                            if (boxed === true) {
                                                                                err = context;
                                                                            } else {
                                                                                dest = {};
                                                                                src = context;
                                                                                keys = Object.keys(src);
                                                                                i = -1;
                                                                                n = keys.length;
                                                                                while (++i < n) {
                                                                                    x = keys[i];
                                                                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                                                }
                                                                                err = dest;
                                                                            }
                                                                            val = !!includeErrors && err || undefined;
                                                                        } else {
                                                                            if (boxed === true) {
                                                                                val = context;
                                                                            } else if (contextValue != null && typeof contextValue === 'object') {
                                                                                if (Array.isArray(contextValue)) {
                                                                                    src = contextValue;
                                                                                    dest = new Array(n = src.length);
                                                                                    i = -1;
                                                                                    while (++i < n) {
                                                                                        dest[i] = src[i];
                                                                                    }
                                                                                    val = dest;
                                                                                } else {
                                                                                    dest = {};
                                                                                    src = contextValue;
                                                                                    keys = Object.keys(src);
                                                                                    i = -1;
                                                                                    n = keys.length;
                                                                                    while (++i < n) {
                                                                                        x = keys[i];
                                                                                        !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                                                    }
                                                                                    val = dest;
                                                                                }
                                                                            } else {
                                                                                val = contextValue;
                                                                            }
                                                                        }
                                                                        if (jsonKey != null && jsonKey !== __NULL) {
                                                                            json[jsonKey] = val;
                                                                        } else {
                                                                            json = jsons[jsonDepth] = val;
                                                                        }
                                                                    } else {
                                                                        if (jsonKey != null && jsonKey !== __NULL) {
                                                                            json = json[jsonKey] || (json[jsonKey] = {});
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            if (context != null) {
                                                                if ((refContainer = path[__CONTAINER] || path).__context === undefined) {
                                                                    backRefs = context.__refsLength || 0;
                                                                    context['__ref' + backRefs] = refContainer;
                                                                    context.__refsLength = backRefs + 1;
                                                                    refContainer.__refIndex = backRefs;
                                                                    refContainer.__context = context;
                                                                    refContainer = backRefs = undefined;
                                                                }
                                                            }
                                                        }
                                                        expandsCount = Number(contextType === 'error') - 1;
                                                        column = outermostColumn;
                                                        path = outermostPath;
                                                        offset = length - column;
                                                        length = outermostLength;
                                                        key = branchKeyTmp;
                                                        outermostColumn = undefined;
                                                        outermostPath = undefined;
                                                        outermostLength = undefined;
                                                        branchKeyTmp = undefined;
                                                    }
                                                } while ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue));
                                            }
                                            key = branchKeyTmp;
                                            if (!!(contextType === 'error') || context != null === false) {
                                                break resolvePath;
                                            }
                                            contexts[column] = contextParent = context;
                                            if (isKeySet === true && ((jsonKey = key) != null && jsonKey !== __NULL)) {
                                                do {
                                                    jsonKey = jsonKeys[jsonDepth];
                                                } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                                                if (jsonKey != null && jsonKey !== __NULL) {
                                                    json = jsons[jsonDepth - 1] || jsonCache;
                                                } else {
                                                    json = jsonCache;
                                                }
                                                if (jsonKey != null && jsonKey !== __NULL) {
                                                    json = json[jsonKey] || (json[jsonKey] = {});
                                                }
                                            }
                                            jsons[jsonDepth] = json;
                                            jsonDepth += 1;
                                        }
                                    }
                                    if (column === length) {
                                        key = path[column];
                                        messageParent = messages[column - 1];
                                        message = messages[column];
                                        isKeySet = messageParent[__IS_KEY_SET];
                                        key = isKeySet ? key[0] : key;
                                        requestedPath[requestedPath.length = column] = key;
                                        if (key != null && key !== __NULL) {
                                            jsonDepth = column;
                                            isKeySet = true;
                                            !!jsonCache && isKeySet === true && (jsonKeys[jsonDepth] = key);
                                            optimizedPath[optimizedPath.length = column + offset] = key;
                                            context = contextParent[key];
                                            if (context != null) {
                                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                    contextInvalidated = context != null && context[__INVALIDATED];
                                                    if (contextInvalidated === true === false) {
                                                        context.__invalidated = true;
                                                        context[$EXPIRES] = 0;
                                                        expired[++expiredLength] = context;
                                                        if (context != null && typeof context === 'object') {
                                                            head = root.__head;
                                                            tail = root.__tail;
                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                            context === head && (root.__head = root.__next = head = next);
                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                            context.__next = context.__prev = undefined;
                                                            head = tail = next = prev = undefined;
                                                        }
                                                    }
                                                    context = undefined;
                                                }
                                            }
                                            contextType = context != null && context[$TYPE];
                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                        }
                                    }
                                    break resolvePath;
                                } while (true);
                            if (context != null) {
                                if (context != null && typeof context === 'object' && contextExpires !== 1) {
                                    head = root.__head;
                                    tail = root.__tail;
                                    next = context.__next, prev = context.__prev;
                                    if (context !== head) {
                                        next && (next != null && typeof next === 'object') && (next.__prev = prev);
                                        prev && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                        (next = head) && (head != null && typeof head === 'object') && (head.__prev = context);
                                        root.__head = root.__next = head = context;
                                        head.__next = next;
                                        head.__prev = undefined;
                                    }
                                    if (tail == null || context === tail) {
                                        root.__tail = root.__prev = tail = prev || context;
                                    }
                                    head = tail = next = prev = undefined;
                                }
                                if (contextType === 'error') {
                                    if (expandsCount > -1) {
                                        requestedPath[requestedPath.length] = null;
                                    }
                                    contextValue = context;
                                }
                            }
                            if (context == null || refreshing === true) {
                                src = optimizedPath;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                opt = dest;
                                src = optimizedBoundPath;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                req = dest;
                                reqLen = n;
                                i = -1;
                                n = requestedPath.length;
                                while (++i < n) {
                                    key = path[i];
                                    key2 = requestedPath[i];
                                    req[reqLen + i] = key && typeof key === 'object' && [key2] || key2;
                                }
                                if (column < length) {
                                    j = column + 1;
                                    k = length + 1;
                                    reqLen = req.length;
                                    optLen = opt.length;
                                    i = -1;
                                    n = k - j;
                                    while (++i < n) {
                                        req[reqLen + i] = opt[optLen + i] = path[j + i];
                                    }
                                }
                                req.pathSetIndex = index;
                                requestedMissingPaths[requestedMissingPaths.length] = req;
                                optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                            } else if (contextValue !== undefined || boxed === true) {
                                src = optimizedPath;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                opt = dest;
                                src = requestedPath;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                req = dest;
                                requestedPaths[requestedPaths.length] = req;
                                optimizedPaths[optimizedPaths.length] = opt;
                                hasValues = true;
                                if (err) {
                                    errors[errors.length] = {
                                        path: req,
                                        value: err
                                    };
                                    err = undefined;
                                } else if ((jsonKey = key) != null && jsonKey !== __NULL) {
                                    if (contextType === 'error') {
                                        if (err === undefined) {
                                            if (boxed === true) {
                                                err = context;
                                            } else {
                                                dest = {};
                                                src = context;
                                                keys = Object.keys(src);
                                                i = -1;
                                                n = keys.length;
                                                while (++i < n) {
                                                    x = keys[i];
                                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                }
                                                err = dest;
                                            }
                                            val = !!includeErrors && err || undefined;
                                        }
                                        errors[errors.length] = {
                                            path: req,
                                            value: err
                                        };
                                        err = undefined;
                                    } else {
                                        if (boxed === true) {
                                            val = context;
                                        } else if (contextValue != null && typeof contextValue === 'object') {
                                            if (Array.isArray(contextValue)) {
                                                src = contextValue;
                                                dest = new Array(n = src.length);
                                                i = -1;
                                                while (++i < n) {
                                                    dest[i] = src[i];
                                                }
                                                val = dest;
                                            } else {
                                                dest = {};
                                                src = contextValue;
                                                keys = Object.keys(src);
                                                i = -1;
                                                n = keys.length;
                                                while (++i < n) {
                                                    x = keys[i];
                                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                }
                                                val = dest;
                                            }
                                        } else {
                                            val = contextValue;
                                        }
                                    }
                                    do {
                                        jsonKey = jsonKeys[jsonDepth];
                                    } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                                    if (jsonKey != null && jsonKey !== __NULL) {
                                        json = jsons[jsonDepth - 1] || jsonCache;
                                    } else {
                                        json = jsonCache;
                                    }
                                    if (jsonKey != null && jsonKey !== __NULL) {
                                        json[jsonKey] = val;
                                    } else {
                                        json = jsons[jsonDepth] = val;
                                    }
                                }
                            }
                            column = length;
                        }
                    }
                } else {
                    keys[__OFFSET] = 0;
                    length -= 1;
                    column -= 1;
                }
            }
            message = messages[length - 1];
        }
    }
    json = jsons[-1];
    if (!!values) {
        values[0] = hasValues && {
            'paths': requestedPaths,
            'jsong': json
        } || undefined;
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function getJSONAsPathMap() {
    var returnBlocker;
    var generation, model, state, values, errorSelector, onNext, errors, boxed, includeErrors, refreshing, connected, root, contextCache, context, expired, expiredLength, boundPath, optimizedBoundPath, column, offset, jsonDepth, boundPathValue, contexts, requested, optimized, requestedPaths, optimizedPaths, requestedMissingPaths, optimizedMissingPaths, requestedPath, optimizedPath, pathMaps, messages, path, jsons, jsonKeys, contextParent, index, count, hasValues, jsonCache, json, refsByCols, length, message, pathSet, keys, key, isKeySet, isBranch, resetOptimizedDepth, reference, i, j, n, messageParent, contextExpires, contextInvalidated, head, tail, next, prev, contextType, contextValue, branchKeyTmp, expandsCount, outermostColumn, refLen, outermostLength, outermostPath, refContainer, backRefs, jsonKey, src, dest, opt, req, reqLen, key2, k, optLen, err, x, val;
    generation = __GENERATION_GENERATION++;
    model = arguments[0];
    state = arguments[1];
    values = arguments[2];
    errorSelector = arguments[3];
    if (typeof values === 'function') {
        onNext = values;
        values = undefined;
    }
    errors = state.errors || (state.errors = []);
    boxed = model._boxed;
    includeErrors = model._includeErrors;
    refreshing = model._refreshing;
    connected = model._connected;
    root = model._root;
    contextCache = context = model._cache;
    expired = root.expired;
    expiredLength = expired.length;
    boundPath = state.boundPath || model._path;
    optimizedBoundPath = [];
    column = state.column || (state.column = 0) - 1;
    offset = state.offset || (state.offset = 0);
    jsonDepth = state.jsonDepth || (state.jsonDepth = 0);
    boundPathValue = state.boundPathValue;
    contexts = state.contexts || (state.contexts = []);
    requested = state.requested || (state.requested = {});
    optimized = state.optimized || (state.optimized = {});
    requestedPaths = state.requestedPaths || (state.requestedPaths = []);
    optimizedPaths = state.optimizedPaths || (state.optimizedPaths = []);
    requestedMissingPaths = state.requestedMissingPaths || (state.requestedMissingPaths = []);
    optimizedMissingPaths = state.optimizedMissingPaths || (state.optimizedMissingPaths = []);
    requestedPath = state.requestedPath || (state.requestedPath = []);
    optimizedPath = state.optimizedPath || (state.optimizedPath = []);
    pathMaps = state;
    messages = state.messages || (state.messages = []);
    path = [];
    jsons = state.jsons || (state.jsons = []);
    jsonKeys = state.jsonKeys || (state.jsonKeys = []);
    optimizedBoundPath = boundPath;
    if (contextParent == null && (contextParent = model.__context) == null) {
        if (boundPath.length === 0) {
            contextParent = contextCache;
        } else {
            if (boundPathValue == null) {
                boundPathValue = getContextSync.call(model);
            }
            optimizedBoundPath = boundPathValue.path;
            if ((contextParent = boundPathValue.value) == null) {
                contextParent = {};
            }
            boundPathValue.requested = [];
            boundPathValue.optimized = [];
            state.boundPathValue = boundPathValue;
        }
    }
    contexts[-1] = context = contextParent;
    index = pathMaps.index || (pathMaps.index = 0);
    count = pathMaps.length;
    for (; index < count; ++index) {
        pathSet = pathMaps[index];
        hasValues = hasValues || false;
        jsonDepth = jsonKeys.length = 0;
        jsonCache = json = jsons[-1] = !!values && values[0] || undefined;
        offset = 0;
        refsByCols = state.refsByCols = [];
        refsByCols[-1] = optimizedBoundPath;
        path.length = 0;
        column = 0;
        length = 0;
        messages[-1] = message = pathSet;
        while (length > -1) {
            if (!!message) {
                keys = message[__KEYS] || (message[__KEYS] = Object.keys(message));
                keys[__OFFSET] || (keys[__OFFSET] = 0);
                if (keys.length === 0) {
                    length -= 1;
                    message = messages[length - 1];
                    keys = message[__KEYS];
                    keys[__OFFSET] -= 1;
                }
                if ((key = keys[++keys[__OFFSET] - 1]) !== undefined) {
                    key === __NULL && (key = null);
                    if (key == null || !(!(key[0] !== '_' || key[1] !== '_') || (key === __SELF || key === __PARENT || key === __ROOT) || key[0] === '$')) {
                        isKeySet = message[__IS_KEY_SET] = keys.length > 1;
                        path[length] = isKeySet && [key] || key;
                        message = messages[length] = message[key];
                        isBranch = !!message && typeof message === 'object' && !message[$TYPE] && !Array.isArray(message) && !(message[__KEYS] && message[__KEYS].length);
                        if (isBranch) {
                            length += 1;
                            continue;
                        } else {
                            resetOptimizedDepth = column;
                            while (--resetOptimizedDepth >= -1) {
                                if (!!(reference = refsByCols[resetOptimizedDepth])) {
                                    i = j = -1;
                                    n = reference.length;
                                    offset = n - ++resetOptimizedDepth;
                                    while (++i < n) {
                                        optimizedPath[++j] = reference[i];
                                    }
                                    while (resetOptimizedDepth < column) {
                                        optimizedPath[++j] = requestedPath[resetOptimizedDepth++];
                                    }
                                    optimizedPath.length = offset + resetOptimizedDepth;
                                    break;
                                }
                            }
                            contextParent = context = contexts[column - 1];
                            messageParent = message = messages[column - 1];
                            contextParent = contexts[column - 1];
                            resolvePath:
                                do {
                                    for (; column < length; ++column) {
                                        key = path[column];
                                        messageParent = messages[column - 1];
                                        message = messages[column];
                                        isKeySet = messageParent[__IS_KEY_SET];
                                        key = isKeySet ? key[0] : key;
                                        requestedPath[requestedPath.length = column] = key;
                                        if (key != null && key !== __NULL) {
                                            jsonDepth = column;
                                            isKeySet = true;
                                            !!jsonCache && isKeySet === true && (jsonKeys[jsonDepth] = key);
                                            optimizedPath[optimizedPath.length = column + offset] = key;
                                            context = contextParent[key];
                                            if (context != null) {
                                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                    contextInvalidated = context != null && context[__INVALIDATED];
                                                    if (contextInvalidated === true === false) {
                                                        context.__invalidated = true;
                                                        context[$EXPIRES] = 0;
                                                        expired[++expiredLength] = context;
                                                        if (context != null && typeof context === 'object') {
                                                            head = root.__head;
                                                            tail = root.__tail;
                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                            context === head && (root.__head = root.__next = head = next);
                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                            context.__next = context.__prev = undefined;
                                                            head = tail = next = prev = undefined;
                                                        }
                                                    }
                                                    context = undefined;
                                                }
                                            }
                                            contextType = context != null && context[$TYPE];
                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                            branchKeyTmp = key;
                                            if ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue)) {
                                                expandsCount = -1;
                                                refsByCols[outermostColumn = column] = contextValue;
                                                do {
                                                    branchKeyTmp = key;
                                                    if ((context = context.__context) !== undefined) {
                                                        i = -1;
                                                        refLen = contextValue.length;
                                                        offset = refLen - column - 1;
                                                        optimizedPath.length = refLen;
                                                        while (++i < refLen) {
                                                            optimizedPath[i] = contextValue[i];
                                                        }
                                                        if (context != null) {
                                                            if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                                contextInvalidated = context != null && context[__INVALIDATED];
                                                                if (contextInvalidated === true === false) {
                                                                    context.__invalidated = true;
                                                                    context[$EXPIRES] = 0;
                                                                    expired[++expiredLength] = context;
                                                                    if (context != null && typeof context === 'object') {
                                                                        head = root.__head;
                                                                        tail = root.__tail;
                                                                        (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                        (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                        context === head && (root.__head = root.__next = head = next);
                                                                        context === tail && (root.__tail = root.__prev = tail = prev);
                                                                        context.__next = context.__prev = undefined;
                                                                        head = tail = next = prev = undefined;
                                                                    }
                                                                }
                                                                context = undefined;
                                                            }
                                                        }
                                                        contextType = context != null && context[$TYPE];
                                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                                        if (contextType === 'error') {
                                                            expandsCount = 0;
                                                            break resolvePath;
                                                        } else if (context != null === false) {
                                                            expandsCount = -1;
                                                            break resolvePath;
                                                        }
                                                        contextParent = context;
                                                    } else {
                                                        refsByCols[outermostColumn = column] = contextValue;
                                                        outermostLength = length;
                                                        outermostPath = path;
                                                        offset = 0;
                                                        column = -1;
                                                        path = contextValue;
                                                        length = path.length - 1;
                                                        contextParent = contextCache;
                                                        while (++column < length) {
                                                            if ((key = path[column]) == null) {
                                                                continue;
                                                            }
                                                            optimizedPath[optimizedPath.length = column + offset] = key;
                                                            context = contextParent[key];
                                                            if (context != null) {
                                                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                                    contextInvalidated = context != null && context[__INVALIDATED];
                                                                    if (contextInvalidated === true === false) {
                                                                        context.__invalidated = true;
                                                                        context[$EXPIRES] = 0;
                                                                        expired[++expiredLength] = context;
                                                                        if (context != null && typeof context === 'object') {
                                                                            head = root.__head;
                                                                            tail = root.__tail;
                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                            context === head && (root.__head = root.__next = head = next);
                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                            context.__next = context.__prev = undefined;
                                                                            head = tail = next = prev = undefined;
                                                                        }
                                                                    }
                                                                    context = undefined;
                                                                }
                                                            }
                                                            contextType = context != null && context[$TYPE];
                                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                                            if (context === undefined) {
                                                                i = -1;
                                                                refLen = path.length;
                                                                offset = refLen - column - 1;
                                                                optimizedPath.length = refLen;
                                                                while (++i < refLen) {
                                                                    optimizedPath[i] = path[i];
                                                                }
                                                                break;
                                                            } else if (!!contextType || Array.isArray(contextValue)) {
                                                                break;
                                                            }
                                                            contextParent = context;
                                                        }
                                                        if (column === length) {
                                                            if ((key = path[column]) != null) {
                                                                optimizedPath[optimizedPath.length = column + offset] = key;
                                                                context = contextParent[key];
                                                                if (context != null) {
                                                                    if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                                        contextInvalidated = context != null && context[__INVALIDATED];
                                                                        if (contextInvalidated === true === false) {
                                                                            context.__invalidated = true;
                                                                            context[$EXPIRES] = 0;
                                                                            expired[++expiredLength] = context;
                                                                            if (context != null && typeof context === 'object') {
                                                                                head = root.__head;
                                                                                tail = root.__tail;
                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                context.__next = context.__prev = undefined;
                                                                                head = tail = next = prev = undefined;
                                                                            }
                                                                        }
                                                                        context = undefined;
                                                                    }
                                                                }
                                                                contextType = context != null && context[$TYPE];
                                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                            }
                                                            if (context != null) {
                                                                if ((refContainer = path[__CONTAINER] || path).__context === undefined) {
                                                                    backRefs = context.__refsLength || 0;
                                                                    context['__ref' + backRefs] = refContainer;
                                                                    context.__refsLength = backRefs + 1;
                                                                    refContainer.__refIndex = backRefs;
                                                                    refContainer.__context = context;
                                                                    refContainer = backRefs = undefined;
                                                                }
                                                            }
                                                        }
                                                        expandsCount = Number(contextType === 'error') - 1;
                                                        column = outermostColumn;
                                                        path = outermostPath;
                                                        offset = length - column;
                                                        length = outermostLength;
                                                        key = branchKeyTmp;
                                                        outermostColumn = undefined;
                                                        outermostPath = undefined;
                                                        outermostLength = undefined;
                                                        branchKeyTmp = undefined;
                                                    }
                                                } while ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue));
                                            }
                                            key = branchKeyTmp;
                                            if (!!(contextType === 'error') || context != null === false) {
                                                break resolvePath;
                                            }
                                            contexts[column] = contextParent = context;
                                            if (!!jsonCache && isKeySet === true) {
                                                do {
                                                    jsonKey = jsonKeys[jsonDepth];
                                                } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                                                if (jsonKey != null && jsonKey !== __NULL) {
                                                    json = jsons[jsonDepth - 1] || jsonCache;
                                                } else {
                                                    json = jsonCache;
                                                }
                                                if (jsonKey != null && jsonKey !== __NULL) {
                                                    json = json[jsonKey] || (json[jsonKey] = {});
                                                    json[__KEY] = jsonKey;
                                                    json[__GENERATION] = context[__GENERATION] || 0;
                                                }
                                                jsons[jsonDepth] = json;
                                                jsonDepth += 1;
                                            }
                                        }
                                    }
                                    if (column === length) {
                                        key = path[column];
                                        messageParent = messages[column - 1];
                                        message = messages[column];
                                        isKeySet = messageParent[__IS_KEY_SET];
                                        key = isKeySet ? key[0] : key;
                                        requestedPath[requestedPath.length = column] = key;
                                        if (key != null && key !== __NULL) {
                                            jsonDepth = column;
                                            isKeySet = true;
                                            !!jsonCache && isKeySet === true && (jsonKeys[jsonDepth] = key);
                                            optimizedPath[optimizedPath.length = column + offset] = key;
                                            context = contextParent[key];
                                            if (context != null) {
                                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                    contextInvalidated = context != null && context[__INVALIDATED];
                                                    if (contextInvalidated === true === false) {
                                                        context.__invalidated = true;
                                                        context[$EXPIRES] = 0;
                                                        expired[++expiredLength] = context;
                                                        if (context != null && typeof context === 'object') {
                                                            head = root.__head;
                                                            tail = root.__tail;
                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                            context === head && (root.__head = root.__next = head = next);
                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                            context.__next = context.__prev = undefined;
                                                            head = tail = next = prev = undefined;
                                                        }
                                                    }
                                                    context = undefined;
                                                }
                                            }
                                            contextType = context != null && context[$TYPE];
                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                        }
                                    }
                                    break resolvePath;
                                } while (true);
                            if (context != null) {
                                if (context != null && typeof context === 'object' && contextExpires !== 1) {
                                    head = root.__head;
                                    tail = root.__tail;
                                    next = context.__next, prev = context.__prev;
                                    if (context !== head) {
                                        next && (next != null && typeof next === 'object') && (next.__prev = prev);
                                        prev && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                        (next = head) && (head != null && typeof head === 'object') && (head.__prev = context);
                                        root.__head = root.__next = head = context;
                                        head.__next = next;
                                        head.__prev = undefined;
                                    }
                                    if (tail == null || context === tail) {
                                        root.__tail = root.__prev = tail = prev || context;
                                    }
                                    head = tail = next = prev = undefined;
                                }
                                if (contextType === 'error') {
                                    if (expandsCount > -1) {
                                        requestedPath[requestedPath.length] = null;
                                    }
                                    contextValue = context;
                                }
                            }
                            if (context == null || refreshing === true) {
                                src = optimizedPath;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                opt = dest;
                                src = optimizedBoundPath;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                req = dest;
                                reqLen = n;
                                i = -1;
                                n = requestedPath.length;
                                while (++i < n) {
                                    key = path[i];
                                    key2 = requestedPath[i];
                                    req[reqLen + i] = key && typeof key === 'object' && [key2] || key2;
                                }
                                if (column < length) {
                                    j = column + 1;
                                    k = length + 1;
                                    reqLen = req.length;
                                    optLen = opt.length;
                                    i = -1;
                                    n = k - j;
                                    while (++i < n) {
                                        req[reqLen + i] = opt[optLen + i] = path[j + i];
                                    }
                                }
                                req.pathSetIndex = index;
                                requestedMissingPaths[requestedMissingPaths.length] = req;
                                optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                            } else if (contextValue !== undefined || boxed === true) {
                                src = optimizedPath;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                opt = dest;
                                src = requestedPath;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                req = dest;
                                requestedPaths[requestedPaths.length] = req;
                                optimizedPaths[optimizedPaths.length] = opt;
                                if (!!jsonCache) {
                                    hasValues = true;
                                    if (contextType === 'error') {
                                        if (err === undefined) {
                                            if (boxed === true) {
                                                err = context;
                                            } else {
                                                dest = {};
                                                src = context;
                                                keys = Object.keys(src);
                                                i = -1;
                                                n = keys.length;
                                                while (++i < n) {
                                                    x = keys[i];
                                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                                                }
                                                err = dest;
                                            }
                                            val = !!includeErrors && err || undefined;
                                        }
                                        errors[errors.length] = {
                                            path: req,
                                            value: err
                                        };
                                        err = undefined;
                                    } else {
                                        if (boxed === true) {
                                            val = context;
                                        } else if (contextValue != null && typeof contextValue === 'object') {
                                            if (Array.isArray(contextValue)) {
                                                src = contextValue;
                                                dest = new Array(n = src.length);
                                                i = -1;
                                                while (++i < n) {
                                                    dest[i] = src[i];
                                                }
                                                val = dest;
                                            } else {
                                                dest = {};
                                                src = contextValue;
                                                keys = Object.keys(src);
                                                i = -1;
                                                n = keys.length;
                                                while (++i < n) {
                                                    x = keys[i];
                                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                                                }
                                                val = dest;
                                            }
                                        } else {
                                            val = contextValue;
                                        }
                                    }
                                    do {
                                        jsonKey = jsonKeys[jsonDepth];
                                    } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                                    if (jsonKey != null && jsonKey !== __NULL) {
                                        json = jsons[jsonDepth - 1] || jsonCache;
                                    } else {
                                        json = jsonCache;
                                    }
                                    if (jsonKey != null && jsonKey !== __NULL) {
                                        json[jsonKey] = val;
                                    } else {
                                        json = jsons[jsonDepth] = val;
                                    }
                                    if (!boxed && !!val && typeof val === 'object' && !Array.isArray(val)) {
                                        val[$TYPE] = 'leaf';
                                    }
                                }
                            }
                            column = length;
                        }
                    }
                } else {
                    keys[__OFFSET] = 0;
                    length -= 1;
                    column -= 1;
                }
            }
            message = messages[length - 1];
        }
    }
    json = jsons[-1];
    if (!!values) {
        values[0] = hasValues && { json: json } || undefined;
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function getJSONAsValues() {
    var returnBlocker;
    var generation, model, state, values, errorSelector, onNext, errors, boxed, includeErrors, refreshing, connected, root, contextCache, context, expired, expiredLength, boundPath, optimizedBoundPath, column, offset, jsonDepth, boundPathValue, contexts, requested, optimized, requestedPaths, optimizedPaths, requestedMissingPaths, optimizedMissingPaths, requestedPath, optimizedPath, pathMaps, messages, path, pbv, contextParent, index, count, refsByCols, length, message, pathSet, keys, key, isKeySet, isBranch, resetOptimizedDepth, reference, i, j, n, messageParent, contextExpires, contextInvalidated, head, tail, next, prev, contextType, contextValue, branchKeyTmp, expandsCount, outermostColumn, refLen, outermostLength, outermostPath, refContainer, backRefs, src, dest, opt, req, reqLen, key2, k, optLen, err, x, val;
    generation = __GENERATION_GENERATION++;
    model = arguments[0];
    state = arguments[1];
    values = arguments[2];
    errorSelector = arguments[3];
    if (typeof values === 'function') {
        onNext = values;
        values = undefined;
    }
    errors = state.errors || (state.errors = []);
    boxed = model._boxed;
    includeErrors = model._includeErrors;
    refreshing = model._refreshing;
    connected = model._connected;
    root = model._root;
    contextCache = context = model._cache;
    expired = root.expired;
    expiredLength = expired.length;
    boundPath = state.boundPath || model._path;
    optimizedBoundPath = [];
    column = state.column || (state.column = 0) - 1;
    offset = state.offset || (state.offset = 0);
    jsonDepth = state.jsonDepth || (state.jsonDepth = 0);
    boundPathValue = state.boundPathValue;
    contexts = state.contexts || (state.contexts = []);
    requested = state.requested || (state.requested = {});
    optimized = state.optimized || (state.optimized = {});
    requestedPaths = state.requestedPaths || (state.requestedPaths = []);
    optimizedPaths = state.optimizedPaths || (state.optimizedPaths = []);
    requestedMissingPaths = state.requestedMissingPaths || (state.requestedMissingPaths = []);
    optimizedMissingPaths = state.optimizedMissingPaths || (state.optimizedMissingPaths = []);
    requestedPath = state.requestedPath || (state.requestedPath = []);
    optimizedPath = state.optimizedPath || (state.optimizedPath = []);
    pathMaps = state;
    messages = state.messages || (state.messages = []);
    path = [];
    pbv = state.pbv || (state.pbv = {});
    pbv.path = requestedPath;
    !!values && (values.length = 0);
    optimizedBoundPath = boundPath;
    if (contextParent == null && (contextParent = model.__context) == null) {
        if (boundPath.length === 0) {
            contextParent = contextCache;
        } else {
            if (boundPathValue == null) {
                boundPathValue = getContextSync.call(model);
            }
            optimizedBoundPath = boundPathValue.path;
            if ((contextParent = boundPathValue.value) == null) {
                contextParent = {};
            }
            boundPathValue.requested = [];
            boundPathValue.optimized = [];
            state.boundPathValue = boundPathValue;
        }
    }
    contexts[-1] = context = contextParent;
    index = pathMaps.index || (pathMaps.index = 0);
    count = pathMaps.length;
    for (; index < count; ++index) {
        pathSet = pathMaps[index];
        offset = 0;
        refsByCols = state.refsByCols = [];
        refsByCols[-1] = optimizedBoundPath;
        path.length = 0;
        column = 0;
        length = 0;
        messages[-1] = message = pathSet;
        while (length > -1) {
            if (!!message) {
                keys = message[__KEYS] || (message[__KEYS] = Object.keys(message));
                keys[__OFFSET] || (keys[__OFFSET] = 0);
                if (keys.length === 0) {
                    length -= 1;
                    message = messages[length - 1];
                    keys = message[__KEYS];
                    keys[__OFFSET] -= 1;
                }
                if ((key = keys[++keys[__OFFSET] - 1]) !== undefined) {
                    key === __NULL && (key = null);
                    if (key == null || !(!(key[0] !== '_' || key[1] !== '_') || (key === __SELF || key === __PARENT || key === __ROOT) || key[0] === '$')) {
                        isKeySet = message[__IS_KEY_SET] = keys.length > 1;
                        path[length] = isKeySet && [key] || key;
                        message = messages[length] = message[key];
                        isBranch = !!message && typeof message === 'object' && !message[$TYPE] && !Array.isArray(message) && !(message[__KEYS] && message[__KEYS].length);
                        if (isBranch) {
                            length += 1;
                            continue;
                        } else {
                            resetOptimizedDepth = column;
                            while (--resetOptimizedDepth >= -1) {
                                if (!!(reference = refsByCols[resetOptimizedDepth])) {
                                    i = j = -1;
                                    n = reference.length;
                                    offset = n - ++resetOptimizedDepth;
                                    while (++i < n) {
                                        optimizedPath[++j] = reference[i];
                                    }
                                    while (resetOptimizedDepth < column) {
                                        optimizedPath[++j] = requestedPath[resetOptimizedDepth++];
                                    }
                                    optimizedPath.length = offset + resetOptimizedDepth;
                                    break;
                                }
                            }
                            contextParent = context = contexts[column - 1];
                            messageParent = message = messages[column - 1];
                            contextParent = contexts[column - 1];
                            resolvePath:
                                do {
                                    for (; column < length; ++column) {
                                        key = path[column];
                                        messageParent = messages[column - 1];
                                        message = messages[column];
                                        isKeySet = messageParent[__IS_KEY_SET];
                                        key = isKeySet ? key[0] : key;
                                        requestedPath[requestedPath.length = column] = key;
                                        if (key != null && key !== __NULL) {
                                            optimizedPath[optimizedPath.length = column + offset] = key;
                                            context = contextParent[key];
                                            if (context != null) {
                                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                    contextInvalidated = context != null && context[__INVALIDATED];
                                                    if (contextInvalidated === true === false) {
                                                        context.__invalidated = true;
                                                        context[$EXPIRES] = 0;
                                                        expired[++expiredLength] = context;
                                                        if (context != null && typeof context === 'object') {
                                                            head = root.__head;
                                                            tail = root.__tail;
                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                            context === head && (root.__head = root.__next = head = next);
                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                            context.__next = context.__prev = undefined;
                                                            head = tail = next = prev = undefined;
                                                        }
                                                    }
                                                    context = undefined;
                                                }
                                            }
                                            contextType = context != null && context[$TYPE];
                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                            branchKeyTmp = key;
                                            if ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue)) {
                                                expandsCount = -1;
                                                refsByCols[outermostColumn = column] = contextValue;
                                                do {
                                                    branchKeyTmp = key;
                                                    if ((context = context.__context) !== undefined) {
                                                        i = -1;
                                                        refLen = contextValue.length;
                                                        offset = refLen - column - 1;
                                                        optimizedPath.length = refLen;
                                                        while (++i < refLen) {
                                                            optimizedPath[i] = contextValue[i];
                                                        }
                                                        if (context != null) {
                                                            if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                                contextInvalidated = context != null && context[__INVALIDATED];
                                                                if (contextInvalidated === true === false) {
                                                                    context.__invalidated = true;
                                                                    context[$EXPIRES] = 0;
                                                                    expired[++expiredLength] = context;
                                                                    if (context != null && typeof context === 'object') {
                                                                        head = root.__head;
                                                                        tail = root.__tail;
                                                                        (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                        (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                        context === head && (root.__head = root.__next = head = next);
                                                                        context === tail && (root.__tail = root.__prev = tail = prev);
                                                                        context.__next = context.__prev = undefined;
                                                                        head = tail = next = prev = undefined;
                                                                    }
                                                                }
                                                                context = undefined;
                                                            }
                                                        }
                                                        contextType = context != null && context[$TYPE];
                                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                                        if (contextType === 'error') {
                                                            expandsCount = 0;
                                                            break resolvePath;
                                                        } else if (context != null === false) {
                                                            expandsCount = -1;
                                                            break resolvePath;
                                                        }
                                                        contextParent = context;
                                                    } else {
                                                        refsByCols[outermostColumn = column] = contextValue;
                                                        outermostLength = length;
                                                        outermostPath = path;
                                                        offset = 0;
                                                        column = -1;
                                                        path = contextValue;
                                                        length = path.length - 1;
                                                        contextParent = contextCache;
                                                        while (++column < length) {
                                                            if ((key = path[column]) == null) {
                                                                continue;
                                                            }
                                                            optimizedPath[optimizedPath.length = column + offset] = key;
                                                            context = contextParent[key];
                                                            if (context != null) {
                                                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                                    contextInvalidated = context != null && context[__INVALIDATED];
                                                                    if (contextInvalidated === true === false) {
                                                                        context.__invalidated = true;
                                                                        context[$EXPIRES] = 0;
                                                                        expired[++expiredLength] = context;
                                                                        if (context != null && typeof context === 'object') {
                                                                            head = root.__head;
                                                                            tail = root.__tail;
                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                            context === head && (root.__head = root.__next = head = next);
                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                            context.__next = context.__prev = undefined;
                                                                            head = tail = next = prev = undefined;
                                                                        }
                                                                    }
                                                                    context = undefined;
                                                                }
                                                            }
                                                            contextType = context != null && context[$TYPE];
                                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                                            if (context === undefined) {
                                                                i = -1;
                                                                refLen = path.length;
                                                                offset = refLen - column - 1;
                                                                optimizedPath.length = refLen;
                                                                while (++i < refLen) {
                                                                    optimizedPath[i] = path[i];
                                                                }
                                                                break;
                                                            } else if (!!contextType || Array.isArray(contextValue)) {
                                                                break;
                                                            }
                                                            contextParent = context;
                                                        }
                                                        if (column === length) {
                                                            if ((key = path[column]) != null) {
                                                                optimizedPath[optimizedPath.length = column + offset] = key;
                                                                context = contextParent[key];
                                                                if (context != null) {
                                                                    if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                                        contextInvalidated = context != null && context[__INVALIDATED];
                                                                        if (contextInvalidated === true === false) {
                                                                            context.__invalidated = true;
                                                                            context[$EXPIRES] = 0;
                                                                            expired[++expiredLength] = context;
                                                                            if (context != null && typeof context === 'object') {
                                                                                head = root.__head;
                                                                                tail = root.__tail;
                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                context.__next = context.__prev = undefined;
                                                                                head = tail = next = prev = undefined;
                                                                            }
                                                                        }
                                                                        context = undefined;
                                                                    }
                                                                }
                                                                contextType = context != null && context[$TYPE];
                                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                            }
                                                            if (context != null) {
                                                                if ((refContainer = path[__CONTAINER] || path).__context === undefined) {
                                                                    backRefs = context.__refsLength || 0;
                                                                    context['__ref' + backRefs] = refContainer;
                                                                    context.__refsLength = backRefs + 1;
                                                                    refContainer.__refIndex = backRefs;
                                                                    refContainer.__context = context;
                                                                    refContainer = backRefs = undefined;
                                                                }
                                                            }
                                                        }
                                                        expandsCount = Number(contextType === 'error') - 1;
                                                        column = outermostColumn;
                                                        path = outermostPath;
                                                        offset = length - column;
                                                        length = outermostLength;
                                                        key = branchKeyTmp;
                                                        outermostColumn = undefined;
                                                        outermostPath = undefined;
                                                        outermostLength = undefined;
                                                        branchKeyTmp = undefined;
                                                    }
                                                } while ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue));
                                            }
                                            key = branchKeyTmp;
                                            if (!!(contextType === 'error') || context != null === false) {
                                                break resolvePath;
                                            }
                                            contexts[column] = contextParent = context;
                                        }
                                    }
                                    if (column === length) {
                                        key = path[column];
                                        messageParent = messages[column - 1];
                                        message = messages[column];
                                        isKeySet = messageParent[__IS_KEY_SET];
                                        key = isKeySet ? key[0] : key;
                                        requestedPath[requestedPath.length = column] = key;
                                        if (key != null && key !== __NULL) {
                                            optimizedPath[optimizedPath.length = column + offset] = key;
                                            context = contextParent[key];
                                            if (context != null) {
                                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                    contextInvalidated = context != null && context[__INVALIDATED];
                                                    if (contextInvalidated === true === false) {
                                                        context.__invalidated = true;
                                                        context[$EXPIRES] = 0;
                                                        expired[++expiredLength] = context;
                                                        if (context != null && typeof context === 'object') {
                                                            head = root.__head;
                                                            tail = root.__tail;
                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                            context === head && (root.__head = root.__next = head = next);
                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                            context.__next = context.__prev = undefined;
                                                            head = tail = next = prev = undefined;
                                                        }
                                                    }
                                                    context = undefined;
                                                }
                                            }
                                            contextType = context != null && context[$TYPE];
                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                        }
                                    }
                                    break resolvePath;
                                } while (true);
                            if (context != null) {
                                if (context != null && typeof context === 'object' && contextExpires !== 1) {
                                    head = root.__head;
                                    tail = root.__tail;
                                    next = context.__next, prev = context.__prev;
                                    if (context !== head) {
                                        next && (next != null && typeof next === 'object') && (next.__prev = prev);
                                        prev && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                        (next = head) && (head != null && typeof head === 'object') && (head.__prev = context);
                                        root.__head = root.__next = head = context;
                                        head.__next = next;
                                        head.__prev = undefined;
                                    }
                                    if (tail == null || context === tail) {
                                        root.__tail = root.__prev = tail = prev || context;
                                    }
                                    head = tail = next = prev = undefined;
                                }
                                if (contextType === 'error') {
                                    if (expandsCount > -1) {
                                        requestedPath[requestedPath.length] = null;
                                    }
                                    contextValue = context;
                                }
                            }
                            if (context == null || refreshing === true) {
                                src = optimizedPath;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                opt = dest;
                                src = optimizedBoundPath;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                req = dest;
                                reqLen = n;
                                i = -1;
                                n = requestedPath.length;
                                while (++i < n) {
                                    key = path[i];
                                    key2 = requestedPath[i];
                                    req[reqLen + i] = key && typeof key === 'object' && [key2] || key2;
                                }
                                if (column < length) {
                                    j = column + 1;
                                    k = length + 1;
                                    reqLen = req.length;
                                    optLen = opt.length;
                                    i = -1;
                                    n = k - j;
                                    while (++i < n) {
                                        req[reqLen + i] = opt[optLen + i] = path[j + i];
                                    }
                                }
                                req.pathSetIndex = index;
                                requestedMissingPaths[requestedMissingPaths.length] = req;
                                optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                            } else if (contextValue !== undefined || boxed === true) {
                                src = optimizedPath;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                opt = dest;
                                src = requestedPath;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                req = dest;
                                requestedPaths[requestedPaths.length] = req;
                                optimizedPaths[optimizedPaths.length] = opt;
                                if (contextType === 'error') {
                                    if (err === undefined) {
                                        if (boxed === true) {
                                            err = context;
                                        } else {
                                            dest = {};
                                            src = context;
                                            keys = Object.keys(src);
                                            i = -1;
                                            n = keys.length;
                                            while (++i < n) {
                                                x = keys[i];
                                                !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                                            }
                                            err = dest;
                                        }
                                        val = !!includeErrors && err || undefined;
                                    }
                                    errors[errors.length] = {
                                        path: req,
                                        value: err
                                    };
                                    err = undefined;
                                } else {
                                    if (boxed === true) {
                                        val = context;
                                    } else if (contextValue != null && typeof contextValue === 'object') {
                                        if (Array.isArray(contextValue)) {
                                            src = contextValue;
                                            dest = new Array(n = src.length);
                                            i = -1;
                                            while (++i < n) {
                                                dest[i] = src[i];
                                            }
                                            val = dest;
                                        } else {
                                            dest = {};
                                            src = contextValue;
                                            keys = Object.keys(src);
                                            i = -1;
                                            n = keys.length;
                                            while (++i < n) {
                                                x = keys[i];
                                                !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                                            }
                                            val = dest;
                                        }
                                    } else {
                                        val = contextValue;
                                    }
                                }
                                if (!(contextType === 'error')) {
                                    pbv.value = val;
                                    pbv.path = req;
                                    dest = {};
                                    src = pbv;
                                    keys = Object.keys(src);
                                    i = -1;
                                    n = keys.length;
                                    while (++i < n) {
                                        x = keys[i];
                                        !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                                    }
                                    val = dest;
                                    if (!!onNext) {
                                        onNext.call(model, val);
                                    } else if (!!values) {
                                        values[values.length] = val;
                                    }
                                }
                            }
                            column = length;
                        }
                    }
                } else {
                    keys[__OFFSET] = 0;
                    length -= 1;
                    column -= 1;
                }
            }
            message = messages[length - 1];
        }
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function getPathsAsJSON() {
    var returnBlocker;
    var generation, model, state, values, errorSelector, onNext, errors, boxed, includeErrors, refreshing, connected, root, contextCache, context, expired, expiredLength, boundPath, optimizedBoundPath, column, offset, jsonDepth, boundPathValue, contexts, requested, optimized, requestedPaths, optimizedPaths, requestedMissingPaths, optimizedMissingPaths, requestedPath, optimizedPath, paths, jsons, jsonKeys, contextParent, index, count, hasValues, jsonCache, json, refsByCols, pathSet, value, path, length, resetOptimizedDepth, reference, i, j, n, isKeySet, key, contextExpires, contextInvalidated, head, tail, next, prev, contextType, contextValue, branchKeyTmp, expandsCount, outermostColumn, refLen, outermostLength, outermostPath, refContainer, backRefs, jsonKey, src, dest, opt, req, reqLen, key2, k, optLen, err, keys, x, val, jsonLength;
    generation = __GENERATION_GENERATION++;
    model = arguments[0];
    state = arguments[1];
    values = arguments[2];
    errorSelector = arguments[3];
    if (typeof values === 'function') {
        onNext = values;
        values = undefined;
    }
    errors = state.errors || (state.errors = []);
    boxed = model._boxed;
    includeErrors = model._includeErrors;
    refreshing = model._refreshing;
    connected = model._connected;
    root = model._root;
    contextCache = context = model._cache;
    expired = root.expired;
    expiredLength = expired.length;
    boundPath = state.boundPath || model._path;
    optimizedBoundPath = [];
    column = state.column || (state.column = 0) - 1;
    offset = state.offset || (state.offset = 0);
    jsonDepth = state.jsonDepth || (state.jsonDepth = 0);
    boundPathValue = state.boundPathValue;
    contexts = state.contexts || (state.contexts = []);
    requested = state.requested || (state.requested = {});
    optimized = state.optimized || (state.optimized = {});
    requestedPaths = state.requestedPaths || (state.requestedPaths = []);
    optimizedPaths = state.optimizedPaths || (state.optimizedPaths = []);
    requestedMissingPaths = state.requestedMissingPaths || (state.requestedMissingPaths = []);
    optimizedMissingPaths = state.optimizedMissingPaths || (state.optimizedMissingPaths = []);
    requestedPath = state.requestedPath || (state.requestedPath = []);
    optimizedPath = state.optimizedPath || (state.optimizedPath = []);
    paths = state;
    jsons = state.jsons || (state.jsons = []);
    jsonKeys = state.jsonKeys || (state.jsonKeys = []);
    optimizedBoundPath = boundPath;
    if (contextParent == null && (contextParent = model.__context) == null) {
        if (boundPath.length === 0) {
            contextParent = contextCache;
        } else {
            if (boundPathValue == null) {
                boundPathValue = getContextSync.call(model);
            }
            optimizedBoundPath = boundPathValue.path;
            if ((contextParent = boundPathValue.value) == null) {
                contextParent = {};
            }
            boundPathValue.requested = [];
            boundPathValue.optimized = [];
            state.boundPathValue = boundPathValue;
        }
    }
    contexts[-1] = context = contextParent;
    index = paths.index || (paths.index = 0);
    count = paths.length;
    for (; index < count; ++index) {
        pathSet = paths[index];
        hasValues = false;
        jsonDepth = jsonKeys.length = 0;
        jsonCache = json = jsons[-1] = !!values && values[index] || undefined;
        offset = 0;
        refsByCols = state.refsByCols = [];
        refsByCols[-1] = optimizedBoundPath;
        if (Array.isArray(pathSet)) {
            value = undefined;
            path = pathSet;
        } else {
            value = pathSet.value;
            path = pathSet.path;
        }
        length = path.length - 1;
        column = path.column || (path.column = 0);
        while (column > -1) {
            resetOptimizedDepth = column;
            while (--resetOptimizedDepth >= -1) {
                if (!!(reference = refsByCols[resetOptimizedDepth])) {
                    i = j = -1;
                    n = reference.length;
                    offset = n - ++resetOptimizedDepth;
                    while (++i < n) {
                        optimizedPath[++j] = reference[i];
                    }
                    while (resetOptimizedDepth < column) {
                        optimizedPath[++j] = requestedPath[resetOptimizedDepth++];
                    }
                    optimizedPath.length = offset + resetOptimizedDepth;
                    break;
                }
            }
            contextParent = contexts[column - 1];
            resolvePath:
                do {
                    for (; column < length; ++column) {
                        key = path[column];
                        isKeySet = false;
                        if (key != null && typeof key === 'object') {
                            isKeySet = true;
                            if (Array.isArray(key)) {
                                key = key[key.index || (key.index = 0)];
                                if (key != null && typeof key === 'object') {
                                    key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            } else {
                                key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        }
                        requestedPath[requestedPath.length = column] = key;
                        if (key != null && key !== __NULL) {
                            !!jsonCache && isKeySet === true && (jsonKeys[jsonDepth] = key);
                            optimizedPath[optimizedPath.length = column + offset] = key;
                            context = contextParent[key];
                            if (context != null) {
                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                    contextInvalidated = context != null && context[__INVALIDATED];
                                    if (contextInvalidated === true === false) {
                                        context.__invalidated = true;
                                        context[$EXPIRES] = 0;
                                        expired[++expiredLength] = context;
                                        if (context != null && typeof context === 'object') {
                                            head = root.__head;
                                            tail = root.__tail;
                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                            context === head && (root.__head = root.__next = head = next);
                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                            context.__next = context.__prev = undefined;
                                            head = tail = next = prev = undefined;
                                        }
                                    }
                                    context = undefined;
                                }
                            }
                            contextType = context != null && context[$TYPE];
                            contextValue = contextType === 'sentinel' ? context.value : context;
                            branchKeyTmp = key;
                            if ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue)) {
                                expandsCount = -1;
                                refsByCols[outermostColumn = column] = contextValue;
                                do {
                                    branchKeyTmp = key;
                                    if ((context = context.__context) !== undefined) {
                                        i = -1;
                                        refLen = contextValue.length;
                                        offset = refLen - column - 1;
                                        optimizedPath.length = refLen;
                                        while (++i < refLen) {
                                            optimizedPath[i] = contextValue[i];
                                        }
                                        if (context != null) {
                                            if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                contextInvalidated = context != null && context[__INVALIDATED];
                                                if (contextInvalidated === true === false) {
                                                    context.__invalidated = true;
                                                    context[$EXPIRES] = 0;
                                                    expired[++expiredLength] = context;
                                                    if (context != null && typeof context === 'object') {
                                                        head = root.__head;
                                                        tail = root.__tail;
                                                        (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                        (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                        context === head && (root.__head = root.__next = head = next);
                                                        context === tail && (root.__tail = root.__prev = tail = prev);
                                                        context.__next = context.__prev = undefined;
                                                        head = tail = next = prev = undefined;
                                                    }
                                                }
                                                context = undefined;
                                            }
                                        }
                                        contextType = context != null && context[$TYPE];
                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                        if (contextType === 'error') {
                                            expandsCount = 0;
                                            break resolvePath;
                                        } else if (context != null === false) {
                                            expandsCount = -1;
                                            break resolvePath;
                                        }
                                        contextParent = context;
                                    } else {
                                        refsByCols[outermostColumn = column] = contextValue;
                                        outermostLength = length;
                                        outermostPath = path;
                                        offset = 0;
                                        column = -1;
                                        path = contextValue;
                                        length = path.length - 1;
                                        contextParent = contextCache;
                                        while (++column < length) {
                                            if ((key = path[column]) == null) {
                                                continue;
                                            }
                                            optimizedPath[optimizedPath.length = column + offset] = key;
                                            context = contextParent[key];
                                            if (context != null) {
                                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                    contextInvalidated = context != null && context[__INVALIDATED];
                                                    if (contextInvalidated === true === false) {
                                                        context.__invalidated = true;
                                                        context[$EXPIRES] = 0;
                                                        expired[++expiredLength] = context;
                                                        if (context != null && typeof context === 'object') {
                                                            head = root.__head;
                                                            tail = root.__tail;
                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                            context === head && (root.__head = root.__next = head = next);
                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                            context.__next = context.__prev = undefined;
                                                            head = tail = next = prev = undefined;
                                                        }
                                                    }
                                                    context = undefined;
                                                }
                                            }
                                            contextType = context != null && context[$TYPE];
                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                            if (context === undefined) {
                                                i = -1;
                                                refLen = path.length;
                                                offset = refLen - column - 1;
                                                optimizedPath.length = refLen;
                                                while (++i < refLen) {
                                                    optimizedPath[i] = path[i];
                                                }
                                                break;
                                            } else if (!!contextType || Array.isArray(contextValue)) {
                                                break;
                                            }
                                            contextParent = context;
                                        }
                                        if (column === length) {
                                            if ((key = path[column]) != null) {
                                                optimizedPath[optimizedPath.length = column + offset] = key;
                                                context = contextParent[key];
                                                if (context != null) {
                                                    if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                        contextInvalidated = context != null && context[__INVALIDATED];
                                                        if (contextInvalidated === true === false) {
                                                            context.__invalidated = true;
                                                            context[$EXPIRES] = 0;
                                                            expired[++expiredLength] = context;
                                                            if (context != null && typeof context === 'object') {
                                                                head = root.__head;
                                                                tail = root.__tail;
                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                context === head && (root.__head = root.__next = head = next);
                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                context.__next = context.__prev = undefined;
                                                                head = tail = next = prev = undefined;
                                                            }
                                                        }
                                                        context = undefined;
                                                    }
                                                }
                                                contextType = context != null && context[$TYPE];
                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                            }
                                            if (context != null) {
                                                if ((refContainer = path[__CONTAINER] || path).__context === undefined) {
                                                    backRefs = context.__refsLength || 0;
                                                    context['__ref' + backRefs] = refContainer;
                                                    context.__refsLength = backRefs + 1;
                                                    refContainer.__refIndex = backRefs;
                                                    refContainer.__context = context;
                                                    refContainer = backRefs = undefined;
                                                }
                                            }
                                        }
                                        expandsCount = Number(contextType === 'error') - 1;
                                        column = outermostColumn;
                                        path = outermostPath;
                                        offset = length - column;
                                        length = outermostLength;
                                        key = branchKeyTmp;
                                        outermostColumn = undefined;
                                        outermostPath = undefined;
                                        outermostLength = undefined;
                                        branchKeyTmp = undefined;
                                    }
                                } while ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue));
                            }
                            key = branchKeyTmp;
                            if (!!(contextType === 'error') || context != null === false) {
                                break resolvePath;
                            }
                            contexts[column] = contextParent = context;
                            if (!!jsonCache && isKeySet === true) {
                                do {
                                    jsonKey = jsonKeys[jsonDepth];
                                } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                                if (jsonKey != null && jsonKey !== __NULL) {
                                    json = jsons[jsonDepth - 1] || jsonCache;
                                } else {
                                    json = jsonCache;
                                }
                                if (jsonKey != null && jsonKey !== __NULL) {
                                    json = json[jsonKey] || (json[jsonKey] = {});
                                }
                                jsons[jsonDepth] = json;
                                jsonDepth += 1;
                            }
                        }
                    }
                    if (column === length) {
                        key = path[column];
                        isKeySet = false;
                        if (key != null && typeof key === 'object') {
                            isKeySet = true;
                            if (Array.isArray(key)) {
                                key = key[key.index || (key.index = 0)];
                                if (key != null && typeof key === 'object') {
                                    key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            } else {
                                key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        }
                        requestedPath[requestedPath.length = column] = key;
                        if (key != null && key !== __NULL) {
                            !!jsonCache && isKeySet === true && (jsonKeys[jsonDepth] = key);
                            optimizedPath[optimizedPath.length = column + offset] = key;
                            context = contextParent[key];
                            if (context != null) {
                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                    contextInvalidated = context != null && context[__INVALIDATED];
                                    if (contextInvalidated === true === false) {
                                        context.__invalidated = true;
                                        context[$EXPIRES] = 0;
                                        expired[++expiredLength] = context;
                                        if (context != null && typeof context === 'object') {
                                            head = root.__head;
                                            tail = root.__tail;
                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                            context === head && (root.__head = root.__next = head = next);
                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                            context.__next = context.__prev = undefined;
                                            head = tail = next = prev = undefined;
                                        }
                                    }
                                    context = undefined;
                                }
                            }
                            contextType = context != null && context[$TYPE];
                            contextValue = contextType === 'sentinel' ? context.value : context;
                        }
                    }
                    break resolvePath;
                } while (true);
            if (context != null) {
                if (context != null && typeof context === 'object' && contextExpires !== 1) {
                    head = root.__head;
                    tail = root.__tail;
                    next = context.__next, prev = context.__prev;
                    if (context !== head) {
                        next && (next != null && typeof next === 'object') && (next.__prev = prev);
                        prev && (prev != null && typeof prev === 'object') && (prev.__next = next);
                        (next = head) && (head != null && typeof head === 'object') && (head.__prev = context);
                        root.__head = root.__next = head = context;
                        head.__next = next;
                        head.__prev = undefined;
                    }
                    if (tail == null || context === tail) {
                        root.__tail = root.__prev = tail = prev || context;
                    }
                    head = tail = next = prev = undefined;
                }
                if (contextType === 'error') {
                    if (expandsCount > -1) {
                        requestedPath[requestedPath.length] = null;
                    }
                    contextValue = context;
                }
            }
            if (context == null || refreshing === true) {
                src = optimizedPath;
                dest = new Array(n = src.length);
                i = -1;
                while (++i < n) {
                    dest[i] = src[i];
                }
                opt = dest;
                src = optimizedBoundPath;
                dest = new Array(n = src.length);
                i = -1;
                while (++i < n) {
                    dest[i] = src[i];
                }
                req = dest;
                reqLen = n;
                i = -1;
                n = requestedPath.length;
                while (++i < n) {
                    key = path[i];
                    key2 = requestedPath[i];
                    req[reqLen + i] = key && typeof key === 'object' && [key2] || key2;
                }
                if (column < length) {
                    j = column + 1;
                    k = length + 1;
                    reqLen = req.length;
                    optLen = opt.length;
                    i = -1;
                    n = k - j;
                    while (++i < n) {
                        req[reqLen + i] = opt[optLen + i] = path[j + i];
                    }
                }
                req.pathSetIndex = index;
                requestedMissingPaths[requestedMissingPaths.length] = req;
                optimizedMissingPaths[optimizedMissingPaths.length] = opt;
            } else if (contextValue !== undefined || boxed === true) {
                src = optimizedPath;
                dest = new Array(n = src.length);
                i = -1;
                while (++i < n) {
                    dest[i] = src[i];
                }
                opt = dest;
                src = requestedPath;
                dest = new Array(n = src.length);
                i = -1;
                while (++i < n) {
                    dest[i] = src[i];
                }
                req = dest;
                requestedPaths[requestedPaths.length] = req;
                optimizedPaths[optimizedPaths.length] = opt;
                if (!!jsonCache) {
                    hasValues = true;
                    if (contextType === 'error') {
                        if (err === undefined) {
                            if (boxed === true) {
                                err = context;
                            } else {
                                dest = {};
                                src = context;
                                keys = Object.keys(src);
                                i = -1;
                                n = keys.length;
                                while (++i < n) {
                                    x = keys[i];
                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                                }
                                err = dest;
                            }
                            val = !!includeErrors && err || undefined;
                        }
                        errors[errors.length] = {
                            path: req,
                            value: err
                        };
                        err = undefined;
                    } else {
                        if (boxed === true) {
                            val = context;
                        } else if (contextValue != null && typeof contextValue === 'object') {
                            if (Array.isArray(contextValue)) {
                                src = contextValue;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                val = dest;
                            } else {
                                dest = {};
                                src = contextValue;
                                keys = Object.keys(src);
                                i = -1;
                                n = keys.length;
                                while (++i < n) {
                                    x = keys[i];
                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                                }
                                val = dest;
                            }
                        } else {
                            val = contextValue;
                        }
                    }
                    do {
                        jsonKey = jsonKeys[jsonDepth];
                    } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                    if (jsonKey != null && jsonKey !== __NULL) {
                        json = jsons[jsonDepth - 1] || jsonCache;
                    } else {
                        json = jsonCache;
                    }
                    if (jsonKey != null && jsonKey !== __NULL) {
                        json[jsonKey] = val;
                    } else {
                        json = jsons[jsonDepth] = val;
                    }
                }
            }
            for (; column > -1; --column) {
                key = path[column];
                if (key == null || typeof key !== 'object') {
                    continue;
                }
                isKeySet = true;
                if (Array.isArray(key)) {
                    jsonDepth -= Number(jsonDepth > 0);
                    if (++key.index === key.length) {
                        key = key[key.index = 0];
                        if (key == null || typeof key !== 'object') {
                            continue;
                        }
                    } else {
                        break;
                    }
                }
                if (++key[__OFFSET] > (key.to || (key.to = key.from + (key.length || 1) - 1))) {
                    key[__OFFSET] = key.from;
                    continue;
                }
                jsonDepth -= Number(jsonDepth > 0);
                break;
            }
        }
        path.column = column;
        if (!!jsonCache) {
            jsonDepth = -2;
            jsonLength = jsons.length;
            while (++jsonDepth < jsonLength) {
                if ((json = jsons[jsonDepth]) != null) {
                    break;
                }
            }
            if (hasValues) {
                values[index] = { json: json };
            } else {
                values[index] = undefined;
            }
        }
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function getPathsAsJSONG() {
    var returnBlocker;
    var generation, model, state, values, errorSelector, onNext, errors, boxed, includeErrors, refreshing, connected, root, contextCache, context, expired, expiredLength, boundPath, optimizedBoundPath, column, offset, jsonDepth, boundPathValue, contexts, requested, optimized, requestedPaths, optimizedPaths, requestedMissingPaths, optimizedMissingPaths, requestedPath, optimizedPath, paths, jsons, jsonKeys, contextParent, index, count, hasValues, jsonCache, json, refsByCols, pathSet, value, path, length, resetOptimizedDepth, reference, i, j, n, isKeySet, key, contextExpires, contextInvalidated, head, tail, next, prev, contextType, contextValue, branchKeyTmp, jsonKey, val, src, dest, expandsCount, outermostColumn, outermostLength, outermostPath, err, keys, x, refLen, refContainer, backRefs, opt, req, reqLen, key2, k, optLen;
    generation = __GENERATION_GENERATION++;
    model = arguments[0];
    state = arguments[1];
    values = arguments[2];
    errorSelector = arguments[3];
    if (typeof values === 'function') {
        onNext = values;
        values = undefined;
    }
    errors = state.errors || (state.errors = []);
    boxed = model._boxed;
    includeErrors = model._includeErrors;
    refreshing = model._refreshing;
    connected = model._connected;
    root = model._root;
    contextCache = context = model._cache;
    expired = root.expired;
    expiredLength = expired.length;
    boundPath = state.boundPath || model._path;
    optimizedBoundPath = [];
    column = state.column || (state.column = 0) - 1;
    offset = state.offset || (state.offset = 0);
    jsonDepth = state.jsonDepth || (state.jsonDepth = 0);
    boundPathValue = state.boundPathValue;
    contexts = state.contexts || (state.contexts = []);
    requested = state.requested || (state.requested = {});
    optimized = state.optimized || (state.optimized = {});
    requestedPaths = state.requestedPaths || (state.requestedPaths = []);
    optimizedPaths = state.optimizedPaths || (state.optimizedPaths = []);
    requestedMissingPaths = state.requestedMissingPaths || (state.requestedMissingPaths = []);
    optimizedMissingPaths = state.optimizedMissingPaths || (state.optimizedMissingPaths = []);
    requestedPath = state.requestedPath || (state.requestedPath = []);
    optimizedPath = state.optimizedPath || (state.optimizedPath = []);
    paths = state;
    jsons = state.jsons || (state.jsons = []);
    jsonKeys = state.jsonKeys || (state.jsonKeys = []);
    includeErrors = true;
    optimizedBoundPath = boundPath;
    if (contextParent == null && (contextParent = model.__context) == null) {
        if (boundPath.length === 0) {
            contextParent = contextCache;
        } else {
            if (boundPathValue == null) {
                boundPathValue = getContextSync.call(model);
            }
            optimizedBoundPath = boundPathValue.path;
            if ((contextParent = boundPathValue.value) == null) {
                contextParent = {};
            }
            boundPathValue.requested = [];
            boundPathValue.optimized = [];
            state.boundPathValue = boundPathValue;
        }
    }
    contexts[-1] = context = contextParent;
    index = paths.index || (paths.index = 0);
    count = paths.length;
    for (; index < count; ++index) {
        pathSet = paths[index];
        hasValues = hasValues || false;
        jsonDepth = jsonKeys.length = 0;
        jsonCache = json = jsons[-1] = !!values && values[0] || undefined;
        offset = 0;
        refsByCols = state.refsByCols = [];
        refsByCols[-1] = optimizedBoundPath;
        if (Array.isArray(pathSet)) {
            value = undefined;
            path = pathSet;
        } else {
            value = pathSet.value;
            path = pathSet.path;
        }
        length = path.length - 1;
        column = path.column || (path.column = 0);
        while (column > -1) {
            resetOptimizedDepth = column;
            while (--resetOptimizedDepth >= -1) {
                if (!!(reference = refsByCols[resetOptimizedDepth])) {
                    i = j = -1;
                    n = reference.length;
                    offset = n - ++resetOptimizedDepth;
                    while (++i < n) {
                        optimizedPath[++j] = reference[i];
                    }
                    while (resetOptimizedDepth < column) {
                        optimizedPath[++j] = requestedPath[resetOptimizedDepth++];
                    }
                    optimizedPath.length = offset + resetOptimizedDepth;
                    break;
                }
            }
            contextParent = contexts[column - 1];
            resolvePath:
                do {
                    for (; column < length; ++column) {
                        key = path[column];
                        isKeySet = false;
                        if (key != null && typeof key === 'object') {
                            isKeySet = true;
                            if (Array.isArray(key)) {
                                key = key[key.index || (key.index = 0)];
                                if (key != null && typeof key === 'object') {
                                    key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            } else {
                                key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        }
                        requestedPath[requestedPath.length = column] = key;
                        if (key != null && key !== __NULL) {
                            isKeySet = true;
                            jsonKeys[jsonDepth = column] = key;
                            optimizedPath[optimizedPath.length = column + offset] = key;
                            context = contextParent[key];
                            if (context != null) {
                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                    contextInvalidated = context != null && context[__INVALIDATED];
                                    if (contextInvalidated === true === false) {
                                        context.__invalidated = true;
                                        context[$EXPIRES] = 0;
                                        expired[++expiredLength] = context;
                                        if (context != null && typeof context === 'object') {
                                            head = root.__head;
                                            tail = root.__tail;
                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                            context === head && (root.__head = root.__next = head = next);
                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                            context.__next = context.__prev = undefined;
                                            head = tail = next = prev = undefined;
                                        }
                                    }
                                    context = undefined;
                                }
                            }
                            contextType = context != null && context[$TYPE];
                            contextValue = contextType === 'sentinel' ? context.value : context;
                            branchKeyTmp = key;
                            if ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue)) {
                                isKeySet = false;
                                if ((jsonKey = key) != null && jsonKey !== __NULL) {
                                    if (boxed === true) {
                                        val = context;
                                    } else {
                                        src = contextValue;
                                        dest = new Array(n = src.length);
                                        i = -1;
                                        while (++i < n) {
                                            dest[i] = src[i];
                                        }
                                        val = dest;
                                    }
                                    do {
                                        jsonKey = jsonKeys[jsonDepth];
                                    } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                                    if (jsonKey != null && jsonKey !== __NULL) {
                                        json = jsons[jsonDepth - 1] || jsonCache;
                                    } else {
                                        json = jsonCache;
                                    }
                                    if (jsonKey != null && jsonKey !== __NULL) {
                                        json[jsonKey] = val;
                                    } else {
                                        json = jsons[jsonDepth] = val;
                                    }
                                }
                                expandsCount = -1;
                                refsByCols[outermostColumn = column] = contextValue;
                                do {
                                    branchKeyTmp = key;
                                    if (false) {
                                    } else {
                                        json = jsonCache;
                                        refsByCols[outermostColumn = column] = contextValue;
                                        outermostLength = length;
                                        outermostPath = path;
                                        offset = 0;
                                        column = -1;
                                        path = contextValue;
                                        length = path.length - 1;
                                        contextParent = contextCache;
                                        while (++column < length) {
                                            if ((key = path[column]) == null) {
                                                continue;
                                            }
                                            optimizedPath[optimizedPath.length = column + offset] = key;
                                            context = contextParent[key];
                                            if (context != null) {
                                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                    contextInvalidated = context != null && context[__INVALIDATED];
                                                    if (contextInvalidated === true === false) {
                                                        context.__invalidated = true;
                                                        context[$EXPIRES] = 0;
                                                        expired[++expiredLength] = context;
                                                        if (context != null && typeof context === 'object') {
                                                            head = root.__head;
                                                            tail = root.__tail;
                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                            context === head && (root.__head = root.__next = head = next);
                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                            context.__next = context.__prev = undefined;
                                                            head = tail = next = prev = undefined;
                                                        }
                                                    }
                                                    context = undefined;
                                                }
                                            }
                                            contextType = context != null && context[$TYPE];
                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                            if (context != null && ((jsonKey = key) != null && jsonKey !== __NULL)) {
                                                if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                    if (contextType === 'error') {
                                                        if (boxed === true) {
                                                            err = context;
                                                        } else {
                                                            dest = {};
                                                            src = context;
                                                            keys = Object.keys(src);
                                                            i = -1;
                                                            n = keys.length;
                                                            while (++i < n) {
                                                                x = keys[i];
                                                                !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                            }
                                                            err = dest;
                                                        }
                                                        val = !!includeErrors && err || undefined;
                                                    } else {
                                                        if (boxed === true) {
                                                            val = context;
                                                        } else if (contextValue != null && typeof contextValue === 'object') {
                                                            if (Array.isArray(contextValue)) {
                                                                src = contextValue;
                                                                dest = new Array(n = src.length);
                                                                i = -1;
                                                                while (++i < n) {
                                                                    dest[i] = src[i];
                                                                }
                                                                val = dest;
                                                            } else {
                                                                dest = {};
                                                                src = contextValue;
                                                                keys = Object.keys(src);
                                                                i = -1;
                                                                n = keys.length;
                                                                while (++i < n) {
                                                                    x = keys[i];
                                                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                                }
                                                                val = dest;
                                                            }
                                                        } else {
                                                            val = contextValue;
                                                        }
                                                    }
                                                    if (jsonKey != null && jsonKey !== __NULL) {
                                                        json[jsonKey] = val;
                                                    } else {
                                                        json = jsons[jsonDepth] = val;
                                                    }
                                                } else {
                                                    if (jsonKey != null && jsonKey !== __NULL) {
                                                        json = json[jsonKey] || (json[jsonKey] = {});
                                                    }
                                                }
                                            }
                                            if (context === undefined) {
                                                i = -1;
                                                refLen = path.length;
                                                offset = refLen - column - 1;
                                                optimizedPath.length = refLen;
                                                while (++i < refLen) {
                                                    optimizedPath[i] = path[i];
                                                }
                                                break;
                                            } else if (!!contextType || Array.isArray(contextValue)) {
                                                break;
                                            }
                                            contextParent = context;
                                        }
                                        if (column === length) {
                                            if ((key = path[column]) != null) {
                                                optimizedPath[optimizedPath.length = column + offset] = key;
                                                context = contextParent[key];
                                                if (context != null) {
                                                    if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                        contextInvalidated = context != null && context[__INVALIDATED];
                                                        if (contextInvalidated === true === false) {
                                                            context.__invalidated = true;
                                                            context[$EXPIRES] = 0;
                                                            expired[++expiredLength] = context;
                                                            if (context != null && typeof context === 'object') {
                                                                head = root.__head;
                                                                tail = root.__tail;
                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                context === head && (root.__head = root.__next = head = next);
                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                context.__next = context.__prev = undefined;
                                                                head = tail = next = prev = undefined;
                                                            }
                                                        }
                                                        context = undefined;
                                                    }
                                                }
                                                contextType = context != null && context[$TYPE];
                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                if (context != null && ((jsonKey = key) != null && jsonKey !== __NULL)) {
                                                    if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                        if (contextType === 'error') {
                                                            if (boxed === true) {
                                                                err = context;
                                                            } else {
                                                                dest = {};
                                                                src = context;
                                                                keys = Object.keys(src);
                                                                i = -1;
                                                                n = keys.length;
                                                                while (++i < n) {
                                                                    x = keys[i];
                                                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                                }
                                                                err = dest;
                                                            }
                                                            val = !!includeErrors && err || undefined;
                                                        } else {
                                                            if (boxed === true) {
                                                                val = context;
                                                            } else if (contextValue != null && typeof contextValue === 'object') {
                                                                if (Array.isArray(contextValue)) {
                                                                    src = contextValue;
                                                                    dest = new Array(n = src.length);
                                                                    i = -1;
                                                                    while (++i < n) {
                                                                        dest[i] = src[i];
                                                                    }
                                                                    val = dest;
                                                                } else {
                                                                    dest = {};
                                                                    src = contextValue;
                                                                    keys = Object.keys(src);
                                                                    i = -1;
                                                                    n = keys.length;
                                                                    while (++i < n) {
                                                                        x = keys[i];
                                                                        !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                                    }
                                                                    val = dest;
                                                                }
                                                            } else {
                                                                val = contextValue;
                                                            }
                                                        }
                                                        if (jsonKey != null && jsonKey !== __NULL) {
                                                            json[jsonKey] = val;
                                                        } else {
                                                            json = jsons[jsonDepth] = val;
                                                        }
                                                    } else {
                                                        if (jsonKey != null && jsonKey !== __NULL) {
                                                            json = json[jsonKey] || (json[jsonKey] = {});
                                                        }
                                                    }
                                                }
                                            }
                                            if (context != null) {
                                                if ((refContainer = path[__CONTAINER] || path).__context === undefined) {
                                                    backRefs = context.__refsLength || 0;
                                                    context['__ref' + backRefs] = refContainer;
                                                    context.__refsLength = backRefs + 1;
                                                    refContainer.__refIndex = backRefs;
                                                    refContainer.__context = context;
                                                    refContainer = backRefs = undefined;
                                                }
                                            }
                                        }
                                        expandsCount = Number(contextType === 'error') - 1;
                                        column = outermostColumn;
                                        path = outermostPath;
                                        offset = length - column;
                                        length = outermostLength;
                                        key = branchKeyTmp;
                                        outermostColumn = undefined;
                                        outermostPath = undefined;
                                        outermostLength = undefined;
                                        branchKeyTmp = undefined;
                                    }
                                } while ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue));
                            }
                            key = branchKeyTmp;
                            if (!!(contextType === 'error') || context != null === false) {
                                break resolvePath;
                            }
                            contexts[column] = contextParent = context;
                            if (isKeySet === true && ((jsonKey = key) != null && jsonKey !== __NULL)) {
                                do {
                                    jsonKey = jsonKeys[jsonDepth];
                                } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                                if (jsonKey != null && jsonKey !== __NULL) {
                                    json = jsons[jsonDepth - 1] || jsonCache;
                                } else {
                                    json = jsonCache;
                                }
                                if (jsonKey != null && jsonKey !== __NULL) {
                                    json = json[jsonKey] || (json[jsonKey] = {});
                                }
                            }
                            jsons[jsonDepth] = json;
                            jsonDepth += 1;
                        }
                    }
                    if (column === length) {
                        key = path[column];
                        isKeySet = false;
                        if (key != null && typeof key === 'object') {
                            isKeySet = true;
                            if (Array.isArray(key)) {
                                key = key[key.index || (key.index = 0)];
                                if (key != null && typeof key === 'object') {
                                    key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            } else {
                                key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        }
                        requestedPath[requestedPath.length = column] = key;
                        if (key != null && key !== __NULL) {
                            jsonDepth = column;
                            isKeySet = true;
                            !!jsonCache && isKeySet === true && (jsonKeys[jsonDepth] = key);
                            optimizedPath[optimizedPath.length = column + offset] = key;
                            context = contextParent[key];
                            if (context != null) {
                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                    contextInvalidated = context != null && context[__INVALIDATED];
                                    if (contextInvalidated === true === false) {
                                        context.__invalidated = true;
                                        context[$EXPIRES] = 0;
                                        expired[++expiredLength] = context;
                                        if (context != null && typeof context === 'object') {
                                            head = root.__head;
                                            tail = root.__tail;
                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                            context === head && (root.__head = root.__next = head = next);
                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                            context.__next = context.__prev = undefined;
                                            head = tail = next = prev = undefined;
                                        }
                                    }
                                    context = undefined;
                                }
                            }
                            contextType = context != null && context[$TYPE];
                            contextValue = contextType === 'sentinel' ? context.value : context;
                        }
                    }
                    break resolvePath;
                } while (true);
            if (context != null) {
                if (context != null && typeof context === 'object' && contextExpires !== 1) {
                    head = root.__head;
                    tail = root.__tail;
                    next = context.__next, prev = context.__prev;
                    if (context !== head) {
                        next && (next != null && typeof next === 'object') && (next.__prev = prev);
                        prev && (prev != null && typeof prev === 'object') && (prev.__next = next);
                        (next = head) && (head != null && typeof head === 'object') && (head.__prev = context);
                        root.__head = root.__next = head = context;
                        head.__next = next;
                        head.__prev = undefined;
                    }
                    if (tail == null || context === tail) {
                        root.__tail = root.__prev = tail = prev || context;
                    }
                    head = tail = next = prev = undefined;
                }
                if (contextType === 'error') {
                    if (expandsCount > -1) {
                        requestedPath[requestedPath.length] = null;
                    }
                    contextValue = context;
                }
            }
            if (context == null || refreshing === true) {
                src = optimizedPath;
                dest = new Array(n = src.length);
                i = -1;
                while (++i < n) {
                    dest[i] = src[i];
                }
                opt = dest;
                src = optimizedBoundPath;
                dest = new Array(n = src.length);
                i = -1;
                while (++i < n) {
                    dest[i] = src[i];
                }
                req = dest;
                reqLen = n;
                i = -1;
                n = requestedPath.length;
                while (++i < n) {
                    key = path[i];
                    key2 = requestedPath[i];
                    req[reqLen + i] = key && typeof key === 'object' && [key2] || key2;
                }
                if (column < length) {
                    j = column + 1;
                    k = length + 1;
                    reqLen = req.length;
                    optLen = opt.length;
                    i = -1;
                    n = k - j;
                    while (++i < n) {
                        req[reqLen + i] = opt[optLen + i] = path[j + i];
                    }
                }
                req.pathSetIndex = index;
                requestedMissingPaths[requestedMissingPaths.length] = req;
                optimizedMissingPaths[optimizedMissingPaths.length] = opt;
            } else if (contextValue !== undefined || boxed === true) {
                src = optimizedPath;
                dest = new Array(n = src.length);
                i = -1;
                while (++i < n) {
                    dest[i] = src[i];
                }
                opt = dest;
                src = requestedPath;
                dest = new Array(n = src.length);
                i = -1;
                while (++i < n) {
                    dest[i] = src[i];
                }
                req = dest;
                requestedPaths[requestedPaths.length] = req;
                optimizedPaths[optimizedPaths.length] = opt;
                hasValues = true;
                if (err) {
                    errors[errors.length] = {
                        path: req,
                        value: err
                    };
                    err = undefined;
                } else if ((jsonKey = key) != null && jsonKey !== __NULL) {
                    if (contextType === 'error') {
                        if (err === undefined) {
                            if (boxed === true) {
                                err = context;
                            } else {
                                dest = {};
                                src = context;
                                keys = Object.keys(src);
                                i = -1;
                                n = keys.length;
                                while (++i < n) {
                                    x = keys[i];
                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                }
                                err = dest;
                            }
                            val = !!includeErrors && err || undefined;
                        }
                        errors[errors.length] = {
                            path: req,
                            value: err
                        };
                        err = undefined;
                    } else {
                        if (boxed === true) {
                            val = context;
                        } else if (contextValue != null && typeof contextValue === 'object') {
                            if (Array.isArray(contextValue)) {
                                src = contextValue;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                val = dest;
                            } else {
                                dest = {};
                                src = contextValue;
                                keys = Object.keys(src);
                                i = -1;
                                n = keys.length;
                                while (++i < n) {
                                    x = keys[i];
                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                }
                                val = dest;
                            }
                        } else {
                            val = contextValue;
                        }
                    }
                    do {
                        jsonKey = jsonKeys[jsonDepth];
                    } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                    if (jsonKey != null && jsonKey !== __NULL) {
                        json = jsons[jsonDepth - 1] || jsonCache;
                    } else {
                        json = jsonCache;
                    }
                    if (jsonKey != null && jsonKey !== __NULL) {
                        json[jsonKey] = val;
                    } else {
                        json = jsons[jsonDepth] = val;
                    }
                }
            }
            for (; column > -1; --column) {
                key = path[column];
                if (key == null || typeof key !== 'object') {
                    continue;
                }
                isKeySet = true;
                if (Array.isArray(key)) {
                    jsonDepth -= Number(jsonDepth > 0);
                    if (++key.index === key.length) {
                        key = key[key.index = 0];
                        if (key == null || typeof key !== 'object') {
                            continue;
                        }
                    } else {
                        break;
                    }
                }
                if (++key[__OFFSET] > (key.to || (key.to = key.from + (key.length || 1) - 1))) {
                    key[__OFFSET] = key.from;
                    continue;
                }
                jsonDepth -= Number(jsonDepth > 0);
                break;
            }
        }
        path.column = column;
    }
    json = jsons[-1];
    if (!!values) {
        values[0] = hasValues && {
            'paths': requestedPaths,
            'jsong': json
        } || undefined;
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function getPathsAsPathMap() {
    var returnBlocker;
    var generation, model, state, values, errorSelector, onNext, errors, boxed, includeErrors, refreshing, connected, root, contextCache, context, expired, expiredLength, boundPath, optimizedBoundPath, column, offset, jsonDepth, boundPathValue, contexts, requested, optimized, requestedPaths, optimizedPaths, requestedMissingPaths, optimizedMissingPaths, requestedPath, optimizedPath, paths, jsons, jsonKeys, contextParent, index, count, hasValues, jsonCache, json, refsByCols, pathSet, value, path, length, resetOptimizedDepth, reference, i, j, n, isKeySet, key, contextExpires, contextInvalidated, head, tail, next, prev, contextType, contextValue, branchKeyTmp, expandsCount, outermostColumn, refLen, outermostLength, outermostPath, refContainer, backRefs, jsonKey, src, dest, opt, req, reqLen, key2, k, optLen, err, keys, x, val;
    generation = __GENERATION_GENERATION++;
    model = arguments[0];
    state = arguments[1];
    values = arguments[2];
    errorSelector = arguments[3];
    if (typeof values === 'function') {
        onNext = values;
        values = undefined;
    }
    errors = state.errors || (state.errors = []);
    boxed = model._boxed;
    includeErrors = model._includeErrors;
    refreshing = model._refreshing;
    connected = model._connected;
    root = model._root;
    contextCache = context = model._cache;
    expired = root.expired;
    expiredLength = expired.length;
    boundPath = state.boundPath || model._path;
    optimizedBoundPath = [];
    column = state.column || (state.column = 0) - 1;
    offset = state.offset || (state.offset = 0);
    jsonDepth = state.jsonDepth || (state.jsonDepth = 0);
    boundPathValue = state.boundPathValue;
    contexts = state.contexts || (state.contexts = []);
    requested = state.requested || (state.requested = {});
    optimized = state.optimized || (state.optimized = {});
    requestedPaths = state.requestedPaths || (state.requestedPaths = []);
    optimizedPaths = state.optimizedPaths || (state.optimizedPaths = []);
    requestedMissingPaths = state.requestedMissingPaths || (state.requestedMissingPaths = []);
    optimizedMissingPaths = state.optimizedMissingPaths || (state.optimizedMissingPaths = []);
    requestedPath = state.requestedPath || (state.requestedPath = []);
    optimizedPath = state.optimizedPath || (state.optimizedPath = []);
    paths = state;
    jsons = state.jsons || (state.jsons = []);
    jsonKeys = state.jsonKeys || (state.jsonKeys = []);
    optimizedBoundPath = boundPath;
    if (contextParent == null && (contextParent = model.__context) == null) {
        if (boundPath.length === 0) {
            contextParent = contextCache;
        } else {
            if (boundPathValue == null) {
                boundPathValue = getContextSync.call(model);
            }
            optimizedBoundPath = boundPathValue.path;
            if ((contextParent = boundPathValue.value) == null) {
                contextParent = {};
            }
            boundPathValue.requested = [];
            boundPathValue.optimized = [];
            state.boundPathValue = boundPathValue;
        }
    }
    contexts[-1] = context = contextParent;
    index = paths.index || (paths.index = 0);
    count = paths.length;
    for (; index < count; ++index) {
        pathSet = paths[index];
        hasValues = hasValues || false;
        jsonDepth = jsonKeys.length = 0;
        jsonCache = json = jsons[-1] = !!values && values[0] || undefined;
        offset = 0;
        refsByCols = state.refsByCols = [];
        refsByCols[-1] = optimizedBoundPath;
        if (Array.isArray(pathSet)) {
            value = undefined;
            path = pathSet;
        } else {
            value = pathSet.value;
            path = pathSet.path;
        }
        length = path.length - 1;
        column = path.column || (path.column = 0);
        while (column > -1) {
            resetOptimizedDepth = column;
            while (--resetOptimizedDepth >= -1) {
                if (!!(reference = refsByCols[resetOptimizedDepth])) {
                    i = j = -1;
                    n = reference.length;
                    offset = n - ++resetOptimizedDepth;
                    while (++i < n) {
                        optimizedPath[++j] = reference[i];
                    }
                    while (resetOptimizedDepth < column) {
                        optimizedPath[++j] = requestedPath[resetOptimizedDepth++];
                    }
                    optimizedPath.length = offset + resetOptimizedDepth;
                    break;
                }
            }
            contextParent = contexts[column - 1];
            resolvePath:
                do {
                    for (; column < length; ++column) {
                        key = path[column];
                        isKeySet = false;
                        if (key != null && typeof key === 'object') {
                            isKeySet = true;
                            if (Array.isArray(key)) {
                                key = key[key.index || (key.index = 0)];
                                if (key != null && typeof key === 'object') {
                                    key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            } else {
                                key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        }
                        requestedPath[requestedPath.length = column] = key;
                        if (key != null && key !== __NULL) {
                            jsonDepth = column;
                            isKeySet = true;
                            !!jsonCache && isKeySet === true && (jsonKeys[jsonDepth] = key);
                            optimizedPath[optimizedPath.length = column + offset] = key;
                            context = contextParent[key];
                            if (context != null) {
                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                    contextInvalidated = context != null && context[__INVALIDATED];
                                    if (contextInvalidated === true === false) {
                                        context.__invalidated = true;
                                        context[$EXPIRES] = 0;
                                        expired[++expiredLength] = context;
                                        if (context != null && typeof context === 'object') {
                                            head = root.__head;
                                            tail = root.__tail;
                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                            context === head && (root.__head = root.__next = head = next);
                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                            context.__next = context.__prev = undefined;
                                            head = tail = next = prev = undefined;
                                        }
                                    }
                                    context = undefined;
                                }
                            }
                            contextType = context != null && context[$TYPE];
                            contextValue = contextType === 'sentinel' ? context.value : context;
                            branchKeyTmp = key;
                            if ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue)) {
                                expandsCount = -1;
                                refsByCols[outermostColumn = column] = contextValue;
                                do {
                                    branchKeyTmp = key;
                                    if ((context = context.__context) !== undefined) {
                                        i = -1;
                                        refLen = contextValue.length;
                                        offset = refLen - column - 1;
                                        optimizedPath.length = refLen;
                                        while (++i < refLen) {
                                            optimizedPath[i] = contextValue[i];
                                        }
                                        if (context != null) {
                                            if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                contextInvalidated = context != null && context[__INVALIDATED];
                                                if (contextInvalidated === true === false) {
                                                    context.__invalidated = true;
                                                    context[$EXPIRES] = 0;
                                                    expired[++expiredLength] = context;
                                                    if (context != null && typeof context === 'object') {
                                                        head = root.__head;
                                                        tail = root.__tail;
                                                        (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                        (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                        context === head && (root.__head = root.__next = head = next);
                                                        context === tail && (root.__tail = root.__prev = tail = prev);
                                                        context.__next = context.__prev = undefined;
                                                        head = tail = next = prev = undefined;
                                                    }
                                                }
                                                context = undefined;
                                            }
                                        }
                                        contextType = context != null && context[$TYPE];
                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                        if (contextType === 'error') {
                                            expandsCount = 0;
                                            break resolvePath;
                                        } else if (context != null === false) {
                                            expandsCount = -1;
                                            break resolvePath;
                                        }
                                        contextParent = context;
                                    } else {
                                        refsByCols[outermostColumn = column] = contextValue;
                                        outermostLength = length;
                                        outermostPath = path;
                                        offset = 0;
                                        column = -1;
                                        path = contextValue;
                                        length = path.length - 1;
                                        contextParent = contextCache;
                                        while (++column < length) {
                                            if ((key = path[column]) == null) {
                                                continue;
                                            }
                                            optimizedPath[optimizedPath.length = column + offset] = key;
                                            context = contextParent[key];
                                            if (context != null) {
                                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                    contextInvalidated = context != null && context[__INVALIDATED];
                                                    if (contextInvalidated === true === false) {
                                                        context.__invalidated = true;
                                                        context[$EXPIRES] = 0;
                                                        expired[++expiredLength] = context;
                                                        if (context != null && typeof context === 'object') {
                                                            head = root.__head;
                                                            tail = root.__tail;
                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                            context === head && (root.__head = root.__next = head = next);
                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                            context.__next = context.__prev = undefined;
                                                            head = tail = next = prev = undefined;
                                                        }
                                                    }
                                                    context = undefined;
                                                }
                                            }
                                            contextType = context != null && context[$TYPE];
                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                            if (context === undefined) {
                                                i = -1;
                                                refLen = path.length;
                                                offset = refLen - column - 1;
                                                optimizedPath.length = refLen;
                                                while (++i < refLen) {
                                                    optimizedPath[i] = path[i];
                                                }
                                                break;
                                            } else if (!!contextType || Array.isArray(contextValue)) {
                                                break;
                                            }
                                            contextParent = context;
                                        }
                                        if (column === length) {
                                            if ((key = path[column]) != null) {
                                                optimizedPath[optimizedPath.length = column + offset] = key;
                                                context = contextParent[key];
                                                if (context != null) {
                                                    if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                        contextInvalidated = context != null && context[__INVALIDATED];
                                                        if (contextInvalidated === true === false) {
                                                            context.__invalidated = true;
                                                            context[$EXPIRES] = 0;
                                                            expired[++expiredLength] = context;
                                                            if (context != null && typeof context === 'object') {
                                                                head = root.__head;
                                                                tail = root.__tail;
                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                context === head && (root.__head = root.__next = head = next);
                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                context.__next = context.__prev = undefined;
                                                                head = tail = next = prev = undefined;
                                                            }
                                                        }
                                                        context = undefined;
                                                    }
                                                }
                                                contextType = context != null && context[$TYPE];
                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                            }
                                            if (context != null) {
                                                if ((refContainer = path[__CONTAINER] || path).__context === undefined) {
                                                    backRefs = context.__refsLength || 0;
                                                    context['__ref' + backRefs] = refContainer;
                                                    context.__refsLength = backRefs + 1;
                                                    refContainer.__refIndex = backRefs;
                                                    refContainer.__context = context;
                                                    refContainer = backRefs = undefined;
                                                }
                                            }
                                        }
                                        expandsCount = Number(contextType === 'error') - 1;
                                        column = outermostColumn;
                                        path = outermostPath;
                                        offset = length - column;
                                        length = outermostLength;
                                        key = branchKeyTmp;
                                        outermostColumn = undefined;
                                        outermostPath = undefined;
                                        outermostLength = undefined;
                                        branchKeyTmp = undefined;
                                    }
                                } while ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue));
                            }
                            key = branchKeyTmp;
                            if (!!(contextType === 'error') || context != null === false) {
                                break resolvePath;
                            }
                            contexts[column] = contextParent = context;
                            if (!!jsonCache && isKeySet === true) {
                                do {
                                    jsonKey = jsonKeys[jsonDepth];
                                } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                                if (jsonKey != null && jsonKey !== __NULL) {
                                    json = jsons[jsonDepth - 1] || jsonCache;
                                } else {
                                    json = jsonCache;
                                }
                                if (jsonKey != null && jsonKey !== __NULL) {
                                    json = json[jsonKey] || (json[jsonKey] = {});
                                    json[__KEY] = jsonKey;
                                    json[__GENERATION] = context[__GENERATION] || 0;
                                }
                                jsons[jsonDepth] = json;
                                jsonDepth += 1;
                            }
                        }
                    }
                    if (column === length) {
                        key = path[column];
                        isKeySet = false;
                        if (key != null && typeof key === 'object') {
                            isKeySet = true;
                            if (Array.isArray(key)) {
                                key = key[key.index || (key.index = 0)];
                                if (key != null && typeof key === 'object') {
                                    key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            } else {
                                key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        }
                        requestedPath[requestedPath.length = column] = key;
                        if (key != null && key !== __NULL) {
                            jsonDepth = column;
                            isKeySet = true;
                            !!jsonCache && isKeySet === true && (jsonKeys[jsonDepth] = key);
                            optimizedPath[optimizedPath.length = column + offset] = key;
                            context = contextParent[key];
                            if (context != null) {
                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                    contextInvalidated = context != null && context[__INVALIDATED];
                                    if (contextInvalidated === true === false) {
                                        context.__invalidated = true;
                                        context[$EXPIRES] = 0;
                                        expired[++expiredLength] = context;
                                        if (context != null && typeof context === 'object') {
                                            head = root.__head;
                                            tail = root.__tail;
                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                            context === head && (root.__head = root.__next = head = next);
                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                            context.__next = context.__prev = undefined;
                                            head = tail = next = prev = undefined;
                                        }
                                    }
                                    context = undefined;
                                }
                            }
                            contextType = context != null && context[$TYPE];
                            contextValue = contextType === 'sentinel' ? context.value : context;
                        }
                    }
                    break resolvePath;
                } while (true);
            if (context != null) {
                if (context != null && typeof context === 'object' && contextExpires !== 1) {
                    head = root.__head;
                    tail = root.__tail;
                    next = context.__next, prev = context.__prev;
                    if (context !== head) {
                        next && (next != null && typeof next === 'object') && (next.__prev = prev);
                        prev && (prev != null && typeof prev === 'object') && (prev.__next = next);
                        (next = head) && (head != null && typeof head === 'object') && (head.__prev = context);
                        root.__head = root.__next = head = context;
                        head.__next = next;
                        head.__prev = undefined;
                    }
                    if (tail == null || context === tail) {
                        root.__tail = root.__prev = tail = prev || context;
                    }
                    head = tail = next = prev = undefined;
                }
                if (contextType === 'error') {
                    if (expandsCount > -1) {
                        requestedPath[requestedPath.length] = null;
                    }
                    contextValue = context;
                }
            }
            if (context == null || refreshing === true) {
                src = optimizedPath;
                dest = new Array(n = src.length);
                i = -1;
                while (++i < n) {
                    dest[i] = src[i];
                }
                opt = dest;
                src = optimizedBoundPath;
                dest = new Array(n = src.length);
                i = -1;
                while (++i < n) {
                    dest[i] = src[i];
                }
                req = dest;
                reqLen = n;
                i = -1;
                n = requestedPath.length;
                while (++i < n) {
                    key = path[i];
                    key2 = requestedPath[i];
                    req[reqLen + i] = key && typeof key === 'object' && [key2] || key2;
                }
                if (column < length) {
                    j = column + 1;
                    k = length + 1;
                    reqLen = req.length;
                    optLen = opt.length;
                    i = -1;
                    n = k - j;
                    while (++i < n) {
                        req[reqLen + i] = opt[optLen + i] = path[j + i];
                    }
                }
                req.pathSetIndex = index;
                requestedMissingPaths[requestedMissingPaths.length] = req;
                optimizedMissingPaths[optimizedMissingPaths.length] = opt;
            } else if (contextValue !== undefined || boxed === true) {
                src = optimizedPath;
                dest = new Array(n = src.length);
                i = -1;
                while (++i < n) {
                    dest[i] = src[i];
                }
                opt = dest;
                src = requestedPath;
                dest = new Array(n = src.length);
                i = -1;
                while (++i < n) {
                    dest[i] = src[i];
                }
                req = dest;
                requestedPaths[requestedPaths.length] = req;
                optimizedPaths[optimizedPaths.length] = opt;
                if (!!jsonCache) {
                    hasValues = true;
                    if (contextType === 'error') {
                        if (err === undefined) {
                            if (boxed === true) {
                                err = context;
                            } else {
                                dest = {};
                                src = context;
                                keys = Object.keys(src);
                                i = -1;
                                n = keys.length;
                                while (++i < n) {
                                    x = keys[i];
                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                                }
                                err = dest;
                            }
                            val = !!includeErrors && err || undefined;
                        }
                        errors[errors.length] = {
                            path: req,
                            value: err
                        };
                        err = undefined;
                    } else {
                        if (boxed === true) {
                            val = context;
                        } else if (contextValue != null && typeof contextValue === 'object') {
                            if (Array.isArray(contextValue)) {
                                src = contextValue;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                val = dest;
                            } else {
                                dest = {};
                                src = contextValue;
                                keys = Object.keys(src);
                                i = -1;
                                n = keys.length;
                                while (++i < n) {
                                    x = keys[i];
                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                                }
                                val = dest;
                            }
                        } else {
                            val = contextValue;
                        }
                    }
                    do {
                        jsonKey = jsonKeys[jsonDepth];
                    } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                    if (jsonKey != null && jsonKey !== __NULL) {
                        json = jsons[jsonDepth - 1] || jsonCache;
                    } else {
                        json = jsonCache;
                    }
                    if (jsonKey != null && jsonKey !== __NULL) {
                        json[jsonKey] = val;
                    } else {
                        json = jsons[jsonDepth] = val;
                    }
                    if (!boxed && !!val && typeof val === 'object' && !Array.isArray(val)) {
                        val[$TYPE] = 'leaf';
                    }
                }
            }
            for (; column > -1; --column) {
                key = path[column];
                if (key == null || typeof key !== 'object') {
                    continue;
                }
                isKeySet = true;
                if (Array.isArray(key)) {
                    jsonDepth -= Number(jsonDepth > 0);
                    if (++key.index === key.length) {
                        key = key[key.index = 0];
                        if (key == null || typeof key !== 'object') {
                            continue;
                        }
                    } else {
                        break;
                    }
                }
                if (++key[__OFFSET] > (key.to || (key.to = key.from + (key.length || 1) - 1))) {
                    key[__OFFSET] = key.from;
                    continue;
                }
                jsonDepth -= Number(jsonDepth > 0);
                break;
            }
        }
        path.column = column;
    }
    json = jsons[-1];
    if (!!values) {
        values[0] = hasValues && { json: json } || undefined;
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function getPathsAsValues() {
    var returnBlocker;
    var generation, model, state, values, errorSelector, onNext, errors, boxed, includeErrors, refreshing, connected, root, contextCache, context, expired, expiredLength, boundPath, optimizedBoundPath, column, offset, jsonDepth, boundPathValue, contexts, requested, optimized, requestedPaths, optimizedPaths, requestedMissingPaths, optimizedMissingPaths, requestedPath, optimizedPath, paths, pbv, contextParent, index, count, refsByCols, pathSet, value, path, length, resetOptimizedDepth, reference, i, j, n, isKeySet, key, contextExpires, contextInvalidated, head, tail, next, prev, contextType, contextValue, branchKeyTmp, expandsCount, outermostColumn, refLen, outermostLength, outermostPath, refContainer, backRefs, src, dest, opt, req, reqLen, key2, k, optLen, err, keys, x, val;
    generation = __GENERATION_GENERATION++;
    model = arguments[0];
    state = arguments[1];
    values = arguments[2];
    errorSelector = arguments[3];
    if (typeof values === 'function') {
        onNext = values;
        values = undefined;
    }
    errors = state.errors || (state.errors = []);
    boxed = model._boxed;
    includeErrors = model._includeErrors;
    refreshing = model._refreshing;
    connected = model._connected;
    root = model._root;
    contextCache = context = model._cache;
    expired = root.expired;
    expiredLength = expired.length;
    boundPath = state.boundPath || model._path;
    optimizedBoundPath = [];
    column = state.column || (state.column = 0) - 1;
    offset = state.offset || (state.offset = 0);
    jsonDepth = state.jsonDepth || (state.jsonDepth = 0);
    boundPathValue = state.boundPathValue;
    contexts = state.contexts || (state.contexts = []);
    requested = state.requested || (state.requested = {});
    optimized = state.optimized || (state.optimized = {});
    requestedPaths = state.requestedPaths || (state.requestedPaths = []);
    optimizedPaths = state.optimizedPaths || (state.optimizedPaths = []);
    requestedMissingPaths = state.requestedMissingPaths || (state.requestedMissingPaths = []);
    optimizedMissingPaths = state.optimizedMissingPaths || (state.optimizedMissingPaths = []);
    requestedPath = state.requestedPath || (state.requestedPath = []);
    optimizedPath = state.optimizedPath || (state.optimizedPath = []);
    paths = state;
    pbv = state.pbv || (state.pbv = {});
    pbv.path = requestedPath;
    !!values && (values.length = 0);
    optimizedBoundPath = boundPath;
    if (contextParent == null && (contextParent = model.__context) == null) {
        if (boundPath.length === 0) {
            contextParent = contextCache;
        } else {
            if (boundPathValue == null) {
                boundPathValue = getContextSync.call(model);
            }
            optimizedBoundPath = boundPathValue.path;
            if ((contextParent = boundPathValue.value) == null) {
                contextParent = {};
            }
            boundPathValue.requested = [];
            boundPathValue.optimized = [];
            state.boundPathValue = boundPathValue;
        }
    }
    contexts[-1] = context = contextParent;
    index = paths.index || (paths.index = 0);
    count = paths.length;
    for (; index < count; ++index) {
        pathSet = paths[index];
        offset = 0;
        refsByCols = state.refsByCols = [];
        refsByCols[-1] = optimizedBoundPath;
        if (Array.isArray(pathSet)) {
            value = undefined;
            path = pathSet;
        } else {
            value = pathSet.value;
            path = pathSet.path;
        }
        length = path.length - 1;
        column = path.column || (path.column = 0);
        while (column > -1) {
            resetOptimizedDepth = column;
            while (--resetOptimizedDepth >= -1) {
                if (!!(reference = refsByCols[resetOptimizedDepth])) {
                    i = j = -1;
                    n = reference.length;
                    offset = n - ++resetOptimizedDepth;
                    while (++i < n) {
                        optimizedPath[++j] = reference[i];
                    }
                    while (resetOptimizedDepth < column) {
                        optimizedPath[++j] = requestedPath[resetOptimizedDepth++];
                    }
                    optimizedPath.length = offset + resetOptimizedDepth;
                    break;
                }
            }
            contextParent = contexts[column - 1];
            resolvePath:
                do {
                    for (; column < length; ++column) {
                        key = path[column];
                        isKeySet = false;
                        if (key != null && typeof key === 'object') {
                            isKeySet = true;
                            if (Array.isArray(key)) {
                                key = key[key.index || (key.index = 0)];
                                if (key != null && typeof key === 'object') {
                                    key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            } else {
                                key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        }
                        requestedPath[requestedPath.length = column] = key;
                        if (key != null && key !== __NULL) {
                            optimizedPath[optimizedPath.length = column + offset] = key;
                            context = contextParent[key];
                            if (context != null) {
                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                    contextInvalidated = context != null && context[__INVALIDATED];
                                    if (contextInvalidated === true === false) {
                                        context.__invalidated = true;
                                        context[$EXPIRES] = 0;
                                        expired[++expiredLength] = context;
                                        if (context != null && typeof context === 'object') {
                                            head = root.__head;
                                            tail = root.__tail;
                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                            context === head && (root.__head = root.__next = head = next);
                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                            context.__next = context.__prev = undefined;
                                            head = tail = next = prev = undefined;
                                        }
                                    }
                                    context = undefined;
                                }
                            }
                            contextType = context != null && context[$TYPE];
                            contextValue = contextType === 'sentinel' ? context.value : context;
                            branchKeyTmp = key;
                            if ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue)) {
                                expandsCount = -1;
                                refsByCols[outermostColumn = column] = contextValue;
                                do {
                                    branchKeyTmp = key;
                                    if ((context = context.__context) !== undefined) {
                                        i = -1;
                                        refLen = contextValue.length;
                                        offset = refLen - column - 1;
                                        optimizedPath.length = refLen;
                                        while (++i < refLen) {
                                            optimizedPath[i] = contextValue[i];
                                        }
                                        if (context != null) {
                                            if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                contextInvalidated = context != null && context[__INVALIDATED];
                                                if (contextInvalidated === true === false) {
                                                    context.__invalidated = true;
                                                    context[$EXPIRES] = 0;
                                                    expired[++expiredLength] = context;
                                                    if (context != null && typeof context === 'object') {
                                                        head = root.__head;
                                                        tail = root.__tail;
                                                        (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                        (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                        context === head && (root.__head = root.__next = head = next);
                                                        context === tail && (root.__tail = root.__prev = tail = prev);
                                                        context.__next = context.__prev = undefined;
                                                        head = tail = next = prev = undefined;
                                                    }
                                                }
                                                context = undefined;
                                            }
                                        }
                                        contextType = context != null && context[$TYPE];
                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                        if (contextType === 'error') {
                                            expandsCount = 0;
                                            break resolvePath;
                                        } else if (context != null === false) {
                                            expandsCount = -1;
                                            break resolvePath;
                                        }
                                        contextParent = context;
                                    } else {
                                        refsByCols[outermostColumn = column] = contextValue;
                                        outermostLength = length;
                                        outermostPath = path;
                                        offset = 0;
                                        column = -1;
                                        path = contextValue;
                                        length = path.length - 1;
                                        contextParent = contextCache;
                                        while (++column < length) {
                                            if ((key = path[column]) == null) {
                                                continue;
                                            }
                                            optimizedPath[optimizedPath.length = column + offset] = key;
                                            context = contextParent[key];
                                            if (context != null) {
                                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                    contextInvalidated = context != null && context[__INVALIDATED];
                                                    if (contextInvalidated === true === false) {
                                                        context.__invalidated = true;
                                                        context[$EXPIRES] = 0;
                                                        expired[++expiredLength] = context;
                                                        if (context != null && typeof context === 'object') {
                                                            head = root.__head;
                                                            tail = root.__tail;
                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                            context === head && (root.__head = root.__next = head = next);
                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                            context.__next = context.__prev = undefined;
                                                            head = tail = next = prev = undefined;
                                                        }
                                                    }
                                                    context = undefined;
                                                }
                                            }
                                            contextType = context != null && context[$TYPE];
                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                            if (context === undefined) {
                                                i = -1;
                                                refLen = path.length;
                                                offset = refLen - column - 1;
                                                optimizedPath.length = refLen;
                                                while (++i < refLen) {
                                                    optimizedPath[i] = path[i];
                                                }
                                                break;
                                            } else if (!!contextType || Array.isArray(contextValue)) {
                                                break;
                                            }
                                            contextParent = context;
                                        }
                                        if (column === length) {
                                            if ((key = path[column]) != null) {
                                                optimizedPath[optimizedPath.length = column + offset] = key;
                                                context = contextParent[key];
                                                if (context != null) {
                                                    if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                        contextInvalidated = context != null && context[__INVALIDATED];
                                                        if (contextInvalidated === true === false) {
                                                            context.__invalidated = true;
                                                            context[$EXPIRES] = 0;
                                                            expired[++expiredLength] = context;
                                                            if (context != null && typeof context === 'object') {
                                                                head = root.__head;
                                                                tail = root.__tail;
                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                context === head && (root.__head = root.__next = head = next);
                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                context.__next = context.__prev = undefined;
                                                                head = tail = next = prev = undefined;
                                                            }
                                                        }
                                                        context = undefined;
                                                    }
                                                }
                                                contextType = context != null && context[$TYPE];
                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                            }
                                            if (context != null) {
                                                if ((refContainer = path[__CONTAINER] || path).__context === undefined) {
                                                    backRefs = context.__refsLength || 0;
                                                    context['__ref' + backRefs] = refContainer;
                                                    context.__refsLength = backRefs + 1;
                                                    refContainer.__refIndex = backRefs;
                                                    refContainer.__context = context;
                                                    refContainer = backRefs = undefined;
                                                }
                                            }
                                        }
                                        expandsCount = Number(contextType === 'error') - 1;
                                        column = outermostColumn;
                                        path = outermostPath;
                                        offset = length - column;
                                        length = outermostLength;
                                        key = branchKeyTmp;
                                        outermostColumn = undefined;
                                        outermostPath = undefined;
                                        outermostLength = undefined;
                                        branchKeyTmp = undefined;
                                    }
                                } while ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue));
                            }
                            key = branchKeyTmp;
                            if (!!(contextType === 'error') || context != null === false) {
                                break resolvePath;
                            }
                            contexts[column] = contextParent = context;
                        }
                    }
                    if (column === length) {
                        key = path[column];
                        isKeySet = false;
                        if (key != null && typeof key === 'object') {
                            isKeySet = true;
                            if (Array.isArray(key)) {
                                key = key[key.index || (key.index = 0)];
                                if (key != null && typeof key === 'object') {
                                    key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            } else {
                                key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        }
                        requestedPath[requestedPath.length = column] = key;
                        if (key != null && key !== __NULL) {
                            optimizedPath[optimizedPath.length = column + offset] = key;
                            context = contextParent[key];
                            if (context != null) {
                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                    contextInvalidated = context != null && context[__INVALIDATED];
                                    if (contextInvalidated === true === false) {
                                        context.__invalidated = true;
                                        context[$EXPIRES] = 0;
                                        expired[++expiredLength] = context;
                                        if (context != null && typeof context === 'object') {
                                            head = root.__head;
                                            tail = root.__tail;
                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                            context === head && (root.__head = root.__next = head = next);
                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                            context.__next = context.__prev = undefined;
                                            head = tail = next = prev = undefined;
                                        }
                                    }
                                    context = undefined;
                                }
                            }
                            contextType = context != null && context[$TYPE];
                            contextValue = contextType === 'sentinel' ? context.value : context;
                        }
                    }
                    break resolvePath;
                } while (true);
            if (context != null) {
                if (context != null && typeof context === 'object' && contextExpires !== 1) {
                    head = root.__head;
                    tail = root.__tail;
                    next = context.__next, prev = context.__prev;
                    if (context !== head) {
                        next && (next != null && typeof next === 'object') && (next.__prev = prev);
                        prev && (prev != null && typeof prev === 'object') && (prev.__next = next);
                        (next = head) && (head != null && typeof head === 'object') && (head.__prev = context);
                        root.__head = root.__next = head = context;
                        head.__next = next;
                        head.__prev = undefined;
                    }
                    if (tail == null || context === tail) {
                        root.__tail = root.__prev = tail = prev || context;
                    }
                    head = tail = next = prev = undefined;
                }
                if (contextType === 'error') {
                    if (expandsCount > -1) {
                        requestedPath[requestedPath.length] = null;
                    }
                    contextValue = context;
                }
            }
            if (context == null || refreshing === true) {
                src = optimizedPath;
                dest = new Array(n = src.length);
                i = -1;
                while (++i < n) {
                    dest[i] = src[i];
                }
                opt = dest;
                src = optimizedBoundPath;
                dest = new Array(n = src.length);
                i = -1;
                while (++i < n) {
                    dest[i] = src[i];
                }
                req = dest;
                reqLen = n;
                i = -1;
                n = requestedPath.length;
                while (++i < n) {
                    key = path[i];
                    key2 = requestedPath[i];
                    req[reqLen + i] = key && typeof key === 'object' && [key2] || key2;
                }
                if (column < length) {
                    j = column + 1;
                    k = length + 1;
                    reqLen = req.length;
                    optLen = opt.length;
                    i = -1;
                    n = k - j;
                    while (++i < n) {
                        req[reqLen + i] = opt[optLen + i] = path[j + i];
                    }
                }
                req.pathSetIndex = index;
                requestedMissingPaths[requestedMissingPaths.length] = req;
                optimizedMissingPaths[optimizedMissingPaths.length] = opt;
            } else if (contextValue !== undefined || boxed === true) {
                src = optimizedPath;
                dest = new Array(n = src.length);
                i = -1;
                while (++i < n) {
                    dest[i] = src[i];
                }
                opt = dest;
                src = requestedPath;
                dest = new Array(n = src.length);
                i = -1;
                while (++i < n) {
                    dest[i] = src[i];
                }
                req = dest;
                requestedPaths[requestedPaths.length] = req;
                optimizedPaths[optimizedPaths.length] = opt;
                if (contextType === 'error') {
                    if (err === undefined) {
                        if (boxed === true) {
                            err = context;
                        } else {
                            dest = {};
                            src = context;
                            keys = Object.keys(src);
                            i = -1;
                            n = keys.length;
                            while (++i < n) {
                                x = keys[i];
                                !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                            }
                            err = dest;
                        }
                        val = !!includeErrors && err || undefined;
                    }
                    errors[errors.length] = {
                        path: req,
                        value: err
                    };
                    err = undefined;
                } else {
                    if (boxed === true) {
                        val = context;
                    } else if (contextValue != null && typeof contextValue === 'object') {
                        if (Array.isArray(contextValue)) {
                            src = contextValue;
                            dest = new Array(n = src.length);
                            i = -1;
                            while (++i < n) {
                                dest[i] = src[i];
                            }
                            val = dest;
                        } else {
                            dest = {};
                            src = contextValue;
                            keys = Object.keys(src);
                            i = -1;
                            n = keys.length;
                            while (++i < n) {
                                x = keys[i];
                                !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                            }
                            val = dest;
                        }
                    } else {
                        val = contextValue;
                    }
                }
                if (!(contextType === 'error')) {
                    pbv.value = val;
                    pbv.path = req;
                    dest = {};
                    src = pbv;
                    keys = Object.keys(src);
                    i = -1;
                    n = keys.length;
                    while (++i < n) {
                        x = keys[i];
                        !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                    }
                    val = dest;
                    if (!!onNext) {
                        onNext.call(model, val);
                    } else if (!!values) {
                        values[values.length] = val;
                    }
                }
            }
            for (; column > -1; --column) {
                key = path[column];
                if (key == null || typeof key !== 'object') {
                    continue;
                }
                isKeySet = true;
                if (Array.isArray(key)) {
                    jsonDepth -= Number(jsonDepth > 0);
                    if (++key.index === key.length) {
                        key = key[key.index = 0];
                        if (key == null || typeof key !== 'object') {
                            continue;
                        }
                    } else {
                        break;
                    }
                }
                if (++key[__OFFSET] > (key.to || (key.to = key.from + (key.length || 1) - 1))) {
                    key[__OFFSET] = key.from;
                    continue;
                }
                jsonDepth -= Number(jsonDepth > 0);
                break;
            }
        }
        path.column = column;
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setJSONAsJSON() {
    var returnBlocker;
    var generation, model, state, values, errorSelector, onNext, errors, boxed, includeErrors, refreshing, connected, root, contextCache, context, expired, expiredLength, boundPath, optimizedBoundPath, column, offset, jsonDepth, boundPathValue, contexts, requested, optimized, requestedPaths, optimizedPaths, requestedMissingPaths, optimizedMissingPaths, requestedPath, optimizedPath, pathMaps, messages, path, jsons, jsonKeys, contextParent, index, count, hasValues, jsonCache, json, refsByCols, length, message, pathSet, keys, key, isKeySet, isBranch, resetOptimizedDepth, reference, i, j, n, messageParent, contextExpires, contextInvalidated, head, tail, next, prev, contextType, contextValue, branchKeyTmp, expandsCount, outermostColumn, refLen, outermostLength, outermostPath, sizeOffset, messageSize, contextRefsLength, messageRefsLength, contextLeafStack, contextLeafDepth, keyTmp, contextTmp, contextParentTmp, contextTypeTmp, referenceContext, contextLeaves, contextLeafKeys, contextLeafKey, refContainer, backRefs, jsonKey, contextTimestamp, messageType, messageValue, messageTimestamp, messageExpires, originalMessageSize, contextSize, contextTmp2, generationStack, generationDepth, generationReferences, k, src, dest, opt, req, reqLen, key2, optLen, err, x, val, jsonLength;
    generation = __GENERATION_GENERATION++;
    model = arguments[0];
    state = arguments[1];
    values = arguments[2];
    errorSelector = arguments[3];
    if (typeof values === 'function') {
        onNext = values;
        values = undefined;
    }
    errors = state.errors || (state.errors = []);
    boxed = model._boxed;
    includeErrors = model._includeErrors;
    refreshing = model._refreshing;
    connected = model._connected;
    root = model._root;
    contextCache = context = model._cache;
    expired = root.expired;
    expiredLength = expired.length;
    boundPath = state.boundPath || model._path;
    optimizedBoundPath = [];
    column = state.column || (state.column = 0) - 1;
    offset = state.offset || (state.offset = 0);
    jsonDepth = state.jsonDepth || (state.jsonDepth = 0);
    boundPathValue = state.boundPathValue;
    contexts = state.contexts || (state.contexts = []);
    requested = state.requested || (state.requested = {});
    optimized = state.optimized || (state.optimized = {});
    requestedPaths = state.requestedPaths || (state.requestedPaths = []);
    optimizedPaths = state.optimizedPaths || (state.optimizedPaths = []);
    requestedMissingPaths = state.requestedMissingPaths || (state.requestedMissingPaths = []);
    optimizedMissingPaths = state.optimizedMissingPaths || (state.optimizedMissingPaths = []);
    requestedPath = state.requestedPath || (state.requestedPath = []);
    optimizedPath = state.optimizedPath || (state.optimizedPath = []);
    pathMaps = state;
    messages = state.messages || (state.messages = []);
    path = [];
    jsons = state.jsons || (state.jsons = []);
    jsonKeys = state.jsonKeys || (state.jsonKeys = []);
    optimizedBoundPath = boundPath;
    if (contextParent == null && (contextParent = model.__context) == null) {
        if (boundPath.length === 0) {
            contextParent = contextCache;
        } else {
            if (boundPathValue == null) {
                boundPathValue = getContextSync.call(model);
            }
            optimizedBoundPath = boundPathValue.path;
            if ((contextParent = boundPathValue.value) == null) {
                contextParent = {};
            }
            boundPathValue.requested = [];
            boundPathValue.optimized = [];
            state.boundPathValue = boundPathValue;
        }
    }
    contexts[-1] = context = contextParent;
    index = pathMaps.index || (pathMaps.index = 0);
    count = pathMaps.length;
    for (; index < count; ++index) {
        pathSet = pathMaps[index];
        hasValues = false;
        jsonDepth = jsonKeys.length = 0;
        jsonCache = json = jsons[-1] = !!values && values[index] || undefined;
        offset = 0;
        refsByCols = state.refsByCols = [];
        refsByCols[-1] = optimizedBoundPath;
        path.length = 0;
        column = 0;
        length = 0;
        messages[-1] = message = pathSet;
        while (length > -1) {
            if (!!message) {
                keys = message[__KEYS] || (message[__KEYS] = Object.keys(message));
                keys[__OFFSET] || (keys[__OFFSET] = 0);
                if (keys.length === 0) {
                    length -= 1;
                    message = messages[length - 1];
                    keys = message[__KEYS];
                    keys[__OFFSET] -= 1;
                }
                if ((key = keys[++keys[__OFFSET] - 1]) !== undefined) {
                    key === __NULL && (key = null);
                    if (key == null || !(!(key[0] !== '_' || key[1] !== '_') || (key === __SELF || key === __PARENT || key === __ROOT) || key[0] === '$')) {
                        isKeySet = message[__IS_KEY_SET] = keys.length > 1;
                        path[length] = isKeySet && [key] || key;
                        message = messages[length] = message[key];
                        isBranch = !!message && typeof message === 'object' && !message[$TYPE] && !Array.isArray(message) && !(message[__KEYS] && message[__KEYS].length);
                        if (isBranch) {
                            length += 1;
                            continue;
                        } else {
                            resetOptimizedDepth = column;
                            while (--resetOptimizedDepth >= -1) {
                                if (!!(reference = refsByCols[resetOptimizedDepth])) {
                                    i = j = -1;
                                    n = reference.length;
                                    offset = n - ++resetOptimizedDepth;
                                    while (++i < n) {
                                        optimizedPath[++j] = reference[i];
                                    }
                                    while (resetOptimizedDepth < column) {
                                        optimizedPath[++j] = requestedPath[resetOptimizedDepth++];
                                    }
                                    optimizedPath.length = offset + resetOptimizedDepth;
                                    break;
                                }
                            }
                            contextParent = context = contexts[column - 1];
                            messageParent = message = messages[column - 1];
                            contextParent = contexts[column - 1];
                            resolvePath:
                                do {
                                    for (; column < length; ++column) {
                                        key = path[column];
                                        messageParent = messages[column - 1];
                                        message = messages[column];
                                        isKeySet = messageParent[__IS_KEY_SET];
                                        key = isKeySet ? key[0] : key;
                                        requestedPath[requestedPath.length = column] = key;
                                        if (key != null && key !== __NULL) {
                                            !!jsonCache && isKeySet === true && (jsonKeys[jsonDepth] = key);
                                            optimizedPath[optimizedPath.length = column + offset] = key;
                                            context = contextParent[key];
                                            if (context != null) {
                                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                    contextInvalidated = context != null && context[__INVALIDATED];
                                                    if (contextInvalidated === true === false) {
                                                        context.__invalidated = true;
                                                        context[$EXPIRES] = 0;
                                                        expired[++expiredLength] = context;
                                                        if (context != null && typeof context === 'object') {
                                                            head = root.__head;
                                                            tail = root.__tail;
                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                            context === head && (root.__head = root.__next = head = next);
                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                            context.__next = context.__prev = undefined;
                                                            head = tail = next = prev = undefined;
                                                        }
                                                    }
                                                    context = undefined;
                                                }
                                            }
                                            contextType = context != null && context[$TYPE];
                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                            branchKeyTmp = key;
                                            if ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue)) {
                                                expandsCount = -1;
                                                refsByCols[outermostColumn = column] = contextValue;
                                                do {
                                                    branchKeyTmp = key;
                                                    if ((context = context.__context) !== undefined) {
                                                        i = -1;
                                                        refLen = contextValue.length;
                                                        offset = refLen - column - 1;
                                                        optimizedPath.length = refLen;
                                                        while (++i < refLen) {
                                                            optimizedPath[i] = contextValue[i];
                                                        }
                                                        if (context != null) {
                                                            if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                                contextInvalidated = context != null && context[__INVALIDATED];
                                                                if (contextInvalidated === true === false) {
                                                                    context.__invalidated = true;
                                                                    context[$EXPIRES] = 0;
                                                                    expired[++expiredLength] = context;
                                                                    if (context != null && typeof context === 'object') {
                                                                        head = root.__head;
                                                                        tail = root.__tail;
                                                                        (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                        (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                        context === head && (root.__head = root.__next = head = next);
                                                                        context === tail && (root.__tail = root.__prev = tail = prev);
                                                                        context.__next = context.__prev = undefined;
                                                                        head = tail = next = prev = undefined;
                                                                    }
                                                                }
                                                                context = undefined;
                                                            }
                                                        }
                                                        contextType = context != null && context[$TYPE];
                                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                                        if (contextType === 'error') {
                                                            expandsCount = 0;
                                                            break resolvePath;
                                                        } else if (context != null === false) {
                                                            expandsCount = -1;
                                                            break resolvePath;
                                                        }
                                                        contextParent = context;
                                                    } else {
                                                        refsByCols[outermostColumn = column] = contextValue;
                                                        outermostLength = length;
                                                        outermostPath = path;
                                                        offset = 0;
                                                        column = -1;
                                                        path = contextValue;
                                                        length = path.length - 1;
                                                        contextParent = contextCache;
                                                        while (++column < length) {
                                                            if ((key = path[column]) == null) {
                                                                continue;
                                                            }
                                                            optimizedPath[optimizedPath.length = column + offset] = key;
                                                            context = contextParent[key];
                                                            if (context != null) {
                                                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                                    contextInvalidated = context != null && context[__INVALIDATED];
                                                                    if (contextInvalidated === true === false) {
                                                                        context.__invalidated = true;
                                                                        context[$EXPIRES] = 0;
                                                                        expired[++expiredLength] = context;
                                                                        if (context != null && typeof context === 'object') {
                                                                            head = root.__head;
                                                                            tail = root.__tail;
                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                            context === head && (root.__head = root.__next = head = next);
                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                            context.__next = context.__prev = undefined;
                                                                            head = tail = next = prev = undefined;
                                                                        }
                                                                    }
                                                                    context = undefined;
                                                                }
                                                            }
                                                            contextType = context != null && context[$TYPE];
                                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                                            if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                sizeOffset = 0;
                                                                message = {};
                                                                messageSize = message != null && message[$SIZE] || 0;
                                                                do {
                                                                    if (key != null && key !== __NULL) {
                                                                        if (context != null && context !== message) {
                                                                            contextRefsLength = context.__refsLength || 0;
                                                                            messageRefsLength = message.__refsLength || 0;
                                                                            i = -1;
                                                                            while (++i < contextRefsLength) {
                                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                                    reference[__CONTEXT] = message;
                                                                                    message[__REF + (messageRefsLength + i)] = reference;
                                                                                    context[__REF + i] = undefined;
                                                                                }
                                                                            }
                                                                            message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                                            context[__REFS_LENGTH] = reference = undefined;
                                                                            contextLeafStack = [];
                                                                            contextLeafDepth = 0;
                                                                            keyTmp = key;
                                                                            contextTmp = context;
                                                                            contextParentTmp = contextParent;
                                                                            contextTypeTmp = contextType;
                                                                            recursing:
                                                                                while (contextLeafDepth > -1) {
                                                                                    if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                                                                        contextRefsLength = context.__refsLength || 0;
                                                                                        i = -1;
                                                                                        while (++i < contextRefsLength) {
                                                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                                                reference.__context = undefined;
                                                                                                context[__REF + i] = undefined;
                                                                                            }
                                                                                        }
                                                                                        context.__refsLength = undefined;
                                                                                        contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                                        if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                            i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                            n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                            while (++i <= n) {
                                                                                                referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                            }
                                                                                            referenceContext[__REFS_LENGTH] = n;
                                                                                            contextValue[__REF_INDEX] = undefined;
                                                                                            contextValue[__CONTEXT] = undefined;
                                                                                            referenceContext = undefined;
                                                                                        }
                                                                                        if (context != null && typeof context === 'object') {
                                                                                            head = root.__head;
                                                                                            tail = root.__tail;
                                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                            context === head && (root.__head = root.__next = head = next);
                                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                            context.__next = context.__prev = undefined;
                                                                                            head = tail = next = prev = undefined;
                                                                                        }
                                                                                        context = contextParent;
                                                                                        contextParent = contextLeaves && contextLeaves.parent;
                                                                                        contextLeafStack[contextLeafDepth--] = undefined;
                                                                                        contextType = context != null && context[$TYPE];
                                                                                        continue;
                                                                                    }
                                                                                    if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                                        contextLeafKeys = Object.keys(context);
                                                                                        contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                                        contextLeaves.parent = contextParent;
                                                                                        i = -1;
                                                                                        n = contextLeafKeys.length;
                                                                                        while (++i < n) {
                                                                                            if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                                contextLeaves[i] = context[contextLeafKey];
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    contextParent = context;
                                                                                    if (context = contextLeaves.pop()) {
                                                                                        contextLeafDepth++;
                                                                                        contextType = context != null && context[$TYPE];
                                                                                    } else {
                                                                                        contextType = 'leaf';
                                                                                        context = contextParent;
                                                                                        contextParent = contextLeaves.parent;
                                                                                    }
                                                                                    continue;
                                                                                }
                                                                            key = keyTmp;
                                                                            context = contextTmp;
                                                                            contextParent = contextParentTmp;
                                                                            contextType = contextTypeTmp;
                                                                            contextTmp = contextTypeTmp = undefined;
                                                                            if (context != null && typeof context === 'object') {
                                                                                head = root.__head;
                                                                                tail = root.__tail;
                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                context.__next = context.__prev = undefined;
                                                                                head = tail = next = prev = undefined;
                                                                            }
                                                                        }
                                                                        message[$SIZE] = messageSize - sizeOffset;
                                                                        contextParent[key] = context = message;
                                                                        break;
                                                                    }
                                                                    context = contexts[--column];
                                                                    key = context[__KEY];
                                                                    contextParent = contexts[column - 1] || contextCache;
                                                                } while (column > -1);
                                                                context[__SELF] = context;
                                                                context[__KEY] = key;
                                                                context[__PARENT] = contextParent;
                                                                context[__ROOT] = contextCache;
                                                                if (context[__GENERATION] === undefined) {
                                                                    context[__GENERATION] = 0;
                                                                }
                                                                contextType = context != null && context[$TYPE];
                                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                            }
                                                            if (context === undefined) {
                                                                i = -1;
                                                                refLen = path.length;
                                                                offset = refLen - column - 1;
                                                                optimizedPath.length = refLen;
                                                                while (++i < refLen) {
                                                                    optimizedPath[i] = path[i];
                                                                }
                                                                break;
                                                            } else if (!!contextType || Array.isArray(contextValue)) {
                                                                break;
                                                            }
                                                            contextParent = context;
                                                        }
                                                        if (column === length) {
                                                            if ((key = path[column]) != null) {
                                                                optimizedPath[optimizedPath.length = column + offset] = key;
                                                                context = contextParent[key];
                                                                if (context != null) {
                                                                    if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                                        contextInvalidated = context != null && context[__INVALIDATED];
                                                                        if (contextInvalidated === true === false) {
                                                                            context.__invalidated = true;
                                                                            context[$EXPIRES] = 0;
                                                                            expired[++expiredLength] = context;
                                                                            if (context != null && typeof context === 'object') {
                                                                                head = root.__head;
                                                                                tail = root.__tail;
                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                context.__next = context.__prev = undefined;
                                                                                head = tail = next = prev = undefined;
                                                                            }
                                                                        }
                                                                        context = undefined;
                                                                    }
                                                                }
                                                                contextType = context != null && context[$TYPE];
                                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                                if ((!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) && !Array.isArray(contextValue)) {
                                                                    sizeOffset = 0;
                                                                    message = {};
                                                                    messageSize = message != null && message[$SIZE] || 0;
                                                                    do {
                                                                        if (key != null && key !== __NULL) {
                                                                            if (context != null && context !== message) {
                                                                                contextRefsLength = context.__refsLength || 0;
                                                                                messageRefsLength = message.__refsLength || 0;
                                                                                i = -1;
                                                                                while (++i < contextRefsLength) {
                                                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                                                        reference[__CONTEXT] = message;
                                                                                        message[__REF + (messageRefsLength + i)] = reference;
                                                                                        context[__REF + i] = undefined;
                                                                                    }
                                                                                }
                                                                                message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                                                context[__REFS_LENGTH] = reference = undefined;
                                                                                contextLeafStack = [];
                                                                                contextLeafDepth = 0;
                                                                                keyTmp = key;
                                                                                contextTmp = context;
                                                                                contextParentTmp = contextParent;
                                                                                contextTypeTmp = contextType;
                                                                                recursing:
                                                                                    while (contextLeafDepth > -1) {
                                                                                        if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                                                                            contextRefsLength = context.__refsLength || 0;
                                                                                            i = -1;
                                                                                            while (++i < contextRefsLength) {
                                                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                                                    reference.__context = undefined;
                                                                                                    context[__REF + i] = undefined;
                                                                                                }
                                                                                            }
                                                                                            context.__refsLength = undefined;
                                                                                            contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                                            if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                                i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                                n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                                while (++i <= n) {
                                                                                                    referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                                }
                                                                                                referenceContext[__REFS_LENGTH] = n;
                                                                                                contextValue[__REF_INDEX] = undefined;
                                                                                                contextValue[__CONTEXT] = undefined;
                                                                                                referenceContext = undefined;
                                                                                            }
                                                                                            if (context != null && typeof context === 'object') {
                                                                                                head = root.__head;
                                                                                                tail = root.__tail;
                                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                                context.__next = context.__prev = undefined;
                                                                                                head = tail = next = prev = undefined;
                                                                                            }
                                                                                            context = contextParent;
                                                                                            contextParent = contextLeaves && contextLeaves.parent;
                                                                                            contextLeafStack[contextLeafDepth--] = undefined;
                                                                                            contextType = context != null && context[$TYPE];
                                                                                            continue;
                                                                                        }
                                                                                        if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                                            contextLeafKeys = Object.keys(context);
                                                                                            contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                                            contextLeaves.parent = contextParent;
                                                                                            i = -1;
                                                                                            n = contextLeafKeys.length;
                                                                                            while (++i < n) {
                                                                                                if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                                    contextLeaves[i] = context[contextLeafKey];
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        contextParent = context;
                                                                                        if (context = contextLeaves.pop()) {
                                                                                            contextLeafDepth++;
                                                                                            contextType = context != null && context[$TYPE];
                                                                                        } else {
                                                                                            contextType = 'leaf';
                                                                                            context = contextParent;
                                                                                            contextParent = contextLeaves.parent;
                                                                                        }
                                                                                        continue;
                                                                                    }
                                                                                key = keyTmp;
                                                                                context = contextTmp;
                                                                                contextParent = contextParentTmp;
                                                                                contextType = contextTypeTmp;
                                                                                contextTmp = contextTypeTmp = undefined;
                                                                                if (context != null && typeof context === 'object') {
                                                                                    head = root.__head;
                                                                                    tail = root.__tail;
                                                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                    context === head && (root.__head = root.__next = head = next);
                                                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                    context.__next = context.__prev = undefined;
                                                                                    head = tail = next = prev = undefined;
                                                                                }
                                                                            }
                                                                            message[$SIZE] = messageSize - sizeOffset;
                                                                            contextParent[key] = context = message;
                                                                            break;
                                                                        }
                                                                        context = contexts[--column];
                                                                        key = context[__KEY];
                                                                        contextParent = contexts[column - 1] || contextCache;
                                                                    } while (column > -1);
                                                                    context[__SELF] = context;
                                                                    context[__KEY] = key;
                                                                    context[__PARENT] = contextParent;
                                                                    context[__ROOT] = contextCache;
                                                                    if (context[__GENERATION] === undefined) {
                                                                        context[__GENERATION] = 0;
                                                                    }
                                                                    contextType = context != null && context[$TYPE];
                                                                    contextValue = contextType === 'sentinel' ? context.value : context;
                                                                }
                                                            }
                                                            if (context != null) {
                                                                if ((refContainer = path[__CONTAINER] || path).__context === undefined) {
                                                                    backRefs = context.__refsLength || 0;
                                                                    context['__ref' + backRefs] = refContainer;
                                                                    context.__refsLength = backRefs + 1;
                                                                    refContainer.__refIndex = backRefs;
                                                                    refContainer.__context = context;
                                                                    refContainer = backRefs = undefined;
                                                                }
                                                            }
                                                        }
                                                        expandsCount = Number(contextType === 'error') - 1;
                                                        column = outermostColumn;
                                                        path = outermostPath;
                                                        offset = length - column;
                                                        length = outermostLength;
                                                        key = branchKeyTmp;
                                                        outermostColumn = undefined;
                                                        outermostPath = undefined;
                                                        outermostLength = undefined;
                                                        branchKeyTmp = undefined;
                                                    }
                                                } while ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue));
                                            } else if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                sizeOffset = 0;
                                                message = {};
                                                messageSize = message != null && message[$SIZE] || 0;
                                                do {
                                                    if (key != null && key !== __NULL) {
                                                        if (context != null && context !== message) {
                                                            contextRefsLength = context.__refsLength || 0;
                                                            messageRefsLength = message.__refsLength || 0;
                                                            i = -1;
                                                            while (++i < contextRefsLength) {
                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                    reference[__CONTEXT] = message;
                                                                    message[__REF + (messageRefsLength + i)] = reference;
                                                                    context[__REF + i] = undefined;
                                                                }
                                                            }
                                                            message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                            context[__REFS_LENGTH] = reference = undefined;
                                                            contextLeafStack = [];
                                                            contextLeafDepth = 0;
                                                            keyTmp = key;
                                                            contextTmp = context;
                                                            contextParentTmp = contextParent;
                                                            contextTypeTmp = contextType;
                                                            recursing:
                                                                while (contextLeafDepth > -1) {
                                                                    if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                                                        contextRefsLength = context.__refsLength || 0;
                                                                        i = -1;
                                                                        while (++i < contextRefsLength) {
                                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                                reference.__context = undefined;
                                                                                context[__REF + i] = undefined;
                                                                            }
                                                                        }
                                                                        context.__refsLength = undefined;
                                                                        contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                        if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                            i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                            n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                            while (++i <= n) {
                                                                                referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                            }
                                                                            referenceContext[__REFS_LENGTH] = n;
                                                                            contextValue[__REF_INDEX] = undefined;
                                                                            contextValue[__CONTEXT] = undefined;
                                                                            referenceContext = undefined;
                                                                        }
                                                                        if (context != null && typeof context === 'object') {
                                                                            head = root.__head;
                                                                            tail = root.__tail;
                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                            context === head && (root.__head = root.__next = head = next);
                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                            context.__next = context.__prev = undefined;
                                                                            head = tail = next = prev = undefined;
                                                                        }
                                                                        context = contextParent;
                                                                        contextParent = contextLeaves && contextLeaves.parent;
                                                                        contextLeafStack[contextLeafDepth--] = undefined;
                                                                        contextType = context != null && context[$TYPE];
                                                                        continue;
                                                                    }
                                                                    if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                        contextLeafKeys = Object.keys(context);
                                                                        contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                        contextLeaves.parent = contextParent;
                                                                        i = -1;
                                                                        n = contextLeafKeys.length;
                                                                        while (++i < n) {
                                                                            if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                contextLeaves[i] = context[contextLeafKey];
                                                                            }
                                                                        }
                                                                    }
                                                                    contextParent = context;
                                                                    if (context = contextLeaves.pop()) {
                                                                        contextLeafDepth++;
                                                                        contextType = context != null && context[$TYPE];
                                                                    } else {
                                                                        contextType = 'leaf';
                                                                        context = contextParent;
                                                                        contextParent = contextLeaves.parent;
                                                                    }
                                                                    continue;
                                                                }
                                                            key = keyTmp;
                                                            context = contextTmp;
                                                            contextParent = contextParentTmp;
                                                            contextType = contextTypeTmp;
                                                            contextTmp = contextTypeTmp = undefined;
                                                            if (context != null && typeof context === 'object') {
                                                                head = root.__head;
                                                                tail = root.__tail;
                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                context === head && (root.__head = root.__next = head = next);
                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                context.__next = context.__prev = undefined;
                                                                head = tail = next = prev = undefined;
                                                            }
                                                        }
                                                        message[$SIZE] = messageSize - sizeOffset;
                                                        contextParent[key] = context = message;
                                                        break;
                                                    }
                                                    context = contexts[--column];
                                                    key = context[__KEY];
                                                    contextParent = contexts[column - 1] || contextCache;
                                                } while (column > -1);
                                                context[__SELF] = context;
                                                context[__KEY] = key;
                                                context[__PARENT] = contextParent;
                                                context[__ROOT] = contextCache;
                                                if (context[__GENERATION] === undefined) {
                                                    context[__GENERATION] = 0;
                                                }
                                                contextType = context != null && context[$TYPE];
                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                            }
                                            key = branchKeyTmp;
                                            contexts[column] = contextParent = context;
                                            if (!!jsonCache && isKeySet === true) {
                                                do {
                                                    jsonKey = jsonKeys[jsonDepth];
                                                } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                                                if (jsonKey != null && jsonKey !== __NULL) {
                                                    json = jsons[jsonDepth - 1] || jsonCache;
                                                } else {
                                                    json = jsonCache;
                                                }
                                                if (jsonKey != null && jsonKey !== __NULL) {
                                                    json = json[jsonKey] || (json[jsonKey] = {});
                                                }
                                                jsons[jsonDepth] = json;
                                                jsonDepth += 1;
                                            }
                                        }
                                    }
                                    if (column === length) {
                                        key = path[column];
                                        messageParent = messages[column - 1];
                                        message = messages[column];
                                        isKeySet = messageParent[__IS_KEY_SET];
                                        key = isKeySet ? key[0] : key;
                                        requestedPath[requestedPath.length = column] = key;
                                        if (key != null && key !== __NULL) {
                                            !!jsonCache && isKeySet === true && (jsonKeys[jsonDepth] = key);
                                            optimizedPath[optimizedPath.length = column + offset] = key;
                                            context = contextParent[key];
                                            if (context != null) {
                                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                    contextInvalidated = context != null && context[__INVALIDATED];
                                                    if (contextInvalidated === true === false) {
                                                        context.__invalidated = true;
                                                        context[$EXPIRES] = 0;
                                                        expired[++expiredLength] = context;
                                                        if (context != null && typeof context === 'object') {
                                                            head = root.__head;
                                                            tail = root.__tail;
                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                            context === head && (root.__head = root.__next = head = next);
                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                            context.__next = context.__prev = undefined;
                                                            head = tail = next = prev = undefined;
                                                        }
                                                    }
                                                    context = undefined;
                                                }
                                            }
                                            contextType = context != null && context[$TYPE];
                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                            contextTimestamp = context != null && context[$TIMESTAMP];
                                            messageType = message != null && message[$TYPE];
                                            messageValue = messageType === 'sentinel' ? message.value : message;
                                            messageTimestamp = message != null && message[$TIMESTAMP];
                                            messageExpires = (message != null || null) && message[$EXPIRES];
                                            if ((messageTimestamp < contextTimestamp || messageExpires === 0 && ((context = message) || true)) === false === true) {
                                                messageSize = message != null && message[$SIZE] || 0;
                                                originalMessageSize = messageSize || 0;
                                                if ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) {
                                                    messageType = 'array';
                                                    originalMessageSize = messageValue.length || 1;
                                                    messageSize = (messageType === 'sentinel' && 50 || 0) + originalMessageSize;
                                                    messageValue[__CONTAINER] = message;
                                                } else if (messageType === 'sentinel') {
                                                    messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                } else if (messageType === 'error') {
                                                    if (typeof errorSelector === 'function') {
                                                        message = Enumerable.errorSelector(message);
                                                    }
                                                    messageSize = 50 + originalMessageSize;
                                                } else if (messageValue == null || typeof messageValue !== 'object') {
                                                    originalMessageSize = typeof messageValue === 'string' && messageValue.length || 1;
                                                    messageSize = 50 + originalMessageSize;
                                                    messageType = 'sentinel';
                                                    message = {
                                                        '$type': messageType,
                                                        'value': messageValue
                                                    };
                                                } else {
                                                    messageSize = message[$SIZE] || 50 * 2;
                                                    messageType = message[$TYPE] = messageType || 'leaf';
                                                }
                                                message[$SIZE] = sizeOffset = messageSize;
                                                if (!!((messageExpires = (message != null || null) && message[$EXPIRES]) != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < now())) === false) {
                                                    messageSize = message != null && message[$SIZE] || 0;
                                                    do {
                                                        if (key != null && key !== __NULL) {
                                                            if (context != null && context !== message) {
                                                                contextRefsLength = context.__refsLength || 0;
                                                                messageRefsLength = message.__refsLength || 0;
                                                                i = -1;
                                                                while (++i < contextRefsLength) {
                                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                                        reference[__CONTEXT] = message;
                                                                        message[__REF + (messageRefsLength + i)] = reference;
                                                                        context[__REF + i] = undefined;
                                                                    }
                                                                }
                                                                message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                                context[__REFS_LENGTH] = reference = undefined;
                                                                contextLeafStack = [];
                                                                contextLeafDepth = 0;
                                                                keyTmp = key;
                                                                contextTmp = context;
                                                                contextParentTmp = contextParent;
                                                                contextTypeTmp = contextType;
                                                                recursing:
                                                                    while (contextLeafDepth > -1) {
                                                                        if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                                                            contextRefsLength = context.__refsLength || 0;
                                                                            i = -1;
                                                                            while (++i < contextRefsLength) {
                                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                                    reference.__context = undefined;
                                                                                    context[__REF + i] = undefined;
                                                                                }
                                                                            }
                                                                            context.__refsLength = undefined;
                                                                            contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                            if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                while (++i <= n) {
                                                                                    referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                }
                                                                                referenceContext[__REFS_LENGTH] = n;
                                                                                contextValue[__REF_INDEX] = undefined;
                                                                                contextValue[__CONTEXT] = undefined;
                                                                                referenceContext = undefined;
                                                                            }
                                                                            if (context != null && typeof context === 'object') {
                                                                                head = root.__head;
                                                                                tail = root.__tail;
                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                context.__next = context.__prev = undefined;
                                                                                head = tail = next = prev = undefined;
                                                                            }
                                                                            context = contextParent;
                                                                            contextParent = contextLeaves && contextLeaves.parent;
                                                                            contextLeafStack[contextLeafDepth--] = undefined;
                                                                            contextType = context != null && context[$TYPE];
                                                                            continue;
                                                                        }
                                                                        if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                            contextLeafKeys = Object.keys(context);
                                                                            contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                            contextLeaves.parent = contextParent;
                                                                            i = -1;
                                                                            n = contextLeafKeys.length;
                                                                            while (++i < n) {
                                                                                if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                    contextLeaves[i] = context[contextLeafKey];
                                                                                }
                                                                            }
                                                                        }
                                                                        contextParent = context;
                                                                        if (context = contextLeaves.pop()) {
                                                                            contextLeafDepth++;
                                                                            contextType = context != null && context[$TYPE];
                                                                        } else {
                                                                            contextType = 'leaf';
                                                                            context = contextParent;
                                                                            contextParent = contextLeaves.parent;
                                                                        }
                                                                        continue;
                                                                    }
                                                                key = keyTmp;
                                                                context = contextTmp;
                                                                contextParent = contextParentTmp;
                                                                contextType = contextTypeTmp;
                                                                contextTmp = contextTypeTmp = undefined;
                                                                if (context != null && typeof context === 'object') {
                                                                    head = root.__head;
                                                                    tail = root.__tail;
                                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                    context === head && (root.__head = root.__next = head = next);
                                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                                    context.__next = context.__prev = undefined;
                                                                    head = tail = next = prev = undefined;
                                                                }
                                                            }
                                                            message[$SIZE] = messageSize - sizeOffset;
                                                            contextParent[key] = context = message;
                                                            break;
                                                        }
                                                        context = contexts[--column];
                                                        key = context[__KEY];
                                                        contextParent = contexts[column - 1] || contextCache;
                                                    } while (column > -1);
                                                    context[__SELF] = context;
                                                    context[__KEY] = key;
                                                    context[__PARENT] = contextParent;
                                                    context[__ROOT] = contextCache;
                                                    if (context[__GENERATION] === undefined) {
                                                        context[__GENERATION] = 0;
                                                    }
                                                    contextTmp = context;
                                                    contextParentTmp = contextParent;
                                                    while (context !== undefined) {
                                                        contextSize = context['$size'] = (context['$size'] || 0) + sizeOffset;
                                                        contextTmp2 = context;
                                                        if (context[__GENERATION_UPDATED] !== generation) {
                                                            generationStack = [];
                                                            generationDepth = 0;
                                                            while (generationDepth > -1) {
                                                                if ((generationReferences = generationStack[generationDepth]) === undefined) {
                                                                    i = k = -1;
                                                                    n = context[__REFS_LENGTH] || 0;
                                                                    generationStack[generationDepth] = generationReferences = [];
                                                                    context[__GENERATION_UPDATED] = generation;
                                                                    context[__GENERATION] = (context[__GENERATION] || 0) + 1;
                                                                    if ((reference = context[__PARENT]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                        generationReferences[++k] = reference;
                                                                    }
                                                                    while (++i < n) {
                                                                        if ((reference = context[__REF + i]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                            generationReferences[++k] = reference;
                                                                        }
                                                                    }
                                                                }
                                                                if ((context = generationReferences.pop()) !== undefined) {
                                                                    ++generationDepth;
                                                                } else {
                                                                    generationStack[generationDepth--] = undefined;
                                                                }
                                                            }
                                                        }
                                                        reference = generationStack = generationReferences = undefined;
                                                        context = contextTmp2;
                                                        if ((contextParent = context[__PARENT]) !== undefined && contextSize <= 0) {
                                                            contextRefsLength = context.__refsLength || 0;
                                                            i = -1;
                                                            while (++i < contextRefsLength) {
                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                    reference.__context = undefined;
                                                                    context[__REF + i] = undefined;
                                                                }
                                                            }
                                                            context.__refsLength = undefined;
                                                            contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                            if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                while (++i <= n) {
                                                                    referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                }
                                                                referenceContext[__REFS_LENGTH] = n;
                                                                contextValue[__REF_INDEX] = undefined;
                                                                contextValue[__CONTEXT] = undefined;
                                                                referenceContext = undefined;
                                                            }
                                                            if (context != null && typeof context === 'object') {
                                                                head = root.__head;
                                                                tail = root.__tail;
                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                context === head && (root.__head = root.__next = head = next);
                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                context.__next = context.__prev = undefined;
                                                                head = tail = next = prev = undefined;
                                                            }
                                                        }
                                                        context = contextParent;
                                                    }
                                                    context = contextTmp;
                                                    contextParent = contextParentTmp;
                                                    contextTmp = contextTmp2 = contextParentTmp = undefined;
                                                    contextType = context != null && context[$TYPE];
                                                    contextValue = contextType === 'sentinel' ? context.value : context;
                                                }
                                            }
                                        }
                                    }
                                    break resolvePath;
                                } while (true);
                            if (context != null) {
                                if (context != null && typeof context === 'object' && contextExpires !== 1) {
                                    head = root.__head;
                                    tail = root.__tail;
                                    next = context.__next, prev = context.__prev;
                                    if (context !== head) {
                                        next && (next != null && typeof next === 'object') && (next.__prev = prev);
                                        prev && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                        (next = head) && (head != null && typeof head === 'object') && (head.__prev = context);
                                        root.__head = root.__next = head = context;
                                        head.__next = next;
                                        head.__prev = undefined;
                                    }
                                    if (tail == null || context === tail) {
                                        root.__tail = root.__prev = tail = prev || context;
                                    }
                                    head = tail = next = prev = undefined;
                                }
                                if (contextType === 'error') {
                                    if (expandsCount > -1) {
                                        requestedPath[requestedPath.length] = null;
                                    }
                                    contextValue = context;
                                }
                            }
                            if (context == null || refreshing === true) {
                                src = optimizedPath;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                opt = dest;
                                src = optimizedBoundPath;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                req = dest;
                                reqLen = n;
                                i = -1;
                                n = requestedPath.length;
                                while (++i < n) {
                                    key = path[i];
                                    key2 = requestedPath[i];
                                    req[reqLen + i] = key && typeof key === 'object' && [key2] || key2;
                                }
                                if (column < length) {
                                    j = column + 1;
                                    k = length + 1;
                                    reqLen = req.length;
                                    optLen = opt.length;
                                    i = -1;
                                    n = k - j;
                                    while (++i < n) {
                                        req[reqLen + i] = opt[optLen + i] = path[j + i];
                                    }
                                }
                                req.pathSetIndex = index;
                                requestedMissingPaths[requestedMissingPaths.length] = req;
                                optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                            } else if (contextValue !== undefined || boxed === true) {
                                src = optimizedPath;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                opt = dest;
                                src = requestedPath;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                req = dest;
                                requestedPaths[requestedPaths.length] = req;
                                optimizedPaths[optimizedPaths.length] = opt;
                                if (!!jsonCache) {
                                    hasValues = true;
                                    if (contextType === 'error') {
                                        if (err === undefined) {
                                            if (boxed === true) {
                                                err = context;
                                            } else {
                                                dest = {};
                                                src = context;
                                                keys = Object.keys(src);
                                                i = -1;
                                                n = keys.length;
                                                while (++i < n) {
                                                    x = keys[i];
                                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                                                }
                                                err = dest;
                                            }
                                            val = !!includeErrors && err || undefined;
                                        }
                                        errors[errors.length] = {
                                            path: req,
                                            value: err
                                        };
                                        err = undefined;
                                    } else {
                                        if (boxed === true) {
                                            val = context;
                                        } else if (contextValue != null && typeof contextValue === 'object') {
                                            if (Array.isArray(contextValue)) {
                                                src = contextValue;
                                                dest = new Array(n = src.length);
                                                i = -1;
                                                while (++i < n) {
                                                    dest[i] = src[i];
                                                }
                                                val = dest;
                                            } else {
                                                dest = {};
                                                src = contextValue;
                                                keys = Object.keys(src);
                                                i = -1;
                                                n = keys.length;
                                                while (++i < n) {
                                                    x = keys[i];
                                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                                                }
                                                val = dest;
                                            }
                                        } else {
                                            val = contextValue;
                                        }
                                    }
                                    do {
                                        jsonKey = jsonKeys[jsonDepth];
                                    } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                                    if (jsonKey != null && jsonKey !== __NULL) {
                                        json = jsons[jsonDepth - 1] || jsonCache;
                                    } else {
                                        json = jsonCache;
                                    }
                                    if (jsonKey != null && jsonKey !== __NULL) {
                                        json[jsonKey] = val;
                                    } else {
                                        json = jsons[jsonDepth] = val;
                                    }
                                }
                            }
                            column = length;
                        }
                    }
                } else {
                    keys[__OFFSET] = 0;
                    length -= 1;
                    column -= 1;
                }
            }
            message = messages[length - 1];
        }
        if (!!jsonCache) {
            jsonDepth = -2;
            jsonLength = jsons.length;
            while (++jsonDepth < jsonLength) {
                if ((json = jsons[jsonDepth]) != null) {
                    break;
                }
            }
            if (hasValues) {
                values[index] = { json: json };
            } else {
                values[index] = undefined;
            }
        }
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setJSONAsJSONG() {
    var returnBlocker;
    var generation, model, state, values, errorSelector, onNext, errors, boxed, includeErrors, refreshing, connected, root, contextCache, context, expired, expiredLength, boundPath, optimizedBoundPath, column, offset, jsonDepth, boundPathValue, contexts, requested, optimized, requestedPaths, optimizedPaths, requestedMissingPaths, optimizedMissingPaths, requestedPath, optimizedPath, pathMaps, messages, path, jsons, jsonKeys, contextParent, index, count, hasValues, jsonCache, json, refsByCols, length, message, pathSet, keys, key, isKeySet, isBranch, resetOptimizedDepth, reference, i, j, n, messageParent, contextExpires, contextInvalidated, head, tail, next, prev, contextType, contextValue, branchKeyTmp, jsonKey, val, src, dest, expandsCount, outermostColumn, outermostLength, outermostPath, sizeOffset, messageSize, contextRefsLength, messageRefsLength, contextLeafStack, contextLeafDepth, keyTmp, contextTmp, contextParentTmp, contextTypeTmp, referenceContext, contextLeaves, contextLeafKeys, contextLeafKey, err, x, refLen, refContainer, backRefs, contextTimestamp, messageType, messageValue, messageTimestamp, messageExpires, originalMessageSize, contextSize, contextTmp2, generationStack, generationDepth, generationReferences, k, opt, req, reqLen, key2, optLen;
    generation = __GENERATION_GENERATION++;
    model = arguments[0];
    state = arguments[1];
    values = arguments[2];
    errorSelector = arguments[3];
    if (typeof values === 'function') {
        onNext = values;
        values = undefined;
    }
    errors = state.errors || (state.errors = []);
    boxed = model._boxed;
    includeErrors = model._includeErrors;
    refreshing = model._refreshing;
    connected = model._connected;
    root = model._root;
    contextCache = context = model._cache;
    expired = root.expired;
    expiredLength = expired.length;
    boundPath = state.boundPath || model._path;
    optimizedBoundPath = [];
    column = state.column || (state.column = 0) - 1;
    offset = state.offset || (state.offset = 0);
    jsonDepth = state.jsonDepth || (state.jsonDepth = 0);
    boundPathValue = state.boundPathValue;
    contexts = state.contexts || (state.contexts = []);
    requested = state.requested || (state.requested = {});
    optimized = state.optimized || (state.optimized = {});
    requestedPaths = state.requestedPaths || (state.requestedPaths = []);
    optimizedPaths = state.optimizedPaths || (state.optimizedPaths = []);
    requestedMissingPaths = state.requestedMissingPaths || (state.requestedMissingPaths = []);
    optimizedMissingPaths = state.optimizedMissingPaths || (state.optimizedMissingPaths = []);
    requestedPath = state.requestedPath || (state.requestedPath = []);
    optimizedPath = state.optimizedPath || (state.optimizedPath = []);
    pathMaps = state;
    messages = state.messages || (state.messages = []);
    path = [];
    jsons = state.jsons || (state.jsons = []);
    jsonKeys = state.jsonKeys || (state.jsonKeys = []);
    includeErrors = true;
    optimizedBoundPath = boundPath;
    if (contextParent == null && (contextParent = model.__context) == null) {
        if (boundPath.length === 0) {
            contextParent = contextCache;
        } else {
            if (boundPathValue == null) {
                boundPathValue = getContextSync.call(model);
            }
            optimizedBoundPath = boundPathValue.path;
            if ((contextParent = boundPathValue.value) == null) {
                contextParent = {};
            }
            boundPathValue.requested = [];
            boundPathValue.optimized = [];
            state.boundPathValue = boundPathValue;
        }
    }
    contexts[-1] = context = contextParent;
    index = pathMaps.index || (pathMaps.index = 0);
    count = pathMaps.length;
    for (; index < count; ++index) {
        pathSet = pathMaps[index];
        hasValues = hasValues || false;
        jsonDepth = jsonKeys.length = 0;
        jsonCache = json = jsons[-1] = !!values && values[0] || undefined;
        offset = 0;
        refsByCols = state.refsByCols = [];
        refsByCols[-1] = optimizedBoundPath;
        path.length = 0;
        column = 0;
        length = 0;
        messages[-1] = message = pathSet;
        while (length > -1) {
            if (!!message) {
                keys = message[__KEYS] || (message[__KEYS] = Object.keys(message));
                keys[__OFFSET] || (keys[__OFFSET] = 0);
                if (keys.length === 0) {
                    length -= 1;
                    message = messages[length - 1];
                    keys = message[__KEYS];
                    keys[__OFFSET] -= 1;
                }
                if ((key = keys[++keys[__OFFSET] - 1]) !== undefined) {
                    key === __NULL && (key = null);
                    if (key == null || !(!(key[0] !== '_' || key[1] !== '_') || (key === __SELF || key === __PARENT || key === __ROOT) || key[0] === '$')) {
                        isKeySet = message[__IS_KEY_SET] = keys.length > 1;
                        path[length] = isKeySet && [key] || key;
                        message = messages[length] = message[key];
                        isBranch = !!message && typeof message === 'object' && !message[$TYPE] && !Array.isArray(message) && !(message[__KEYS] && message[__KEYS].length);
                        if (isBranch) {
                            length += 1;
                            continue;
                        } else {
                            resetOptimizedDepth = column;
                            while (--resetOptimizedDepth >= -1) {
                                if (!!(reference = refsByCols[resetOptimizedDepth])) {
                                    i = j = -1;
                                    n = reference.length;
                                    offset = n - ++resetOptimizedDepth;
                                    while (++i < n) {
                                        optimizedPath[++j] = reference[i];
                                    }
                                    while (resetOptimizedDepth < column) {
                                        optimizedPath[++j] = requestedPath[resetOptimizedDepth++];
                                    }
                                    optimizedPath.length = offset + resetOptimizedDepth;
                                    break;
                                }
                            }
                            contextParent = context = contexts[column - 1];
                            messageParent = message = messages[column - 1];
                            contextParent = contexts[column - 1];
                            resolvePath:
                                do {
                                    for (; column < length; ++column) {
                                        key = path[column];
                                        messageParent = messages[column - 1];
                                        message = messages[column];
                                        isKeySet = messageParent[__IS_KEY_SET];
                                        key = isKeySet ? key[0] : key;
                                        requestedPath[requestedPath.length = column] = key;
                                        if (key != null && key !== __NULL) {
                                            isKeySet = true;
                                            jsonKeys[jsonDepth = column] = key;
                                            optimizedPath[optimizedPath.length = column + offset] = key;
                                            context = contextParent[key];
                                            if (context != null) {
                                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                    contextInvalidated = context != null && context[__INVALIDATED];
                                                    if (contextInvalidated === true === false) {
                                                        context.__invalidated = true;
                                                        context[$EXPIRES] = 0;
                                                        expired[++expiredLength] = context;
                                                        if (context != null && typeof context === 'object') {
                                                            head = root.__head;
                                                            tail = root.__tail;
                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                            context === head && (root.__head = root.__next = head = next);
                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                            context.__next = context.__prev = undefined;
                                                            head = tail = next = prev = undefined;
                                                        }
                                                    }
                                                    context = undefined;
                                                }
                                            }
                                            contextType = context != null && context[$TYPE];
                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                            branchKeyTmp = key;
                                            if ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue)) {
                                                isKeySet = false;
                                                if ((jsonKey = key) != null && jsonKey !== __NULL) {
                                                    if (boxed === true) {
                                                        val = context;
                                                    } else {
                                                        src = contextValue;
                                                        dest = new Array(n = src.length);
                                                        i = -1;
                                                        while (++i < n) {
                                                            dest[i] = src[i];
                                                        }
                                                        val = dest;
                                                    }
                                                    do {
                                                        jsonKey = jsonKeys[jsonDepth];
                                                    } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                                                    if (jsonKey != null && jsonKey !== __NULL) {
                                                        json = jsons[jsonDepth - 1] || jsonCache;
                                                    } else {
                                                        json = jsonCache;
                                                    }
                                                    if (jsonKey != null && jsonKey !== __NULL) {
                                                        json[jsonKey] = val;
                                                    } else {
                                                        json = jsons[jsonDepth] = val;
                                                    }
                                                }
                                                expandsCount = -1;
                                                refsByCols[outermostColumn = column] = contextValue;
                                                do {
                                                    branchKeyTmp = key;
                                                    if (false) {
                                                    } else {
                                                        json = jsonCache;
                                                        refsByCols[outermostColumn = column] = contextValue;
                                                        outermostLength = length;
                                                        outermostPath = path;
                                                        offset = 0;
                                                        column = -1;
                                                        path = contextValue;
                                                        length = path.length - 1;
                                                        contextParent = contextCache;
                                                        while (++column < length) {
                                                            if ((key = path[column]) == null) {
                                                                continue;
                                                            }
                                                            optimizedPath[optimizedPath.length = column + offset] = key;
                                                            context = contextParent[key];
                                                            if (context != null) {
                                                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                                    contextInvalidated = context != null && context[__INVALIDATED];
                                                                    if (contextInvalidated === true === false) {
                                                                        context.__invalidated = true;
                                                                        context[$EXPIRES] = 0;
                                                                        expired[++expiredLength] = context;
                                                                        if (context != null && typeof context === 'object') {
                                                                            head = root.__head;
                                                                            tail = root.__tail;
                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                            context === head && (root.__head = root.__next = head = next);
                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                            context.__next = context.__prev = undefined;
                                                                            head = tail = next = prev = undefined;
                                                                        }
                                                                    }
                                                                    context = undefined;
                                                                }
                                                            }
                                                            contextType = context != null && context[$TYPE];
                                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                                            if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                sizeOffset = 0;
                                                                message = {};
                                                                messageSize = message != null && message[$SIZE] || 0;
                                                                do {
                                                                    if (key != null && key !== __NULL) {
                                                                        if (context != null && context !== message) {
                                                                            contextRefsLength = context.__refsLength || 0;
                                                                            messageRefsLength = message.__refsLength || 0;
                                                                            i = -1;
                                                                            while (++i < contextRefsLength) {
                                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                                    reference[__CONTEXT] = message;
                                                                                    message[__REF + (messageRefsLength + i)] = reference;
                                                                                    context[__REF + i] = undefined;
                                                                                }
                                                                            }
                                                                            message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                                            context[__REFS_LENGTH] = reference = undefined;
                                                                            contextLeafStack = [];
                                                                            contextLeafDepth = 0;
                                                                            keyTmp = key;
                                                                            contextTmp = context;
                                                                            contextParentTmp = contextParent;
                                                                            contextTypeTmp = contextType;
                                                                            recursing:
                                                                                while (contextLeafDepth > -1) {
                                                                                    if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                                                                        contextRefsLength = context.__refsLength || 0;
                                                                                        i = -1;
                                                                                        while (++i < contextRefsLength) {
                                                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                                                reference.__context = undefined;
                                                                                                context[__REF + i] = undefined;
                                                                                            }
                                                                                        }
                                                                                        context.__refsLength = undefined;
                                                                                        contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                                        if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                            i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                            n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                            while (++i <= n) {
                                                                                                referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                            }
                                                                                            referenceContext[__REFS_LENGTH] = n;
                                                                                            contextValue[__REF_INDEX] = undefined;
                                                                                            contextValue[__CONTEXT] = undefined;
                                                                                            referenceContext = undefined;
                                                                                        }
                                                                                        if (context != null && typeof context === 'object') {
                                                                                            head = root.__head;
                                                                                            tail = root.__tail;
                                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                            context === head && (root.__head = root.__next = head = next);
                                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                            context.__next = context.__prev = undefined;
                                                                                            head = tail = next = prev = undefined;
                                                                                        }
                                                                                        context = contextParent;
                                                                                        contextParent = contextLeaves && contextLeaves.parent;
                                                                                        contextLeafStack[contextLeafDepth--] = undefined;
                                                                                        contextType = context != null && context[$TYPE];
                                                                                        continue;
                                                                                    }
                                                                                    if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                                        contextLeafKeys = Object.keys(context);
                                                                                        contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                                        contextLeaves.parent = contextParent;
                                                                                        i = -1;
                                                                                        n = contextLeafKeys.length;
                                                                                        while (++i < n) {
                                                                                            if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                                contextLeaves[i] = context[contextLeafKey];
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    contextParent = context;
                                                                                    if (context = contextLeaves.pop()) {
                                                                                        contextLeafDepth++;
                                                                                        contextType = context != null && context[$TYPE];
                                                                                    } else {
                                                                                        contextType = 'leaf';
                                                                                        context = contextParent;
                                                                                        contextParent = contextLeaves.parent;
                                                                                    }
                                                                                    continue;
                                                                                }
                                                                            key = keyTmp;
                                                                            context = contextTmp;
                                                                            contextParent = contextParentTmp;
                                                                            contextType = contextTypeTmp;
                                                                            contextTmp = contextTypeTmp = undefined;
                                                                            if (context != null && typeof context === 'object') {
                                                                                head = root.__head;
                                                                                tail = root.__tail;
                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                context.__next = context.__prev = undefined;
                                                                                head = tail = next = prev = undefined;
                                                                            }
                                                                        }
                                                                        message[$SIZE] = messageSize - sizeOffset;
                                                                        contextParent[key] = context = message;
                                                                        break;
                                                                    }
                                                                    context = contexts[--column];
                                                                    key = context[__KEY];
                                                                    contextParent = contexts[column - 1] || contextCache;
                                                                } while (column > -1);
                                                                context[__SELF] = context;
                                                                context[__KEY] = key;
                                                                context[__PARENT] = contextParent;
                                                                context[__ROOT] = contextCache;
                                                                if (context[__GENERATION] === undefined) {
                                                                    context[__GENERATION] = 0;
                                                                }
                                                                contextType = context != null && context[$TYPE];
                                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                            }
                                                            if (context != null && ((jsonKey = key) != null && jsonKey !== __NULL)) {
                                                                if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                    if (contextType === 'error') {
                                                                        if (boxed === true) {
                                                                            err = context;
                                                                        } else {
                                                                            dest = {};
                                                                            src = context;
                                                                            keys = Object.keys(src);
                                                                            i = -1;
                                                                            n = keys.length;
                                                                            while (++i < n) {
                                                                                x = keys[i];
                                                                                !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                                            }
                                                                            err = dest;
                                                                        }
                                                                        val = !!includeErrors && err || undefined;
                                                                    } else {
                                                                        if (boxed === true) {
                                                                            val = context;
                                                                        } else if (contextValue != null && typeof contextValue === 'object') {
                                                                            if (Array.isArray(contextValue)) {
                                                                                src = contextValue;
                                                                                dest = new Array(n = src.length);
                                                                                i = -1;
                                                                                while (++i < n) {
                                                                                    dest[i] = src[i];
                                                                                }
                                                                                val = dest;
                                                                            } else {
                                                                                dest = {};
                                                                                src = contextValue;
                                                                                keys = Object.keys(src);
                                                                                i = -1;
                                                                                n = keys.length;
                                                                                while (++i < n) {
                                                                                    x = keys[i];
                                                                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                                                }
                                                                                val = dest;
                                                                            }
                                                                        } else {
                                                                            val = contextValue;
                                                                        }
                                                                    }
                                                                    if (jsonKey != null && jsonKey !== __NULL) {
                                                                        json[jsonKey] = val;
                                                                    } else {
                                                                        json = jsons[jsonDepth] = val;
                                                                    }
                                                                } else {
                                                                    if (jsonKey != null && jsonKey !== __NULL) {
                                                                        json = json[jsonKey] || (json[jsonKey] = {});
                                                                    }
                                                                }
                                                            }
                                                            if (context === undefined) {
                                                                i = -1;
                                                                refLen = path.length;
                                                                offset = refLen - column - 1;
                                                                optimizedPath.length = refLen;
                                                                while (++i < refLen) {
                                                                    optimizedPath[i] = path[i];
                                                                }
                                                                break;
                                                            } else if (!!contextType || Array.isArray(contextValue)) {
                                                                break;
                                                            }
                                                            contextParent = context;
                                                        }
                                                        if (column === length) {
                                                            if ((key = path[column]) != null) {
                                                                optimizedPath[optimizedPath.length = column + offset] = key;
                                                                context = contextParent[key];
                                                                if (context != null) {
                                                                    if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                                        contextInvalidated = context != null && context[__INVALIDATED];
                                                                        if (contextInvalidated === true === false) {
                                                                            context.__invalidated = true;
                                                                            context[$EXPIRES] = 0;
                                                                            expired[++expiredLength] = context;
                                                                            if (context != null && typeof context === 'object') {
                                                                                head = root.__head;
                                                                                tail = root.__tail;
                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                context.__next = context.__prev = undefined;
                                                                                head = tail = next = prev = undefined;
                                                                            }
                                                                        }
                                                                        context = undefined;
                                                                    }
                                                                }
                                                                contextType = context != null && context[$TYPE];
                                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                                if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                    sizeOffset = 0;
                                                                    message = {};
                                                                    messageSize = message != null && message[$SIZE] || 0;
                                                                    do {
                                                                        if (key != null && key !== __NULL) {
                                                                            if (context != null && context !== message) {
                                                                                contextRefsLength = context.__refsLength || 0;
                                                                                messageRefsLength = message.__refsLength || 0;
                                                                                i = -1;
                                                                                while (++i < contextRefsLength) {
                                                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                                                        reference[__CONTEXT] = message;
                                                                                        message[__REF + (messageRefsLength + i)] = reference;
                                                                                        context[__REF + i] = undefined;
                                                                                    }
                                                                                }
                                                                                message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                                                context[__REFS_LENGTH] = reference = undefined;
                                                                                contextLeafStack = [];
                                                                                contextLeafDepth = 0;
                                                                                keyTmp = key;
                                                                                contextTmp = context;
                                                                                contextParentTmp = contextParent;
                                                                                contextTypeTmp = contextType;
                                                                                recursing:
                                                                                    while (contextLeafDepth > -1) {
                                                                                        if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                                                                            contextRefsLength = context.__refsLength || 0;
                                                                                            i = -1;
                                                                                            while (++i < contextRefsLength) {
                                                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                                                    reference.__context = undefined;
                                                                                                    context[__REF + i] = undefined;
                                                                                                }
                                                                                            }
                                                                                            context.__refsLength = undefined;
                                                                                            contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                                            if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                                i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                                n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                                while (++i <= n) {
                                                                                                    referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                                }
                                                                                                referenceContext[__REFS_LENGTH] = n;
                                                                                                contextValue[__REF_INDEX] = undefined;
                                                                                                contextValue[__CONTEXT] = undefined;
                                                                                                referenceContext = undefined;
                                                                                            }
                                                                                            if (context != null && typeof context === 'object') {
                                                                                                head = root.__head;
                                                                                                tail = root.__tail;
                                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                                context.__next = context.__prev = undefined;
                                                                                                head = tail = next = prev = undefined;
                                                                                            }
                                                                                            context = contextParent;
                                                                                            contextParent = contextLeaves && contextLeaves.parent;
                                                                                            contextLeafStack[contextLeafDepth--] = undefined;
                                                                                            contextType = context != null && context[$TYPE];
                                                                                            continue;
                                                                                        }
                                                                                        if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                                            contextLeafKeys = Object.keys(context);
                                                                                            contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                                            contextLeaves.parent = contextParent;
                                                                                            i = -1;
                                                                                            n = contextLeafKeys.length;
                                                                                            while (++i < n) {
                                                                                                if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                                    contextLeaves[i] = context[contextLeafKey];
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        contextParent = context;
                                                                                        if (context = contextLeaves.pop()) {
                                                                                            contextLeafDepth++;
                                                                                            contextType = context != null && context[$TYPE];
                                                                                        } else {
                                                                                            contextType = 'leaf';
                                                                                            context = contextParent;
                                                                                            contextParent = contextLeaves.parent;
                                                                                        }
                                                                                        continue;
                                                                                    }
                                                                                key = keyTmp;
                                                                                context = contextTmp;
                                                                                contextParent = contextParentTmp;
                                                                                contextType = contextTypeTmp;
                                                                                contextTmp = contextTypeTmp = undefined;
                                                                                if (context != null && typeof context === 'object') {
                                                                                    head = root.__head;
                                                                                    tail = root.__tail;
                                                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                    context === head && (root.__head = root.__next = head = next);
                                                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                    context.__next = context.__prev = undefined;
                                                                                    head = tail = next = prev = undefined;
                                                                                }
                                                                            }
                                                                            message[$SIZE] = messageSize - sizeOffset;
                                                                            contextParent[key] = context = message;
                                                                            break;
                                                                        }
                                                                        context = contexts[--column];
                                                                        key = context[__KEY];
                                                                        contextParent = contexts[column - 1] || contextCache;
                                                                    } while (column > -1);
                                                                    context[__SELF] = context;
                                                                    context[__KEY] = key;
                                                                    context[__PARENT] = contextParent;
                                                                    context[__ROOT] = contextCache;
                                                                    if (context[__GENERATION] === undefined) {
                                                                        context[__GENERATION] = 0;
                                                                    }
                                                                    contextType = context != null && context[$TYPE];
                                                                    contextValue = contextType === 'sentinel' ? context.value : context;
                                                                }
                                                                if (context != null && ((jsonKey = key) != null && jsonKey !== __NULL)) {
                                                                    if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                        if (contextType === 'error') {
                                                                            if (boxed === true) {
                                                                                err = context;
                                                                            } else {
                                                                                dest = {};
                                                                                src = context;
                                                                                keys = Object.keys(src);
                                                                                i = -1;
                                                                                n = keys.length;
                                                                                while (++i < n) {
                                                                                    x = keys[i];
                                                                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                                                }
                                                                                err = dest;
                                                                            }
                                                                            val = !!includeErrors && err || undefined;
                                                                        } else {
                                                                            if (boxed === true) {
                                                                                val = context;
                                                                            } else if (contextValue != null && typeof contextValue === 'object') {
                                                                                if (Array.isArray(contextValue)) {
                                                                                    src = contextValue;
                                                                                    dest = new Array(n = src.length);
                                                                                    i = -1;
                                                                                    while (++i < n) {
                                                                                        dest[i] = src[i];
                                                                                    }
                                                                                    val = dest;
                                                                                } else {
                                                                                    dest = {};
                                                                                    src = contextValue;
                                                                                    keys = Object.keys(src);
                                                                                    i = -1;
                                                                                    n = keys.length;
                                                                                    while (++i < n) {
                                                                                        x = keys[i];
                                                                                        !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                                                    }
                                                                                    val = dest;
                                                                                }
                                                                            } else {
                                                                                val = contextValue;
                                                                            }
                                                                        }
                                                                        if (jsonKey != null && jsonKey !== __NULL) {
                                                                            json[jsonKey] = val;
                                                                        } else {
                                                                            json = jsons[jsonDepth] = val;
                                                                        }
                                                                    } else {
                                                                        if (jsonKey != null && jsonKey !== __NULL) {
                                                                            json = json[jsonKey] || (json[jsonKey] = {});
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            if (context != null) {
                                                                if ((refContainer = path[__CONTAINER] || path).__context === undefined) {
                                                                    backRefs = context.__refsLength || 0;
                                                                    context['__ref' + backRefs] = refContainer;
                                                                    context.__refsLength = backRefs + 1;
                                                                    refContainer.__refIndex = backRefs;
                                                                    refContainer.__context = context;
                                                                    refContainer = backRefs = undefined;
                                                                }
                                                            }
                                                        }
                                                        expandsCount = Number(contextType === 'error') - 1;
                                                        column = outermostColumn;
                                                        path = outermostPath;
                                                        offset = length - column;
                                                        length = outermostLength;
                                                        key = branchKeyTmp;
                                                        outermostColumn = undefined;
                                                        outermostPath = undefined;
                                                        outermostLength = undefined;
                                                        branchKeyTmp = undefined;
                                                    }
                                                } while ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue));
                                            } else if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                sizeOffset = 0;
                                                message = {};
                                                messageSize = message != null && message[$SIZE] || 0;
                                                do {
                                                    if (key != null && key !== __NULL) {
                                                        if (context != null && context !== message) {
                                                            contextRefsLength = context.__refsLength || 0;
                                                            messageRefsLength = message.__refsLength || 0;
                                                            i = -1;
                                                            while (++i < contextRefsLength) {
                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                    reference[__CONTEXT] = message;
                                                                    message[__REF + (messageRefsLength + i)] = reference;
                                                                    context[__REF + i] = undefined;
                                                                }
                                                            }
                                                            message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                            context[__REFS_LENGTH] = reference = undefined;
                                                            contextLeafStack = [];
                                                            contextLeafDepth = 0;
                                                            keyTmp = key;
                                                            contextTmp = context;
                                                            contextParentTmp = contextParent;
                                                            contextTypeTmp = contextType;
                                                            recursing:
                                                                while (contextLeafDepth > -1) {
                                                                    if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                                                        contextRefsLength = context.__refsLength || 0;
                                                                        i = -1;
                                                                        while (++i < contextRefsLength) {
                                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                                reference.__context = undefined;
                                                                                context[__REF + i] = undefined;
                                                                            }
                                                                        }
                                                                        context.__refsLength = undefined;
                                                                        contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                        if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                            i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                            n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                            while (++i <= n) {
                                                                                referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                            }
                                                                            referenceContext[__REFS_LENGTH] = n;
                                                                            contextValue[__REF_INDEX] = undefined;
                                                                            contextValue[__CONTEXT] = undefined;
                                                                            referenceContext = undefined;
                                                                        }
                                                                        if (context != null && typeof context === 'object') {
                                                                            head = root.__head;
                                                                            tail = root.__tail;
                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                            context === head && (root.__head = root.__next = head = next);
                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                            context.__next = context.__prev = undefined;
                                                                            head = tail = next = prev = undefined;
                                                                        }
                                                                        context = contextParent;
                                                                        contextParent = contextLeaves && contextLeaves.parent;
                                                                        contextLeafStack[contextLeafDepth--] = undefined;
                                                                        contextType = context != null && context[$TYPE];
                                                                        continue;
                                                                    }
                                                                    if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                        contextLeafKeys = Object.keys(context);
                                                                        contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                        contextLeaves.parent = contextParent;
                                                                        i = -1;
                                                                        n = contextLeafKeys.length;
                                                                        while (++i < n) {
                                                                            if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                contextLeaves[i] = context[contextLeafKey];
                                                                            }
                                                                        }
                                                                    }
                                                                    contextParent = context;
                                                                    if (context = contextLeaves.pop()) {
                                                                        contextLeafDepth++;
                                                                        contextType = context != null && context[$TYPE];
                                                                    } else {
                                                                        contextType = 'leaf';
                                                                        context = contextParent;
                                                                        contextParent = contextLeaves.parent;
                                                                    }
                                                                    continue;
                                                                }
                                                            key = keyTmp;
                                                            context = contextTmp;
                                                            contextParent = contextParentTmp;
                                                            contextType = contextTypeTmp;
                                                            contextTmp = contextTypeTmp = undefined;
                                                            if (context != null && typeof context === 'object') {
                                                                head = root.__head;
                                                                tail = root.__tail;
                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                context === head && (root.__head = root.__next = head = next);
                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                context.__next = context.__prev = undefined;
                                                                head = tail = next = prev = undefined;
                                                            }
                                                        }
                                                        message[$SIZE] = messageSize - sizeOffset;
                                                        contextParent[key] = context = message;
                                                        break;
                                                    }
                                                    context = contexts[--column];
                                                    key = context[__KEY];
                                                    contextParent = contexts[column - 1] || contextCache;
                                                } while (column > -1);
                                                context[__SELF] = context;
                                                context[__KEY] = key;
                                                context[__PARENT] = contextParent;
                                                context[__ROOT] = contextCache;
                                                if (context[__GENERATION] === undefined) {
                                                    context[__GENERATION] = 0;
                                                }
                                                contextType = context != null && context[$TYPE];
                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                            }
                                            key = branchKeyTmp;
                                            contexts[column] = contextParent = context;
                                            if (isKeySet === true && ((jsonKey = key) != null && jsonKey !== __NULL)) {
                                                do {
                                                    jsonKey = jsonKeys[jsonDepth];
                                                } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                                                if (jsonKey != null && jsonKey !== __NULL) {
                                                    json = jsons[jsonDepth - 1] || jsonCache;
                                                } else {
                                                    json = jsonCache;
                                                }
                                                if (jsonKey != null && jsonKey !== __NULL) {
                                                    json = json[jsonKey] || (json[jsonKey] = {});
                                                }
                                            }
                                            jsons[jsonDepth] = json;
                                            jsonDepth += 1;
                                        }
                                    }
                                    if (column === length) {
                                        key = path[column];
                                        messageParent = messages[column - 1];
                                        message = messages[column];
                                        isKeySet = messageParent[__IS_KEY_SET];
                                        key = isKeySet ? key[0] : key;
                                        requestedPath[requestedPath.length = column] = key;
                                        if (key != null && key !== __NULL) {
                                            jsonDepth = column;
                                            isKeySet = true;
                                            !!jsonCache && isKeySet === true && (jsonKeys[jsonDepth] = key);
                                            optimizedPath[optimizedPath.length = column + offset] = key;
                                            context = contextParent[key];
                                            if (context != null) {
                                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                    contextInvalidated = context != null && context[__INVALIDATED];
                                                    if (contextInvalidated === true === false) {
                                                        context.__invalidated = true;
                                                        context[$EXPIRES] = 0;
                                                        expired[++expiredLength] = context;
                                                        if (context != null && typeof context === 'object') {
                                                            head = root.__head;
                                                            tail = root.__tail;
                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                            context === head && (root.__head = root.__next = head = next);
                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                            context.__next = context.__prev = undefined;
                                                            head = tail = next = prev = undefined;
                                                        }
                                                    }
                                                    context = undefined;
                                                }
                                            }
                                            contextType = context != null && context[$TYPE];
                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                            contextTimestamp = context != null && context[$TIMESTAMP];
                                            messageType = message != null && message[$TYPE];
                                            messageValue = messageType === 'sentinel' ? message.value : message;
                                            messageTimestamp = message != null && message[$TIMESTAMP];
                                            messageExpires = (message != null || null) && message[$EXPIRES];
                                            if ((messageTimestamp < contextTimestamp || messageExpires === 0 && ((context = message) || true)) === false === true) {
                                                messageSize = message != null && message[$SIZE] || 0;
                                                originalMessageSize = messageSize || 0;
                                                if ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) {
                                                    messageType = 'array';
                                                    originalMessageSize = messageValue.length || 1;
                                                    messageSize = (messageType === 'sentinel' && 50 || 0) + originalMessageSize;
                                                    messageValue[__CONTAINER] = message;
                                                } else if (messageType === 'sentinel') {
                                                    messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                } else if (messageType === 'error') {
                                                    if (typeof errorSelector === 'function') {
                                                        message = Enumerable.errorSelector(message);
                                                    }
                                                    messageSize = 50 + originalMessageSize;
                                                } else if (messageValue == null || typeof messageValue !== 'object') {
                                                    originalMessageSize = typeof messageValue === 'string' && messageValue.length || 1;
                                                    messageSize = 50 + originalMessageSize;
                                                    messageType = 'sentinel';
                                                    message = {
                                                        '$type': messageType,
                                                        'value': messageValue
                                                    };
                                                } else {
                                                    messageSize = message[$SIZE] || 50 * 2;
                                                    messageType = message[$TYPE] = messageType || 'leaf';
                                                }
                                                message[$SIZE] = sizeOffset = messageSize;
                                                if (!!((messageExpires = (message != null || null) && message[$EXPIRES]) != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < now())) === false) {
                                                    messageSize = message != null && message[$SIZE] || 0;
                                                    do {
                                                        if (key != null && key !== __NULL) {
                                                            if (context != null && context !== message) {
                                                                contextRefsLength = context.__refsLength || 0;
                                                                messageRefsLength = message.__refsLength || 0;
                                                                i = -1;
                                                                while (++i < contextRefsLength) {
                                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                                        reference[__CONTEXT] = message;
                                                                        message[__REF + (messageRefsLength + i)] = reference;
                                                                        context[__REF + i] = undefined;
                                                                    }
                                                                }
                                                                message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                                context[__REFS_LENGTH] = reference = undefined;
                                                                contextLeafStack = [];
                                                                contextLeafDepth = 0;
                                                                keyTmp = key;
                                                                contextTmp = context;
                                                                contextParentTmp = contextParent;
                                                                contextTypeTmp = contextType;
                                                                recursing:
                                                                    while (contextLeafDepth > -1) {
                                                                        if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                                                            contextRefsLength = context.__refsLength || 0;
                                                                            i = -1;
                                                                            while (++i < contextRefsLength) {
                                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                                    reference.__context = undefined;
                                                                                    context[__REF + i] = undefined;
                                                                                }
                                                                            }
                                                                            context.__refsLength = undefined;
                                                                            contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                            if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                while (++i <= n) {
                                                                                    referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                }
                                                                                referenceContext[__REFS_LENGTH] = n;
                                                                                contextValue[__REF_INDEX] = undefined;
                                                                                contextValue[__CONTEXT] = undefined;
                                                                                referenceContext = undefined;
                                                                            }
                                                                            if (context != null && typeof context === 'object') {
                                                                                head = root.__head;
                                                                                tail = root.__tail;
                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                context.__next = context.__prev = undefined;
                                                                                head = tail = next = prev = undefined;
                                                                            }
                                                                            context = contextParent;
                                                                            contextParent = contextLeaves && contextLeaves.parent;
                                                                            contextLeafStack[contextLeafDepth--] = undefined;
                                                                            contextType = context != null && context[$TYPE];
                                                                            continue;
                                                                        }
                                                                        if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                            contextLeafKeys = Object.keys(context);
                                                                            contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                            contextLeaves.parent = contextParent;
                                                                            i = -1;
                                                                            n = contextLeafKeys.length;
                                                                            while (++i < n) {
                                                                                if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                    contextLeaves[i] = context[contextLeafKey];
                                                                                }
                                                                            }
                                                                        }
                                                                        contextParent = context;
                                                                        if (context = contextLeaves.pop()) {
                                                                            contextLeafDepth++;
                                                                            contextType = context != null && context[$TYPE];
                                                                        } else {
                                                                            contextType = 'leaf';
                                                                            context = contextParent;
                                                                            contextParent = contextLeaves.parent;
                                                                        }
                                                                        continue;
                                                                    }
                                                                key = keyTmp;
                                                                context = contextTmp;
                                                                contextParent = contextParentTmp;
                                                                contextType = contextTypeTmp;
                                                                contextTmp = contextTypeTmp = undefined;
                                                                if (context != null && typeof context === 'object') {
                                                                    head = root.__head;
                                                                    tail = root.__tail;
                                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                    context === head && (root.__head = root.__next = head = next);
                                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                                    context.__next = context.__prev = undefined;
                                                                    head = tail = next = prev = undefined;
                                                                }
                                                            }
                                                            message[$SIZE] = messageSize - sizeOffset;
                                                            contextParent[key] = context = message;
                                                            break;
                                                        }
                                                        context = contexts[--column];
                                                        key = context[__KEY];
                                                        contextParent = contexts[column - 1] || contextCache;
                                                    } while (column > -1);
                                                    context[__SELF] = context;
                                                    context[__KEY] = key;
                                                    context[__PARENT] = contextParent;
                                                    context[__ROOT] = contextCache;
                                                    if (context[__GENERATION] === undefined) {
                                                        context[__GENERATION] = 0;
                                                    }
                                                    contextTmp = context;
                                                    contextParentTmp = contextParent;
                                                    while (context !== undefined) {
                                                        contextSize = context['$size'] = (context['$size'] || 0) + sizeOffset;
                                                        contextTmp2 = context;
                                                        if (context[__GENERATION_UPDATED] !== generation) {
                                                            generationStack = [];
                                                            generationDepth = 0;
                                                            while (generationDepth > -1) {
                                                                if ((generationReferences = generationStack[generationDepth]) === undefined) {
                                                                    i = k = -1;
                                                                    n = context[__REFS_LENGTH] || 0;
                                                                    generationStack[generationDepth] = generationReferences = [];
                                                                    context[__GENERATION_UPDATED] = generation;
                                                                    context[__GENERATION] = (context[__GENERATION] || 0) + 1;
                                                                    if ((reference = context[__PARENT]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                        generationReferences[++k] = reference;
                                                                    }
                                                                    while (++i < n) {
                                                                        if ((reference = context[__REF + i]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                            generationReferences[++k] = reference;
                                                                        }
                                                                    }
                                                                }
                                                                if ((context = generationReferences.pop()) !== undefined) {
                                                                    ++generationDepth;
                                                                } else {
                                                                    generationStack[generationDepth--] = undefined;
                                                                }
                                                            }
                                                        }
                                                        reference = generationStack = generationReferences = undefined;
                                                        context = contextTmp2;
                                                        if ((contextParent = context[__PARENT]) !== undefined && contextSize <= 0) {
                                                            contextRefsLength = context.__refsLength || 0;
                                                            i = -1;
                                                            while (++i < contextRefsLength) {
                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                    reference.__context = undefined;
                                                                    context[__REF + i] = undefined;
                                                                }
                                                            }
                                                            context.__refsLength = undefined;
                                                            contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                            if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                while (++i <= n) {
                                                                    referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                }
                                                                referenceContext[__REFS_LENGTH] = n;
                                                                contextValue[__REF_INDEX] = undefined;
                                                                contextValue[__CONTEXT] = undefined;
                                                                referenceContext = undefined;
                                                            }
                                                            if (context != null && typeof context === 'object') {
                                                                head = root.__head;
                                                                tail = root.__tail;
                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                context === head && (root.__head = root.__next = head = next);
                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                context.__next = context.__prev = undefined;
                                                                head = tail = next = prev = undefined;
                                                            }
                                                        }
                                                        context = contextParent;
                                                    }
                                                    context = contextTmp;
                                                    contextParent = contextParentTmp;
                                                    contextTmp = contextTmp2 = contextParentTmp = undefined;
                                                    contextType = context != null && context[$TYPE];
                                                    contextValue = contextType === 'sentinel' ? context.value : context;
                                                }
                                            }
                                        }
                                    }
                                    break resolvePath;
                                } while (true);
                            if (context != null) {
                                if (context != null && typeof context === 'object' && contextExpires !== 1) {
                                    head = root.__head;
                                    tail = root.__tail;
                                    next = context.__next, prev = context.__prev;
                                    if (context !== head) {
                                        next && (next != null && typeof next === 'object') && (next.__prev = prev);
                                        prev && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                        (next = head) && (head != null && typeof head === 'object') && (head.__prev = context);
                                        root.__head = root.__next = head = context;
                                        head.__next = next;
                                        head.__prev = undefined;
                                    }
                                    if (tail == null || context === tail) {
                                        root.__tail = root.__prev = tail = prev || context;
                                    }
                                    head = tail = next = prev = undefined;
                                }
                                if (contextType === 'error') {
                                    if (expandsCount > -1) {
                                        requestedPath[requestedPath.length] = null;
                                    }
                                    contextValue = context;
                                }
                            }
                            if (context == null || refreshing === true) {
                                src = optimizedPath;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                opt = dest;
                                src = optimizedBoundPath;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                req = dest;
                                reqLen = n;
                                i = -1;
                                n = requestedPath.length;
                                while (++i < n) {
                                    key = path[i];
                                    key2 = requestedPath[i];
                                    req[reqLen + i] = key && typeof key === 'object' && [key2] || key2;
                                }
                                if (column < length) {
                                    j = column + 1;
                                    k = length + 1;
                                    reqLen = req.length;
                                    optLen = opt.length;
                                    i = -1;
                                    n = k - j;
                                    while (++i < n) {
                                        req[reqLen + i] = opt[optLen + i] = path[j + i];
                                    }
                                }
                                req.pathSetIndex = index;
                                requestedMissingPaths[requestedMissingPaths.length] = req;
                                optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                            } else if (contextValue !== undefined || boxed === true) {
                                src = optimizedPath;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                opt = dest;
                                src = requestedPath;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                req = dest;
                                requestedPaths[requestedPaths.length] = req;
                                optimizedPaths[optimizedPaths.length] = opt;
                                hasValues = true;
                                if (err) {
                                    errors[errors.length] = {
                                        path: req,
                                        value: err
                                    };
                                    err = undefined;
                                } else if ((jsonKey = key) != null && jsonKey !== __NULL) {
                                    if (contextType === 'error') {
                                        if (err === undefined) {
                                            if (boxed === true) {
                                                err = context;
                                            } else {
                                                dest = {};
                                                src = context;
                                                keys = Object.keys(src);
                                                i = -1;
                                                n = keys.length;
                                                while (++i < n) {
                                                    x = keys[i];
                                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                }
                                                err = dest;
                                            }
                                            val = !!includeErrors && err || undefined;
                                        }
                                        errors[errors.length] = {
                                            path: req,
                                            value: err
                                        };
                                        err = undefined;
                                    } else {
                                        if (boxed === true) {
                                            val = context;
                                        } else if (contextValue != null && typeof contextValue === 'object') {
                                            if (Array.isArray(contextValue)) {
                                                src = contextValue;
                                                dest = new Array(n = src.length);
                                                i = -1;
                                                while (++i < n) {
                                                    dest[i] = src[i];
                                                }
                                                val = dest;
                                            } else {
                                                dest = {};
                                                src = contextValue;
                                                keys = Object.keys(src);
                                                i = -1;
                                                n = keys.length;
                                                while (++i < n) {
                                                    x = keys[i];
                                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                }
                                                val = dest;
                                            }
                                        } else {
                                            val = contextValue;
                                        }
                                    }
                                    do {
                                        jsonKey = jsonKeys[jsonDepth];
                                    } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                                    if (jsonKey != null && jsonKey !== __NULL) {
                                        json = jsons[jsonDepth - 1] || jsonCache;
                                    } else {
                                        json = jsonCache;
                                    }
                                    if (jsonKey != null && jsonKey !== __NULL) {
                                        json[jsonKey] = val;
                                    } else {
                                        json = jsons[jsonDepth] = val;
                                    }
                                }
                            }
                            column = length;
                        }
                    }
                } else {
                    keys[__OFFSET] = 0;
                    length -= 1;
                    column -= 1;
                }
            }
            message = messages[length - 1];
        }
    }
    json = jsons[-1];
    if (!!values) {
        values[0] = hasValues && {
            'paths': requestedPaths,
            'jsong': json
        } || undefined;
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setJSONAsPathMap() {
    var returnBlocker;
    var generation, model, state, values, errorSelector, onNext, errors, boxed, includeErrors, refreshing, connected, root, contextCache, context, expired, expiredLength, boundPath, optimizedBoundPath, column, offset, jsonDepth, boundPathValue, contexts, requested, optimized, requestedPaths, optimizedPaths, requestedMissingPaths, optimizedMissingPaths, requestedPath, optimizedPath, pathMaps, messages, path, jsons, jsonKeys, contextParent, index, count, hasValues, jsonCache, json, refsByCols, length, message, pathSet, keys, key, isKeySet, isBranch, resetOptimizedDepth, reference, i, j, n, messageParent, contextExpires, contextInvalidated, head, tail, next, prev, contextType, contextValue, branchKeyTmp, expandsCount, outermostColumn, refLen, outermostLength, outermostPath, sizeOffset, messageSize, contextRefsLength, messageRefsLength, contextLeafStack, contextLeafDepth, keyTmp, contextTmp, contextParentTmp, contextTypeTmp, referenceContext, contextLeaves, contextLeafKeys, contextLeafKey, refContainer, backRefs, jsonKey, contextTimestamp, messageType, messageValue, messageTimestamp, messageExpires, originalMessageSize, contextSize, contextTmp2, generationStack, generationDepth, generationReferences, k, src, dest, opt, req, reqLen, key2, optLen, err, x, val;
    generation = __GENERATION_GENERATION++;
    model = arguments[0];
    state = arguments[1];
    values = arguments[2];
    errorSelector = arguments[3];
    if (typeof values === 'function') {
        onNext = values;
        values = undefined;
    }
    errors = state.errors || (state.errors = []);
    boxed = model._boxed;
    includeErrors = model._includeErrors;
    refreshing = model._refreshing;
    connected = model._connected;
    root = model._root;
    contextCache = context = model._cache;
    expired = root.expired;
    expiredLength = expired.length;
    boundPath = state.boundPath || model._path;
    optimizedBoundPath = [];
    column = state.column || (state.column = 0) - 1;
    offset = state.offset || (state.offset = 0);
    jsonDepth = state.jsonDepth || (state.jsonDepth = 0);
    boundPathValue = state.boundPathValue;
    contexts = state.contexts || (state.contexts = []);
    requested = state.requested || (state.requested = {});
    optimized = state.optimized || (state.optimized = {});
    requestedPaths = state.requestedPaths || (state.requestedPaths = []);
    optimizedPaths = state.optimizedPaths || (state.optimizedPaths = []);
    requestedMissingPaths = state.requestedMissingPaths || (state.requestedMissingPaths = []);
    optimizedMissingPaths = state.optimizedMissingPaths || (state.optimizedMissingPaths = []);
    requestedPath = state.requestedPath || (state.requestedPath = []);
    optimizedPath = state.optimizedPath || (state.optimizedPath = []);
    pathMaps = state;
    messages = state.messages || (state.messages = []);
    path = [];
    jsons = state.jsons || (state.jsons = []);
    jsonKeys = state.jsonKeys || (state.jsonKeys = []);
    optimizedBoundPath = boundPath;
    if (contextParent == null && (contextParent = model.__context) == null) {
        if (boundPath.length === 0) {
            contextParent = contextCache;
        } else {
            if (boundPathValue == null) {
                boundPathValue = getContextSync.call(model);
            }
            optimizedBoundPath = boundPathValue.path;
            if ((contextParent = boundPathValue.value) == null) {
                contextParent = {};
            }
            boundPathValue.requested = [];
            boundPathValue.optimized = [];
            state.boundPathValue = boundPathValue;
        }
    }
    contexts[-1] = context = contextParent;
    index = pathMaps.index || (pathMaps.index = 0);
    count = pathMaps.length;
    for (; index < count; ++index) {
        pathSet = pathMaps[index];
        hasValues = hasValues || false;
        jsonDepth = jsonKeys.length = 0;
        jsonCache = json = jsons[-1] = !!values && values[0] || undefined;
        offset = 0;
        refsByCols = state.refsByCols = [];
        refsByCols[-1] = optimizedBoundPath;
        path.length = 0;
        column = 0;
        length = 0;
        messages[-1] = message = pathSet;
        while (length > -1) {
            if (!!message) {
                keys = message[__KEYS] || (message[__KEYS] = Object.keys(message));
                keys[__OFFSET] || (keys[__OFFSET] = 0);
                if (keys.length === 0) {
                    length -= 1;
                    message = messages[length - 1];
                    keys = message[__KEYS];
                    keys[__OFFSET] -= 1;
                }
                if ((key = keys[++keys[__OFFSET] - 1]) !== undefined) {
                    key === __NULL && (key = null);
                    if (key == null || !(!(key[0] !== '_' || key[1] !== '_') || (key === __SELF || key === __PARENT || key === __ROOT) || key[0] === '$')) {
                        isKeySet = message[__IS_KEY_SET] = keys.length > 1;
                        path[length] = isKeySet && [key] || key;
                        message = messages[length] = message[key];
                        isBranch = !!message && typeof message === 'object' && !message[$TYPE] && !Array.isArray(message) && !(message[__KEYS] && message[__KEYS].length);
                        if (isBranch) {
                            length += 1;
                            continue;
                        } else {
                            resetOptimizedDepth = column;
                            while (--resetOptimizedDepth >= -1) {
                                if (!!(reference = refsByCols[resetOptimizedDepth])) {
                                    i = j = -1;
                                    n = reference.length;
                                    offset = n - ++resetOptimizedDepth;
                                    while (++i < n) {
                                        optimizedPath[++j] = reference[i];
                                    }
                                    while (resetOptimizedDepth < column) {
                                        optimizedPath[++j] = requestedPath[resetOptimizedDepth++];
                                    }
                                    optimizedPath.length = offset + resetOptimizedDepth;
                                    break;
                                }
                            }
                            contextParent = context = contexts[column - 1];
                            messageParent = message = messages[column - 1];
                            contextParent = contexts[column - 1];
                            resolvePath:
                                do {
                                    for (; column < length; ++column) {
                                        key = path[column];
                                        messageParent = messages[column - 1];
                                        message = messages[column];
                                        isKeySet = messageParent[__IS_KEY_SET];
                                        key = isKeySet ? key[0] : key;
                                        requestedPath[requestedPath.length = column] = key;
                                        if (key != null && key !== __NULL) {
                                            jsonDepth = column;
                                            isKeySet = true;
                                            !!jsonCache && isKeySet === true && (jsonKeys[jsonDepth] = key);
                                            optimizedPath[optimizedPath.length = column + offset] = key;
                                            context = contextParent[key];
                                            if (context != null) {
                                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                    contextInvalidated = context != null && context[__INVALIDATED];
                                                    if (contextInvalidated === true === false) {
                                                        context.__invalidated = true;
                                                        context[$EXPIRES] = 0;
                                                        expired[++expiredLength] = context;
                                                        if (context != null && typeof context === 'object') {
                                                            head = root.__head;
                                                            tail = root.__tail;
                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                            context === head && (root.__head = root.__next = head = next);
                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                            context.__next = context.__prev = undefined;
                                                            head = tail = next = prev = undefined;
                                                        }
                                                    }
                                                    context = undefined;
                                                }
                                            }
                                            contextType = context != null && context[$TYPE];
                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                            branchKeyTmp = key;
                                            if ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue)) {
                                                expandsCount = -1;
                                                refsByCols[outermostColumn = column] = contextValue;
                                                do {
                                                    branchKeyTmp = key;
                                                    if ((context = context.__context) !== undefined) {
                                                        i = -1;
                                                        refLen = contextValue.length;
                                                        offset = refLen - column - 1;
                                                        optimizedPath.length = refLen;
                                                        while (++i < refLen) {
                                                            optimizedPath[i] = contextValue[i];
                                                        }
                                                        if (context != null) {
                                                            if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                                contextInvalidated = context != null && context[__INVALIDATED];
                                                                if (contextInvalidated === true === false) {
                                                                    context.__invalidated = true;
                                                                    context[$EXPIRES] = 0;
                                                                    expired[++expiredLength] = context;
                                                                    if (context != null && typeof context === 'object') {
                                                                        head = root.__head;
                                                                        tail = root.__tail;
                                                                        (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                        (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                        context === head && (root.__head = root.__next = head = next);
                                                                        context === tail && (root.__tail = root.__prev = tail = prev);
                                                                        context.__next = context.__prev = undefined;
                                                                        head = tail = next = prev = undefined;
                                                                    }
                                                                }
                                                                context = undefined;
                                                            }
                                                        }
                                                        contextType = context != null && context[$TYPE];
                                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                                        if (contextType === 'error') {
                                                            expandsCount = 0;
                                                            break resolvePath;
                                                        } else if (context != null === false) {
                                                            expandsCount = -1;
                                                            break resolvePath;
                                                        }
                                                        contextParent = context;
                                                    } else {
                                                        refsByCols[outermostColumn = column] = contextValue;
                                                        outermostLength = length;
                                                        outermostPath = path;
                                                        offset = 0;
                                                        column = -1;
                                                        path = contextValue;
                                                        length = path.length - 1;
                                                        contextParent = contextCache;
                                                        while (++column < length) {
                                                            if ((key = path[column]) == null) {
                                                                continue;
                                                            }
                                                            optimizedPath[optimizedPath.length = column + offset] = key;
                                                            context = contextParent[key];
                                                            if (context != null) {
                                                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                                    contextInvalidated = context != null && context[__INVALIDATED];
                                                                    if (contextInvalidated === true === false) {
                                                                        context.__invalidated = true;
                                                                        context[$EXPIRES] = 0;
                                                                        expired[++expiredLength] = context;
                                                                        if (context != null && typeof context === 'object') {
                                                                            head = root.__head;
                                                                            tail = root.__tail;
                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                            context === head && (root.__head = root.__next = head = next);
                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                            context.__next = context.__prev = undefined;
                                                                            head = tail = next = prev = undefined;
                                                                        }
                                                                    }
                                                                    context = undefined;
                                                                }
                                                            }
                                                            contextType = context != null && context[$TYPE];
                                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                                            if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                sizeOffset = 0;
                                                                message = {};
                                                                messageSize = message != null && message[$SIZE] || 0;
                                                                do {
                                                                    if (key != null && key !== __NULL) {
                                                                        if (context != null && context !== message) {
                                                                            contextRefsLength = context.__refsLength || 0;
                                                                            messageRefsLength = message.__refsLength || 0;
                                                                            i = -1;
                                                                            while (++i < contextRefsLength) {
                                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                                    reference[__CONTEXT] = message;
                                                                                    message[__REF + (messageRefsLength + i)] = reference;
                                                                                    context[__REF + i] = undefined;
                                                                                }
                                                                            }
                                                                            message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                                            context[__REFS_LENGTH] = reference = undefined;
                                                                            contextLeafStack = [];
                                                                            contextLeafDepth = 0;
                                                                            keyTmp = key;
                                                                            contextTmp = context;
                                                                            contextParentTmp = contextParent;
                                                                            contextTypeTmp = contextType;
                                                                            recursing:
                                                                                while (contextLeafDepth > -1) {
                                                                                    if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                                                                        contextRefsLength = context.__refsLength || 0;
                                                                                        i = -1;
                                                                                        while (++i < contextRefsLength) {
                                                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                                                reference.__context = undefined;
                                                                                                context[__REF + i] = undefined;
                                                                                            }
                                                                                        }
                                                                                        context.__refsLength = undefined;
                                                                                        contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                                        if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                            i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                            n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                            while (++i <= n) {
                                                                                                referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                            }
                                                                                            referenceContext[__REFS_LENGTH] = n;
                                                                                            contextValue[__REF_INDEX] = undefined;
                                                                                            contextValue[__CONTEXT] = undefined;
                                                                                            referenceContext = undefined;
                                                                                        }
                                                                                        if (context != null && typeof context === 'object') {
                                                                                            head = root.__head;
                                                                                            tail = root.__tail;
                                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                            context === head && (root.__head = root.__next = head = next);
                                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                            context.__next = context.__prev = undefined;
                                                                                            head = tail = next = prev = undefined;
                                                                                        }
                                                                                        context = contextParent;
                                                                                        contextParent = contextLeaves && contextLeaves.parent;
                                                                                        contextLeafStack[contextLeafDepth--] = undefined;
                                                                                        contextType = context != null && context[$TYPE];
                                                                                        continue;
                                                                                    }
                                                                                    if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                                        contextLeafKeys = Object.keys(context);
                                                                                        contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                                        contextLeaves.parent = contextParent;
                                                                                        i = -1;
                                                                                        n = contextLeafKeys.length;
                                                                                        while (++i < n) {
                                                                                            if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                                contextLeaves[i] = context[contextLeafKey];
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    contextParent = context;
                                                                                    if (context = contextLeaves.pop()) {
                                                                                        contextLeafDepth++;
                                                                                        contextType = context != null && context[$TYPE];
                                                                                    } else {
                                                                                        contextType = 'leaf';
                                                                                        context = contextParent;
                                                                                        contextParent = contextLeaves.parent;
                                                                                    }
                                                                                    continue;
                                                                                }
                                                                            key = keyTmp;
                                                                            context = contextTmp;
                                                                            contextParent = contextParentTmp;
                                                                            contextType = contextTypeTmp;
                                                                            contextTmp = contextTypeTmp = undefined;
                                                                            if (context != null && typeof context === 'object') {
                                                                                head = root.__head;
                                                                                tail = root.__tail;
                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                context.__next = context.__prev = undefined;
                                                                                head = tail = next = prev = undefined;
                                                                            }
                                                                        }
                                                                        message[$SIZE] = messageSize - sizeOffset;
                                                                        contextParent[key] = context = message;
                                                                        break;
                                                                    }
                                                                    context = contexts[--column];
                                                                    key = context[__KEY];
                                                                    contextParent = contexts[column - 1] || contextCache;
                                                                } while (column > -1);
                                                                context[__SELF] = context;
                                                                context[__KEY] = key;
                                                                context[__PARENT] = contextParent;
                                                                context[__ROOT] = contextCache;
                                                                if (context[__GENERATION] === undefined) {
                                                                    context[__GENERATION] = 0;
                                                                }
                                                                contextType = context != null && context[$TYPE];
                                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                            }
                                                            if (context === undefined) {
                                                                i = -1;
                                                                refLen = path.length;
                                                                offset = refLen - column - 1;
                                                                optimizedPath.length = refLen;
                                                                while (++i < refLen) {
                                                                    optimizedPath[i] = path[i];
                                                                }
                                                                break;
                                                            } else if (!!contextType || Array.isArray(contextValue)) {
                                                                break;
                                                            }
                                                            contextParent = context;
                                                        }
                                                        if (column === length) {
                                                            if ((key = path[column]) != null) {
                                                                optimizedPath[optimizedPath.length = column + offset] = key;
                                                                context = contextParent[key];
                                                                if (context != null) {
                                                                    if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                                        contextInvalidated = context != null && context[__INVALIDATED];
                                                                        if (contextInvalidated === true === false) {
                                                                            context.__invalidated = true;
                                                                            context[$EXPIRES] = 0;
                                                                            expired[++expiredLength] = context;
                                                                            if (context != null && typeof context === 'object') {
                                                                                head = root.__head;
                                                                                tail = root.__tail;
                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                context.__next = context.__prev = undefined;
                                                                                head = tail = next = prev = undefined;
                                                                            }
                                                                        }
                                                                        context = undefined;
                                                                    }
                                                                }
                                                                contextType = context != null && context[$TYPE];
                                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                                if ((!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) && !Array.isArray(contextValue)) {
                                                                    sizeOffset = 0;
                                                                    message = {};
                                                                    messageSize = message != null && message[$SIZE] || 0;
                                                                    do {
                                                                        if (key != null && key !== __NULL) {
                                                                            if (context != null && context !== message) {
                                                                                contextRefsLength = context.__refsLength || 0;
                                                                                messageRefsLength = message.__refsLength || 0;
                                                                                i = -1;
                                                                                while (++i < contextRefsLength) {
                                                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                                                        reference[__CONTEXT] = message;
                                                                                        message[__REF + (messageRefsLength + i)] = reference;
                                                                                        context[__REF + i] = undefined;
                                                                                    }
                                                                                }
                                                                                message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                                                context[__REFS_LENGTH] = reference = undefined;
                                                                                contextLeafStack = [];
                                                                                contextLeafDepth = 0;
                                                                                keyTmp = key;
                                                                                contextTmp = context;
                                                                                contextParentTmp = contextParent;
                                                                                contextTypeTmp = contextType;
                                                                                recursing:
                                                                                    while (contextLeafDepth > -1) {
                                                                                        if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                                                                            contextRefsLength = context.__refsLength || 0;
                                                                                            i = -1;
                                                                                            while (++i < contextRefsLength) {
                                                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                                                    reference.__context = undefined;
                                                                                                    context[__REF + i] = undefined;
                                                                                                }
                                                                                            }
                                                                                            context.__refsLength = undefined;
                                                                                            contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                                            if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                                i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                                n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                                while (++i <= n) {
                                                                                                    referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                                }
                                                                                                referenceContext[__REFS_LENGTH] = n;
                                                                                                contextValue[__REF_INDEX] = undefined;
                                                                                                contextValue[__CONTEXT] = undefined;
                                                                                                referenceContext = undefined;
                                                                                            }
                                                                                            if (context != null && typeof context === 'object') {
                                                                                                head = root.__head;
                                                                                                tail = root.__tail;
                                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                                context.__next = context.__prev = undefined;
                                                                                                head = tail = next = prev = undefined;
                                                                                            }
                                                                                            context = contextParent;
                                                                                            contextParent = contextLeaves && contextLeaves.parent;
                                                                                            contextLeafStack[contextLeafDepth--] = undefined;
                                                                                            contextType = context != null && context[$TYPE];
                                                                                            continue;
                                                                                        }
                                                                                        if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                                            contextLeafKeys = Object.keys(context);
                                                                                            contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                                            contextLeaves.parent = contextParent;
                                                                                            i = -1;
                                                                                            n = contextLeafKeys.length;
                                                                                            while (++i < n) {
                                                                                                if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                                    contextLeaves[i] = context[contextLeafKey];
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        contextParent = context;
                                                                                        if (context = contextLeaves.pop()) {
                                                                                            contextLeafDepth++;
                                                                                            contextType = context != null && context[$TYPE];
                                                                                        } else {
                                                                                            contextType = 'leaf';
                                                                                            context = contextParent;
                                                                                            contextParent = contextLeaves.parent;
                                                                                        }
                                                                                        continue;
                                                                                    }
                                                                                key = keyTmp;
                                                                                context = contextTmp;
                                                                                contextParent = contextParentTmp;
                                                                                contextType = contextTypeTmp;
                                                                                contextTmp = contextTypeTmp = undefined;
                                                                                if (context != null && typeof context === 'object') {
                                                                                    head = root.__head;
                                                                                    tail = root.__tail;
                                                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                    context === head && (root.__head = root.__next = head = next);
                                                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                    context.__next = context.__prev = undefined;
                                                                                    head = tail = next = prev = undefined;
                                                                                }
                                                                            }
                                                                            message[$SIZE] = messageSize - sizeOffset;
                                                                            contextParent[key] = context = message;
                                                                            break;
                                                                        }
                                                                        context = contexts[--column];
                                                                        key = context[__KEY];
                                                                        contextParent = contexts[column - 1] || contextCache;
                                                                    } while (column > -1);
                                                                    context[__SELF] = context;
                                                                    context[__KEY] = key;
                                                                    context[__PARENT] = contextParent;
                                                                    context[__ROOT] = contextCache;
                                                                    if (context[__GENERATION] === undefined) {
                                                                        context[__GENERATION] = 0;
                                                                    }
                                                                    contextType = context != null && context[$TYPE];
                                                                    contextValue = contextType === 'sentinel' ? context.value : context;
                                                                }
                                                            }
                                                            if (context != null) {
                                                                if ((refContainer = path[__CONTAINER] || path).__context === undefined) {
                                                                    backRefs = context.__refsLength || 0;
                                                                    context['__ref' + backRefs] = refContainer;
                                                                    context.__refsLength = backRefs + 1;
                                                                    refContainer.__refIndex = backRefs;
                                                                    refContainer.__context = context;
                                                                    refContainer = backRefs = undefined;
                                                                }
                                                            }
                                                        }
                                                        expandsCount = Number(contextType === 'error') - 1;
                                                        column = outermostColumn;
                                                        path = outermostPath;
                                                        offset = length - column;
                                                        length = outermostLength;
                                                        key = branchKeyTmp;
                                                        outermostColumn = undefined;
                                                        outermostPath = undefined;
                                                        outermostLength = undefined;
                                                        branchKeyTmp = undefined;
                                                    }
                                                } while ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue));
                                            } else if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                sizeOffset = 0;
                                                message = {};
                                                messageSize = message != null && message[$SIZE] || 0;
                                                do {
                                                    if (key != null && key !== __NULL) {
                                                        if (context != null && context !== message) {
                                                            contextRefsLength = context.__refsLength || 0;
                                                            messageRefsLength = message.__refsLength || 0;
                                                            i = -1;
                                                            while (++i < contextRefsLength) {
                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                    reference[__CONTEXT] = message;
                                                                    message[__REF + (messageRefsLength + i)] = reference;
                                                                    context[__REF + i] = undefined;
                                                                }
                                                            }
                                                            message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                            context[__REFS_LENGTH] = reference = undefined;
                                                            contextLeafStack = [];
                                                            contextLeafDepth = 0;
                                                            keyTmp = key;
                                                            contextTmp = context;
                                                            contextParentTmp = contextParent;
                                                            contextTypeTmp = contextType;
                                                            recursing:
                                                                while (contextLeafDepth > -1) {
                                                                    if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                                                        contextRefsLength = context.__refsLength || 0;
                                                                        i = -1;
                                                                        while (++i < contextRefsLength) {
                                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                                reference.__context = undefined;
                                                                                context[__REF + i] = undefined;
                                                                            }
                                                                        }
                                                                        context.__refsLength = undefined;
                                                                        contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                        if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                            i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                            n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                            while (++i <= n) {
                                                                                referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                            }
                                                                            referenceContext[__REFS_LENGTH] = n;
                                                                            contextValue[__REF_INDEX] = undefined;
                                                                            contextValue[__CONTEXT] = undefined;
                                                                            referenceContext = undefined;
                                                                        }
                                                                        if (context != null && typeof context === 'object') {
                                                                            head = root.__head;
                                                                            tail = root.__tail;
                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                            context === head && (root.__head = root.__next = head = next);
                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                            context.__next = context.__prev = undefined;
                                                                            head = tail = next = prev = undefined;
                                                                        }
                                                                        context = contextParent;
                                                                        contextParent = contextLeaves && contextLeaves.parent;
                                                                        contextLeafStack[contextLeafDepth--] = undefined;
                                                                        contextType = context != null && context[$TYPE];
                                                                        continue;
                                                                    }
                                                                    if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                        contextLeafKeys = Object.keys(context);
                                                                        contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                        contextLeaves.parent = contextParent;
                                                                        i = -1;
                                                                        n = contextLeafKeys.length;
                                                                        while (++i < n) {
                                                                            if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                contextLeaves[i] = context[contextLeafKey];
                                                                            }
                                                                        }
                                                                    }
                                                                    contextParent = context;
                                                                    if (context = contextLeaves.pop()) {
                                                                        contextLeafDepth++;
                                                                        contextType = context != null && context[$TYPE];
                                                                    } else {
                                                                        contextType = 'leaf';
                                                                        context = contextParent;
                                                                        contextParent = contextLeaves.parent;
                                                                    }
                                                                    continue;
                                                                }
                                                            key = keyTmp;
                                                            context = contextTmp;
                                                            contextParent = contextParentTmp;
                                                            contextType = contextTypeTmp;
                                                            contextTmp = contextTypeTmp = undefined;
                                                            if (context != null && typeof context === 'object') {
                                                                head = root.__head;
                                                                tail = root.__tail;
                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                context === head && (root.__head = root.__next = head = next);
                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                context.__next = context.__prev = undefined;
                                                                head = tail = next = prev = undefined;
                                                            }
                                                        }
                                                        message[$SIZE] = messageSize - sizeOffset;
                                                        contextParent[key] = context = message;
                                                        break;
                                                    }
                                                    context = contexts[--column];
                                                    key = context[__KEY];
                                                    contextParent = contexts[column - 1] || contextCache;
                                                } while (column > -1);
                                                context[__SELF] = context;
                                                context[__KEY] = key;
                                                context[__PARENT] = contextParent;
                                                context[__ROOT] = contextCache;
                                                if (context[__GENERATION] === undefined) {
                                                    context[__GENERATION] = 0;
                                                }
                                                contextType = context != null && context[$TYPE];
                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                            }
                                            key = branchKeyTmp;
                                            contexts[column] = contextParent = context;
                                            if (!!jsonCache && isKeySet === true) {
                                                do {
                                                    jsonKey = jsonKeys[jsonDepth];
                                                } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                                                if (jsonKey != null && jsonKey !== __NULL) {
                                                    json = jsons[jsonDepth - 1] || jsonCache;
                                                } else {
                                                    json = jsonCache;
                                                }
                                                if (jsonKey != null && jsonKey !== __NULL) {
                                                    json = json[jsonKey] || (json[jsonKey] = {});
                                                    json[__KEY] = jsonKey;
                                                    json[__GENERATION] = context[__GENERATION] || 0;
                                                }
                                                jsons[jsonDepth] = json;
                                                jsonDepth += 1;
                                            }
                                        }
                                    }
                                    if (column === length) {
                                        key = path[column];
                                        messageParent = messages[column - 1];
                                        message = messages[column];
                                        isKeySet = messageParent[__IS_KEY_SET];
                                        key = isKeySet ? key[0] : key;
                                        requestedPath[requestedPath.length = column] = key;
                                        if (key != null && key !== __NULL) {
                                            jsonDepth = column;
                                            isKeySet = true;
                                            !!jsonCache && isKeySet === true && (jsonKeys[jsonDepth] = key);
                                            optimizedPath[optimizedPath.length = column + offset] = key;
                                            context = contextParent[key];
                                            if (context != null) {
                                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                    contextInvalidated = context != null && context[__INVALIDATED];
                                                    if (contextInvalidated === true === false) {
                                                        context.__invalidated = true;
                                                        context[$EXPIRES] = 0;
                                                        expired[++expiredLength] = context;
                                                        if (context != null && typeof context === 'object') {
                                                            head = root.__head;
                                                            tail = root.__tail;
                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                            context === head && (root.__head = root.__next = head = next);
                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                            context.__next = context.__prev = undefined;
                                                            head = tail = next = prev = undefined;
                                                        }
                                                    }
                                                    context = undefined;
                                                }
                                            }
                                            contextType = context != null && context[$TYPE];
                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                            contextTimestamp = context != null && context[$TIMESTAMP];
                                            messageType = message != null && message[$TYPE];
                                            messageValue = messageType === 'sentinel' ? message.value : message;
                                            messageTimestamp = message != null && message[$TIMESTAMP];
                                            messageExpires = (message != null || null) && message[$EXPIRES];
                                            if ((messageTimestamp < contextTimestamp || messageExpires === 0 && ((context = message) || true)) === false === true) {
                                                messageSize = message != null && message[$SIZE] || 0;
                                                originalMessageSize = messageSize || 0;
                                                if ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) {
                                                    messageType = 'array';
                                                    originalMessageSize = messageValue.length || 1;
                                                    messageSize = (messageType === 'sentinel' && 50 || 0) + originalMessageSize;
                                                    messageValue[__CONTAINER] = message;
                                                } else if (messageType === 'sentinel') {
                                                    messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                } else if (messageType === 'error') {
                                                    if (typeof errorSelector === 'function') {
                                                        message = Enumerable.errorSelector(message);
                                                    }
                                                    messageSize = 50 + originalMessageSize;
                                                } else if (messageValue == null || typeof messageValue !== 'object') {
                                                    originalMessageSize = typeof messageValue === 'string' && messageValue.length || 1;
                                                    messageSize = 50 + originalMessageSize;
                                                    messageType = 'sentinel';
                                                    message = {
                                                        '$type': messageType,
                                                        'value': messageValue
                                                    };
                                                } else {
                                                    messageSize = message[$SIZE] || 50 * 2;
                                                    messageType = message[$TYPE] = messageType || 'leaf';
                                                }
                                                message[$SIZE] = sizeOffset = messageSize;
                                                if (!!((messageExpires = (message != null || null) && message[$EXPIRES]) != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < now())) === false) {
                                                    messageSize = message != null && message[$SIZE] || 0;
                                                    do {
                                                        if (key != null && key !== __NULL) {
                                                            if (context != null && context !== message) {
                                                                contextRefsLength = context.__refsLength || 0;
                                                                messageRefsLength = message.__refsLength || 0;
                                                                i = -1;
                                                                while (++i < contextRefsLength) {
                                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                                        reference[__CONTEXT] = message;
                                                                        message[__REF + (messageRefsLength + i)] = reference;
                                                                        context[__REF + i] = undefined;
                                                                    }
                                                                }
                                                                message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                                context[__REFS_LENGTH] = reference = undefined;
                                                                contextLeafStack = [];
                                                                contextLeafDepth = 0;
                                                                keyTmp = key;
                                                                contextTmp = context;
                                                                contextParentTmp = contextParent;
                                                                contextTypeTmp = contextType;
                                                                recursing:
                                                                    while (contextLeafDepth > -1) {
                                                                        if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                                                            contextRefsLength = context.__refsLength || 0;
                                                                            i = -1;
                                                                            while (++i < contextRefsLength) {
                                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                                    reference.__context = undefined;
                                                                                    context[__REF + i] = undefined;
                                                                                }
                                                                            }
                                                                            context.__refsLength = undefined;
                                                                            contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                            if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                while (++i <= n) {
                                                                                    referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                }
                                                                                referenceContext[__REFS_LENGTH] = n;
                                                                                contextValue[__REF_INDEX] = undefined;
                                                                                contextValue[__CONTEXT] = undefined;
                                                                                referenceContext = undefined;
                                                                            }
                                                                            if (context != null && typeof context === 'object') {
                                                                                head = root.__head;
                                                                                tail = root.__tail;
                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                context.__next = context.__prev = undefined;
                                                                                head = tail = next = prev = undefined;
                                                                            }
                                                                            context = contextParent;
                                                                            contextParent = contextLeaves && contextLeaves.parent;
                                                                            contextLeafStack[contextLeafDepth--] = undefined;
                                                                            contextType = context != null && context[$TYPE];
                                                                            continue;
                                                                        }
                                                                        if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                            contextLeafKeys = Object.keys(context);
                                                                            contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                            contextLeaves.parent = contextParent;
                                                                            i = -1;
                                                                            n = contextLeafKeys.length;
                                                                            while (++i < n) {
                                                                                if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                    contextLeaves[i] = context[contextLeafKey];
                                                                                }
                                                                            }
                                                                        }
                                                                        contextParent = context;
                                                                        if (context = contextLeaves.pop()) {
                                                                            contextLeafDepth++;
                                                                            contextType = context != null && context[$TYPE];
                                                                        } else {
                                                                            contextType = 'leaf';
                                                                            context = contextParent;
                                                                            contextParent = contextLeaves.parent;
                                                                        }
                                                                        continue;
                                                                    }
                                                                key = keyTmp;
                                                                context = contextTmp;
                                                                contextParent = contextParentTmp;
                                                                contextType = contextTypeTmp;
                                                                contextTmp = contextTypeTmp = undefined;
                                                                if (context != null && typeof context === 'object') {
                                                                    head = root.__head;
                                                                    tail = root.__tail;
                                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                    context === head && (root.__head = root.__next = head = next);
                                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                                    context.__next = context.__prev = undefined;
                                                                    head = tail = next = prev = undefined;
                                                                }
                                                            }
                                                            message[$SIZE] = messageSize - sizeOffset;
                                                            contextParent[key] = context = message;
                                                            break;
                                                        }
                                                        context = contexts[--column];
                                                        key = context[__KEY];
                                                        contextParent = contexts[column - 1] || contextCache;
                                                    } while (column > -1);
                                                    context[__SELF] = context;
                                                    context[__KEY] = key;
                                                    context[__PARENT] = contextParent;
                                                    context[__ROOT] = contextCache;
                                                    if (context[__GENERATION] === undefined) {
                                                        context[__GENERATION] = 0;
                                                    }
                                                    contextTmp = context;
                                                    contextParentTmp = contextParent;
                                                    while (context !== undefined) {
                                                        contextSize = context['$size'] = (context['$size'] || 0) + sizeOffset;
                                                        contextTmp2 = context;
                                                        if (context[__GENERATION_UPDATED] !== generation) {
                                                            generationStack = [];
                                                            generationDepth = 0;
                                                            while (generationDepth > -1) {
                                                                if ((generationReferences = generationStack[generationDepth]) === undefined) {
                                                                    i = k = -1;
                                                                    n = context[__REFS_LENGTH] || 0;
                                                                    generationStack[generationDepth] = generationReferences = [];
                                                                    context[__GENERATION_UPDATED] = generation;
                                                                    context[__GENERATION] = (context[__GENERATION] || 0) + 1;
                                                                    if ((reference = context[__PARENT]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                        generationReferences[++k] = reference;
                                                                    }
                                                                    while (++i < n) {
                                                                        if ((reference = context[__REF + i]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                            generationReferences[++k] = reference;
                                                                        }
                                                                    }
                                                                }
                                                                if ((context = generationReferences.pop()) !== undefined) {
                                                                    ++generationDepth;
                                                                } else {
                                                                    generationStack[generationDepth--] = undefined;
                                                                }
                                                            }
                                                        }
                                                        reference = generationStack = generationReferences = undefined;
                                                        context = contextTmp2;
                                                        if ((contextParent = context[__PARENT]) !== undefined && contextSize <= 0) {
                                                            contextRefsLength = context.__refsLength || 0;
                                                            i = -1;
                                                            while (++i < contextRefsLength) {
                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                    reference.__context = undefined;
                                                                    context[__REF + i] = undefined;
                                                                }
                                                            }
                                                            context.__refsLength = undefined;
                                                            contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                            if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                while (++i <= n) {
                                                                    referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                }
                                                                referenceContext[__REFS_LENGTH] = n;
                                                                contextValue[__REF_INDEX] = undefined;
                                                                contextValue[__CONTEXT] = undefined;
                                                                referenceContext = undefined;
                                                            }
                                                            if (context != null && typeof context === 'object') {
                                                                head = root.__head;
                                                                tail = root.__tail;
                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                context === head && (root.__head = root.__next = head = next);
                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                context.__next = context.__prev = undefined;
                                                                head = tail = next = prev = undefined;
                                                            }
                                                        }
                                                        context = contextParent;
                                                    }
                                                    context = contextTmp;
                                                    contextParent = contextParentTmp;
                                                    contextTmp = contextTmp2 = contextParentTmp = undefined;
                                                    contextType = context != null && context[$TYPE];
                                                    contextValue = contextType === 'sentinel' ? context.value : context;
                                                }
                                            }
                                        }
                                    }
                                    break resolvePath;
                                } while (true);
                            if (context != null) {
                                if (context != null && typeof context === 'object' && contextExpires !== 1) {
                                    head = root.__head;
                                    tail = root.__tail;
                                    next = context.__next, prev = context.__prev;
                                    if (context !== head) {
                                        next && (next != null && typeof next === 'object') && (next.__prev = prev);
                                        prev && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                        (next = head) && (head != null && typeof head === 'object') && (head.__prev = context);
                                        root.__head = root.__next = head = context;
                                        head.__next = next;
                                        head.__prev = undefined;
                                    }
                                    if (tail == null || context === tail) {
                                        root.__tail = root.__prev = tail = prev || context;
                                    }
                                    head = tail = next = prev = undefined;
                                }
                                if (contextType === 'error') {
                                    if (expandsCount > -1) {
                                        requestedPath[requestedPath.length] = null;
                                    }
                                    contextValue = context;
                                }
                            }
                            if (context == null || refreshing === true) {
                                src = optimizedPath;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                opt = dest;
                                src = optimizedBoundPath;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                req = dest;
                                reqLen = n;
                                i = -1;
                                n = requestedPath.length;
                                while (++i < n) {
                                    key = path[i];
                                    key2 = requestedPath[i];
                                    req[reqLen + i] = key && typeof key === 'object' && [key2] || key2;
                                }
                                if (column < length) {
                                    j = column + 1;
                                    k = length + 1;
                                    reqLen = req.length;
                                    optLen = opt.length;
                                    i = -1;
                                    n = k - j;
                                    while (++i < n) {
                                        req[reqLen + i] = opt[optLen + i] = path[j + i];
                                    }
                                }
                                req.pathSetIndex = index;
                                requestedMissingPaths[requestedMissingPaths.length] = req;
                                optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                            } else if (contextValue !== undefined || boxed === true) {
                                src = optimizedPath;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                opt = dest;
                                src = requestedPath;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                req = dest;
                                requestedPaths[requestedPaths.length] = req;
                                optimizedPaths[optimizedPaths.length] = opt;
                                if (!!jsonCache) {
                                    hasValues = true;
                                    if (contextType === 'error') {
                                        if (err === undefined) {
                                            if (boxed === true) {
                                                err = context;
                                            } else {
                                                dest = {};
                                                src = context;
                                                keys = Object.keys(src);
                                                i = -1;
                                                n = keys.length;
                                                while (++i < n) {
                                                    x = keys[i];
                                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                                                }
                                                err = dest;
                                            }
                                            val = !!includeErrors && err || undefined;
                                        }
                                        errors[errors.length] = {
                                            path: req,
                                            value: err
                                        };
                                        err = undefined;
                                    } else {
                                        if (boxed === true) {
                                            val = context;
                                        } else if (contextValue != null && typeof contextValue === 'object') {
                                            if (Array.isArray(contextValue)) {
                                                src = contextValue;
                                                dest = new Array(n = src.length);
                                                i = -1;
                                                while (++i < n) {
                                                    dest[i] = src[i];
                                                }
                                                val = dest;
                                            } else {
                                                dest = {};
                                                src = contextValue;
                                                keys = Object.keys(src);
                                                i = -1;
                                                n = keys.length;
                                                while (++i < n) {
                                                    x = keys[i];
                                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                                                }
                                                val = dest;
                                            }
                                        } else {
                                            val = contextValue;
                                        }
                                    }
                                    do {
                                        jsonKey = jsonKeys[jsonDepth];
                                    } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                                    if (jsonKey != null && jsonKey !== __NULL) {
                                        json = jsons[jsonDepth - 1] || jsonCache;
                                    } else {
                                        json = jsonCache;
                                    }
                                    if (jsonKey != null && jsonKey !== __NULL) {
                                        json[jsonKey] = val;
                                    } else {
                                        json = jsons[jsonDepth] = val;
                                    }
                                    if (!boxed && !!val && typeof val === 'object' && !Array.isArray(val)) {
                                        val[$TYPE] = 'leaf';
                                    }
                                }
                            }
                            column = length;
                        }
                    }
                } else {
                    keys[__OFFSET] = 0;
                    length -= 1;
                    column -= 1;
                }
            }
            message = messages[length - 1];
        }
    }
    json = jsons[-1];
    if (!!values) {
        values[0] = hasValues && { json: json } || undefined;
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setJSONAsValues() {
    var returnBlocker;
    var generation, model, state, values, errorSelector, onNext, errors, boxed, includeErrors, refreshing, connected, root, contextCache, context, expired, expiredLength, boundPath, optimizedBoundPath, column, offset, jsonDepth, boundPathValue, contexts, requested, optimized, requestedPaths, optimizedPaths, requestedMissingPaths, optimizedMissingPaths, requestedPath, optimizedPath, pathMaps, messages, path, pbv, contextParent, index, count, refsByCols, length, message, pathSet, keys, key, isKeySet, isBranch, resetOptimizedDepth, reference, i, j, n, messageParent, contextExpires, contextInvalidated, head, tail, next, prev, contextType, contextValue, branchKeyTmp, expandsCount, outermostColumn, refLen, outermostLength, outermostPath, sizeOffset, messageSize, contextRefsLength, messageRefsLength, contextLeafStack, contextLeafDepth, keyTmp, contextTmp, contextParentTmp, contextTypeTmp, referenceContext, contextLeaves, contextLeafKeys, contextLeafKey, refContainer, backRefs, contextTimestamp, messageType, messageValue, messageTimestamp, messageExpires, originalMessageSize, contextSize, contextTmp2, generationStack, generationDepth, generationReferences, k, src, dest, opt, req, reqLen, key2, optLen, err, x, val;
    generation = __GENERATION_GENERATION++;
    model = arguments[0];
    state = arguments[1];
    values = arguments[2];
    errorSelector = arguments[3];
    if (typeof values === 'function') {
        onNext = values;
        values = undefined;
    }
    errors = state.errors || (state.errors = []);
    boxed = model._boxed;
    includeErrors = model._includeErrors;
    refreshing = model._refreshing;
    connected = model._connected;
    root = model._root;
    contextCache = context = model._cache;
    expired = root.expired;
    expiredLength = expired.length;
    boundPath = state.boundPath || model._path;
    optimizedBoundPath = [];
    column = state.column || (state.column = 0) - 1;
    offset = state.offset || (state.offset = 0);
    jsonDepth = state.jsonDepth || (state.jsonDepth = 0);
    boundPathValue = state.boundPathValue;
    contexts = state.contexts || (state.contexts = []);
    requested = state.requested || (state.requested = {});
    optimized = state.optimized || (state.optimized = {});
    requestedPaths = state.requestedPaths || (state.requestedPaths = []);
    optimizedPaths = state.optimizedPaths || (state.optimizedPaths = []);
    requestedMissingPaths = state.requestedMissingPaths || (state.requestedMissingPaths = []);
    optimizedMissingPaths = state.optimizedMissingPaths || (state.optimizedMissingPaths = []);
    requestedPath = state.requestedPath || (state.requestedPath = []);
    optimizedPath = state.optimizedPath || (state.optimizedPath = []);
    pathMaps = state;
    messages = state.messages || (state.messages = []);
    path = [];
    pbv = state.pbv || (state.pbv = {});
    pbv.path = requestedPath;
    !!values && (values.length = 0);
    optimizedBoundPath = boundPath;
    if (contextParent == null && (contextParent = model.__context) == null) {
        if (boundPath.length === 0) {
            contextParent = contextCache;
        } else {
            if (boundPathValue == null) {
                boundPathValue = getContextSync.call(model);
            }
            optimizedBoundPath = boundPathValue.path;
            if ((contextParent = boundPathValue.value) == null) {
                contextParent = {};
            }
            boundPathValue.requested = [];
            boundPathValue.optimized = [];
            state.boundPathValue = boundPathValue;
        }
    }
    contexts[-1] = context = contextParent;
    messages = state.messages || (state.messages = []);
    index = pathMaps.index || (pathMaps.index = 0);
    count = pathMaps.length;
    for (; index < count; ++index) {
        pathSet = pathMaps[index];
        offset = 0;
        refsByCols = state.refsByCols = [];
        refsByCols[-1] = optimizedBoundPath;
        path.length = 0;
        column = 0;
        length = 0;
        messages[-1] = message = pathSet;
        while (length > -1) {
            if (!!message) {
                keys = message[__KEYS] || (message[__KEYS] = Object.keys(message));
                keys[__OFFSET] || (keys[__OFFSET] = 0);
                if (keys.length === 0) {
                    length -= 1;
                    message = messages[length - 1];
                    keys = message[__KEYS];
                    keys[__OFFSET] -= 1;
                }
                if ((key = keys[++keys[__OFFSET] - 1]) !== undefined) {
                    key === __NULL && (key = null);
                    if (key == null || !(!(key[0] !== '_' || key[1] !== '_') || (key === __SELF || key === __PARENT || key === __ROOT) || key[0] === '$')) {
                        isKeySet = message[__IS_KEY_SET] = keys.length > 1;
                        path[length] = isKeySet && [key] || key;
                        message = messages[length] = message[key];
                        isBranch = !!message && typeof message === 'object' && !message[$TYPE] && !Array.isArray(message) && !(message[__KEYS] && message[__KEYS].length);
                        if (isBranch) {
                            length += 1;
                            continue;
                        } else {
                            resetOptimizedDepth = column;
                            while (--resetOptimizedDepth >= -1) {
                                if (!!(reference = refsByCols[resetOptimizedDepth])) {
                                    i = j = -1;
                                    n = reference.length;
                                    offset = n - ++resetOptimizedDepth;
                                    while (++i < n) {
                                        optimizedPath[++j] = reference[i];
                                    }
                                    while (resetOptimizedDepth < column) {
                                        optimizedPath[++j] = requestedPath[resetOptimizedDepth++];
                                    }
                                    optimizedPath.length = offset + resetOptimizedDepth;
                                    break;
                                }
                            }
                            contextParent = context = contexts[column - 1];
                            messageParent = message = messages[column - 1];
                            contextParent = contexts[column - 1];
                            resolvePath:
                                do {
                                    for (; column < length; ++column) {
                                        key = path[column];
                                        messageParent = messages[column - 1];
                                        message = messages[column];
                                        isKeySet = messageParent[__IS_KEY_SET];
                                        key = isKeySet ? key[0] : key;
                                        requestedPath[requestedPath.length = column] = key;
                                        if (key != null && key !== __NULL) {
                                            optimizedPath[optimizedPath.length = column + offset] = key;
                                            context = contextParent[key];
                                            if (context != null) {
                                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                    contextInvalidated = context != null && context[__INVALIDATED];
                                                    if (contextInvalidated === true === false) {
                                                        context.__invalidated = true;
                                                        context[$EXPIRES] = 0;
                                                        expired[++expiredLength] = context;
                                                        if (context != null && typeof context === 'object') {
                                                            head = root.__head;
                                                            tail = root.__tail;
                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                            context === head && (root.__head = root.__next = head = next);
                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                            context.__next = context.__prev = undefined;
                                                            head = tail = next = prev = undefined;
                                                        }
                                                    }
                                                    context = undefined;
                                                }
                                            }
                                            contextType = context != null && context[$TYPE];
                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                            branchKeyTmp = key;
                                            if ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue)) {
                                                expandsCount = -1;
                                                refsByCols[outermostColumn = column] = contextValue;
                                                do {
                                                    branchKeyTmp = key;
                                                    if ((context = context.__context) !== undefined) {
                                                        i = -1;
                                                        refLen = contextValue.length;
                                                        offset = refLen - column - 1;
                                                        optimizedPath.length = refLen;
                                                        while (++i < refLen) {
                                                            optimizedPath[i] = contextValue[i];
                                                        }
                                                        if (context != null) {
                                                            if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                                contextInvalidated = context != null && context[__INVALIDATED];
                                                                if (contextInvalidated === true === false) {
                                                                    context.__invalidated = true;
                                                                    context[$EXPIRES] = 0;
                                                                    expired[++expiredLength] = context;
                                                                    if (context != null && typeof context === 'object') {
                                                                        head = root.__head;
                                                                        tail = root.__tail;
                                                                        (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                        (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                        context === head && (root.__head = root.__next = head = next);
                                                                        context === tail && (root.__tail = root.__prev = tail = prev);
                                                                        context.__next = context.__prev = undefined;
                                                                        head = tail = next = prev = undefined;
                                                                    }
                                                                }
                                                                context = undefined;
                                                            }
                                                        }
                                                        contextType = context != null && context[$TYPE];
                                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                                        if (contextType === 'error') {
                                                            expandsCount = 0;
                                                            break resolvePath;
                                                        } else if (context != null === false) {
                                                            expandsCount = -1;
                                                            break resolvePath;
                                                        }
                                                        contextParent = context;
                                                    } else {
                                                        refsByCols[outermostColumn = column] = contextValue;
                                                        outermostLength = length;
                                                        outermostPath = path;
                                                        offset = 0;
                                                        column = -1;
                                                        path = contextValue;
                                                        length = path.length - 1;
                                                        contextParent = contextCache;
                                                        while (++column < length) {
                                                            if ((key = path[column]) == null) {
                                                                continue;
                                                            }
                                                            optimizedPath[optimizedPath.length = column + offset] = key;
                                                            context = contextParent[key];
                                                            if (context != null) {
                                                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                                    contextInvalidated = context != null && context[__INVALIDATED];
                                                                    if (contextInvalidated === true === false) {
                                                                        context.__invalidated = true;
                                                                        context[$EXPIRES] = 0;
                                                                        expired[++expiredLength] = context;
                                                                        if (context != null && typeof context === 'object') {
                                                                            head = root.__head;
                                                                            tail = root.__tail;
                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                            context === head && (root.__head = root.__next = head = next);
                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                            context.__next = context.__prev = undefined;
                                                                            head = tail = next = prev = undefined;
                                                                        }
                                                                    }
                                                                    context = undefined;
                                                                }
                                                            }
                                                            contextType = context != null && context[$TYPE];
                                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                                            if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                sizeOffset = 0;
                                                                message = {};
                                                                messageSize = message != null && message[$SIZE] || 0;
                                                                do {
                                                                    if (key != null && key !== __NULL) {
                                                                        if (context != null && context !== message) {
                                                                            contextRefsLength = context.__refsLength || 0;
                                                                            messageRefsLength = message.__refsLength || 0;
                                                                            i = -1;
                                                                            while (++i < contextRefsLength) {
                                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                                    reference[__CONTEXT] = message;
                                                                                    message[__REF + (messageRefsLength + i)] = reference;
                                                                                    context[__REF + i] = undefined;
                                                                                }
                                                                            }
                                                                            message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                                            context[__REFS_LENGTH] = reference = undefined;
                                                                            contextLeafStack = [];
                                                                            contextLeafDepth = 0;
                                                                            keyTmp = key;
                                                                            contextTmp = context;
                                                                            contextParentTmp = contextParent;
                                                                            contextTypeTmp = contextType;
                                                                            recursing:
                                                                                while (contextLeafDepth > -1) {
                                                                                    if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                                                                        contextRefsLength = context.__refsLength || 0;
                                                                                        i = -1;
                                                                                        while (++i < contextRefsLength) {
                                                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                                                reference.__context = undefined;
                                                                                                context[__REF + i] = undefined;
                                                                                            }
                                                                                        }
                                                                                        context.__refsLength = undefined;
                                                                                        contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                                        if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                            i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                            n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                            while (++i <= n) {
                                                                                                referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                            }
                                                                                            referenceContext[__REFS_LENGTH] = n;
                                                                                            contextValue[__REF_INDEX] = undefined;
                                                                                            contextValue[__CONTEXT] = undefined;
                                                                                            referenceContext = undefined;
                                                                                        }
                                                                                        if (context != null && typeof context === 'object') {
                                                                                            head = root.__head;
                                                                                            tail = root.__tail;
                                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                            context === head && (root.__head = root.__next = head = next);
                                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                            context.__next = context.__prev = undefined;
                                                                                            head = tail = next = prev = undefined;
                                                                                        }
                                                                                        context = contextParent;
                                                                                        contextParent = contextLeaves && contextLeaves.parent;
                                                                                        contextLeafStack[contextLeafDepth--] = undefined;
                                                                                        contextType = context != null && context[$TYPE];
                                                                                        continue;
                                                                                    }
                                                                                    if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                                        contextLeafKeys = Object.keys(context);
                                                                                        contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                                        contextLeaves.parent = contextParent;
                                                                                        i = -1;
                                                                                        n = contextLeafKeys.length;
                                                                                        while (++i < n) {
                                                                                            if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                                contextLeaves[i] = context[contextLeafKey];
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    contextParent = context;
                                                                                    if (context = contextLeaves.pop()) {
                                                                                        contextLeafDepth++;
                                                                                        contextType = context != null && context[$TYPE];
                                                                                    } else {
                                                                                        contextType = 'leaf';
                                                                                        context = contextParent;
                                                                                        contextParent = contextLeaves.parent;
                                                                                    }
                                                                                    continue;
                                                                                }
                                                                            key = keyTmp;
                                                                            context = contextTmp;
                                                                            contextParent = contextParentTmp;
                                                                            contextType = contextTypeTmp;
                                                                            contextTmp = contextTypeTmp = undefined;
                                                                            if (context != null && typeof context === 'object') {
                                                                                head = root.__head;
                                                                                tail = root.__tail;
                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                context.__next = context.__prev = undefined;
                                                                                head = tail = next = prev = undefined;
                                                                            }
                                                                        }
                                                                        message[$SIZE] = messageSize - sizeOffset;
                                                                        contextParent[key] = context = message;
                                                                        break;
                                                                    }
                                                                    context = contexts[--column];
                                                                    key = context[__KEY];
                                                                    contextParent = contexts[column - 1] || contextCache;
                                                                } while (column > -1);
                                                                context[__SELF] = context;
                                                                context[__KEY] = key;
                                                                context[__PARENT] = contextParent;
                                                                context[__ROOT] = contextCache;
                                                                if (context[__GENERATION] === undefined) {
                                                                    context[__GENERATION] = 0;
                                                                }
                                                                contextType = context != null && context[$TYPE];
                                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                            }
                                                            if (context === undefined) {
                                                                i = -1;
                                                                refLen = path.length;
                                                                offset = refLen - column - 1;
                                                                optimizedPath.length = refLen;
                                                                while (++i < refLen) {
                                                                    optimizedPath[i] = path[i];
                                                                }
                                                                break;
                                                            } else if (!!contextType || Array.isArray(contextValue)) {
                                                                break;
                                                            }
                                                            contextParent = context;
                                                        }
                                                        if (column === length) {
                                                            if ((key = path[column]) != null) {
                                                                optimizedPath[optimizedPath.length = column + offset] = key;
                                                                context = contextParent[key];
                                                                if (context != null) {
                                                                    if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                                        contextInvalidated = context != null && context[__INVALIDATED];
                                                                        if (contextInvalidated === true === false) {
                                                                            context.__invalidated = true;
                                                                            context[$EXPIRES] = 0;
                                                                            expired[++expiredLength] = context;
                                                                            if (context != null && typeof context === 'object') {
                                                                                head = root.__head;
                                                                                tail = root.__tail;
                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                context.__next = context.__prev = undefined;
                                                                                head = tail = next = prev = undefined;
                                                                            }
                                                                        }
                                                                        context = undefined;
                                                                    }
                                                                }
                                                                contextType = context != null && context[$TYPE];
                                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                                if ((!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) && !Array.isArray(contextValue)) {
                                                                    sizeOffset = 0;
                                                                    message = {};
                                                                    messageSize = message != null && message[$SIZE] || 0;
                                                                    do {
                                                                        if (key != null && key !== __NULL) {
                                                                            if (context != null && context !== message) {
                                                                                contextRefsLength = context.__refsLength || 0;
                                                                                messageRefsLength = message.__refsLength || 0;
                                                                                i = -1;
                                                                                while (++i < contextRefsLength) {
                                                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                                                        reference[__CONTEXT] = message;
                                                                                        message[__REF + (messageRefsLength + i)] = reference;
                                                                                        context[__REF + i] = undefined;
                                                                                    }
                                                                                }
                                                                                message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                                                context[__REFS_LENGTH] = reference = undefined;
                                                                                contextLeafStack = [];
                                                                                contextLeafDepth = 0;
                                                                                keyTmp = key;
                                                                                contextTmp = context;
                                                                                contextParentTmp = contextParent;
                                                                                contextTypeTmp = contextType;
                                                                                recursing:
                                                                                    while (contextLeafDepth > -1) {
                                                                                        if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                                                                            contextRefsLength = context.__refsLength || 0;
                                                                                            i = -1;
                                                                                            while (++i < contextRefsLength) {
                                                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                                                    reference.__context = undefined;
                                                                                                    context[__REF + i] = undefined;
                                                                                                }
                                                                                            }
                                                                                            context.__refsLength = undefined;
                                                                                            contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                                            if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                                i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                                n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                                while (++i <= n) {
                                                                                                    referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                                }
                                                                                                referenceContext[__REFS_LENGTH] = n;
                                                                                                contextValue[__REF_INDEX] = undefined;
                                                                                                contextValue[__CONTEXT] = undefined;
                                                                                                referenceContext = undefined;
                                                                                            }
                                                                                            if (context != null && typeof context === 'object') {
                                                                                                head = root.__head;
                                                                                                tail = root.__tail;
                                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                                context.__next = context.__prev = undefined;
                                                                                                head = tail = next = prev = undefined;
                                                                                            }
                                                                                            context = contextParent;
                                                                                            contextParent = contextLeaves && contextLeaves.parent;
                                                                                            contextLeafStack[contextLeafDepth--] = undefined;
                                                                                            contextType = context != null && context[$TYPE];
                                                                                            continue;
                                                                                        }
                                                                                        if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                                            contextLeafKeys = Object.keys(context);
                                                                                            contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                                            contextLeaves.parent = contextParent;
                                                                                            i = -1;
                                                                                            n = contextLeafKeys.length;
                                                                                            while (++i < n) {
                                                                                                if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                                    contextLeaves[i] = context[contextLeafKey];
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        contextParent = context;
                                                                                        if (context = contextLeaves.pop()) {
                                                                                            contextLeafDepth++;
                                                                                            contextType = context != null && context[$TYPE];
                                                                                        } else {
                                                                                            contextType = 'leaf';
                                                                                            context = contextParent;
                                                                                            contextParent = contextLeaves.parent;
                                                                                        }
                                                                                        continue;
                                                                                    }
                                                                                key = keyTmp;
                                                                                context = contextTmp;
                                                                                contextParent = contextParentTmp;
                                                                                contextType = contextTypeTmp;
                                                                                contextTmp = contextTypeTmp = undefined;
                                                                                if (context != null && typeof context === 'object') {
                                                                                    head = root.__head;
                                                                                    tail = root.__tail;
                                                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                    context === head && (root.__head = root.__next = head = next);
                                                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                    context.__next = context.__prev = undefined;
                                                                                    head = tail = next = prev = undefined;
                                                                                }
                                                                            }
                                                                            message[$SIZE] = messageSize - sizeOffset;
                                                                            contextParent[key] = context = message;
                                                                            break;
                                                                        }
                                                                        context = contexts[--column];
                                                                        key = context[__KEY];
                                                                        contextParent = contexts[column - 1] || contextCache;
                                                                    } while (column > -1);
                                                                    context[__SELF] = context;
                                                                    context[__KEY] = key;
                                                                    context[__PARENT] = contextParent;
                                                                    context[__ROOT] = contextCache;
                                                                    if (context[__GENERATION] === undefined) {
                                                                        context[__GENERATION] = 0;
                                                                    }
                                                                    contextType = context != null && context[$TYPE];
                                                                    contextValue = contextType === 'sentinel' ? context.value : context;
                                                                }
                                                            }
                                                            if (context != null) {
                                                                if ((refContainer = path[__CONTAINER] || path).__context === undefined) {
                                                                    backRefs = context.__refsLength || 0;
                                                                    context['__ref' + backRefs] = refContainer;
                                                                    context.__refsLength = backRefs + 1;
                                                                    refContainer.__refIndex = backRefs;
                                                                    refContainer.__context = context;
                                                                    refContainer = backRefs = undefined;
                                                                }
                                                            }
                                                        }
                                                        expandsCount = Number(contextType === 'error') - 1;
                                                        column = outermostColumn;
                                                        path = outermostPath;
                                                        offset = length - column;
                                                        length = outermostLength;
                                                        key = branchKeyTmp;
                                                        outermostColumn = undefined;
                                                        outermostPath = undefined;
                                                        outermostLength = undefined;
                                                        branchKeyTmp = undefined;
                                                    }
                                                } while ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue));
                                            } else if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                sizeOffset = 0;
                                                message = {};
                                                messageSize = message != null && message[$SIZE] || 0;
                                                do {
                                                    if (key != null && key !== __NULL) {
                                                        if (context != null && context !== message) {
                                                            contextRefsLength = context.__refsLength || 0;
                                                            messageRefsLength = message.__refsLength || 0;
                                                            i = -1;
                                                            while (++i < contextRefsLength) {
                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                    reference[__CONTEXT] = message;
                                                                    message[__REF + (messageRefsLength + i)] = reference;
                                                                    context[__REF + i] = undefined;
                                                                }
                                                            }
                                                            message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                            context[__REFS_LENGTH] = reference = undefined;
                                                            contextLeafStack = [];
                                                            contextLeafDepth = 0;
                                                            keyTmp = key;
                                                            contextTmp = context;
                                                            contextParentTmp = contextParent;
                                                            contextTypeTmp = contextType;
                                                            recursing:
                                                                while (contextLeafDepth > -1) {
                                                                    if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                                                        contextRefsLength = context.__refsLength || 0;
                                                                        i = -1;
                                                                        while (++i < contextRefsLength) {
                                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                                reference.__context = undefined;
                                                                                context[__REF + i] = undefined;
                                                                            }
                                                                        }
                                                                        context.__refsLength = undefined;
                                                                        contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                        if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                            i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                            n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                            while (++i <= n) {
                                                                                referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                            }
                                                                            referenceContext[__REFS_LENGTH] = n;
                                                                            contextValue[__REF_INDEX] = undefined;
                                                                            contextValue[__CONTEXT] = undefined;
                                                                            referenceContext = undefined;
                                                                        }
                                                                        if (context != null && typeof context === 'object') {
                                                                            head = root.__head;
                                                                            tail = root.__tail;
                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                            context === head && (root.__head = root.__next = head = next);
                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                            context.__next = context.__prev = undefined;
                                                                            head = tail = next = prev = undefined;
                                                                        }
                                                                        context = contextParent;
                                                                        contextParent = contextLeaves && contextLeaves.parent;
                                                                        contextLeafStack[contextLeafDepth--] = undefined;
                                                                        contextType = context != null && context[$TYPE];
                                                                        continue;
                                                                    }
                                                                    if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                        contextLeafKeys = Object.keys(context);
                                                                        contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                        contextLeaves.parent = contextParent;
                                                                        i = -1;
                                                                        n = contextLeafKeys.length;
                                                                        while (++i < n) {
                                                                            if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                contextLeaves[i] = context[contextLeafKey];
                                                                            }
                                                                        }
                                                                    }
                                                                    contextParent = context;
                                                                    if (context = contextLeaves.pop()) {
                                                                        contextLeafDepth++;
                                                                        contextType = context != null && context[$TYPE];
                                                                    } else {
                                                                        contextType = 'leaf';
                                                                        context = contextParent;
                                                                        contextParent = contextLeaves.parent;
                                                                    }
                                                                    continue;
                                                                }
                                                            key = keyTmp;
                                                            context = contextTmp;
                                                            contextParent = contextParentTmp;
                                                            contextType = contextTypeTmp;
                                                            contextTmp = contextTypeTmp = undefined;
                                                            if (context != null && typeof context === 'object') {
                                                                head = root.__head;
                                                                tail = root.__tail;
                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                context === head && (root.__head = root.__next = head = next);
                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                context.__next = context.__prev = undefined;
                                                                head = tail = next = prev = undefined;
                                                            }
                                                        }
                                                        message[$SIZE] = messageSize - sizeOffset;
                                                        contextParent[key] = context = message;
                                                        break;
                                                    }
                                                    context = contexts[--column];
                                                    key = context[__KEY];
                                                    contextParent = contexts[column - 1] || contextCache;
                                                } while (column > -1);
                                                context[__SELF] = context;
                                                context[__KEY] = key;
                                                context[__PARENT] = contextParent;
                                                context[__ROOT] = contextCache;
                                                if (context[__GENERATION] === undefined) {
                                                    context[__GENERATION] = 0;
                                                }
                                                contextType = context != null && context[$TYPE];
                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                            }
                                            key = branchKeyTmp;
                                            contexts[column] = contextParent = context;
                                        }
                                    }
                                    if (column === length) {
                                        key = path[column];
                                        messageParent = messages[column - 1];
                                        message = messages[column];
                                        isKeySet = messageParent[__IS_KEY_SET];
                                        key = isKeySet ? key[0] : key;
                                        requestedPath[requestedPath.length = column] = key;
                                        if (key != null && key !== __NULL) {
                                            optimizedPath[optimizedPath.length = column + offset] = key;
                                            context = contextParent[key];
                                            if (context != null) {
                                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                    contextInvalidated = context != null && context[__INVALIDATED];
                                                    if (contextInvalidated === true === false) {
                                                        context.__invalidated = true;
                                                        context[$EXPIRES] = 0;
                                                        expired[++expiredLength] = context;
                                                        if (context != null && typeof context === 'object') {
                                                            head = root.__head;
                                                            tail = root.__tail;
                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                            context === head && (root.__head = root.__next = head = next);
                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                            context.__next = context.__prev = undefined;
                                                            head = tail = next = prev = undefined;
                                                        }
                                                    }
                                                    context = undefined;
                                                }
                                            }
                                            contextType = context != null && context[$TYPE];
                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                            contextTimestamp = context != null && context[$TIMESTAMP];
                                            messageType = message != null && message[$TYPE];
                                            messageValue = messageType === 'sentinel' ? message.value : message;
                                            messageTimestamp = message != null && message[$TIMESTAMP];
                                            messageExpires = (message != null || null) && message[$EXPIRES];
                                            if ((messageTimestamp < contextTimestamp || messageExpires === 0 && ((context = message) || true)) === false === true) {
                                                messageSize = message != null && message[$SIZE] || 0;
                                                originalMessageSize = messageSize || 0;
                                                if ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) {
                                                    messageType = 'array';
                                                    originalMessageSize = messageValue.length || 1;
                                                    messageSize = (messageType === 'sentinel' && 50 || 0) + originalMessageSize;
                                                    messageValue[__CONTAINER] = message;
                                                } else if (messageType === 'sentinel') {
                                                    messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                } else if (messageType === 'error') {
                                                    if (typeof errorSelector === 'function') {
                                                        message = Enumerable.errorSelector(message);
                                                    }
                                                    messageSize = 50 + originalMessageSize;
                                                } else if (messageValue == null || typeof messageValue !== 'object') {
                                                    originalMessageSize = typeof messageValue === 'string' && messageValue.length || 1;
                                                    messageSize = 50 + originalMessageSize;
                                                    messageType = 'sentinel';
                                                    message = {
                                                        '$type': messageType,
                                                        'value': messageValue
                                                    };
                                                } else {
                                                    messageSize = message[$SIZE] || 50 * 2;
                                                    messageType = message[$TYPE] = messageType || 'leaf';
                                                }
                                                message[$SIZE] = sizeOffset = messageSize;
                                                if (!!((messageExpires = (message != null || null) && message[$EXPIRES]) != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < now())) === false) {
                                                    messageSize = message != null && message[$SIZE] || 0;
                                                    do {
                                                        if (key != null && key !== __NULL) {
                                                            if (context != null && context !== message) {
                                                                contextRefsLength = context.__refsLength || 0;
                                                                messageRefsLength = message.__refsLength || 0;
                                                                i = -1;
                                                                while (++i < contextRefsLength) {
                                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                                        reference[__CONTEXT] = message;
                                                                        message[__REF + (messageRefsLength + i)] = reference;
                                                                        context[__REF + i] = undefined;
                                                                    }
                                                                }
                                                                message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                                context[__REFS_LENGTH] = reference = undefined;
                                                                contextLeafStack = [];
                                                                contextLeafDepth = 0;
                                                                keyTmp = key;
                                                                contextTmp = context;
                                                                contextParentTmp = contextParent;
                                                                contextTypeTmp = contextType;
                                                                recursing:
                                                                    while (contextLeafDepth > -1) {
                                                                        if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                                                            contextRefsLength = context.__refsLength || 0;
                                                                            i = -1;
                                                                            while (++i < contextRefsLength) {
                                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                                    reference.__context = undefined;
                                                                                    context[__REF + i] = undefined;
                                                                                }
                                                                            }
                                                                            context.__refsLength = undefined;
                                                                            contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                            if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                while (++i <= n) {
                                                                                    referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                }
                                                                                referenceContext[__REFS_LENGTH] = n;
                                                                                contextValue[__REF_INDEX] = undefined;
                                                                                contextValue[__CONTEXT] = undefined;
                                                                                referenceContext = undefined;
                                                                            }
                                                                            if (context != null && typeof context === 'object') {
                                                                                head = root.__head;
                                                                                tail = root.__tail;
                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                context.__next = context.__prev = undefined;
                                                                                head = tail = next = prev = undefined;
                                                                            }
                                                                            context = contextParent;
                                                                            contextParent = contextLeaves && contextLeaves.parent;
                                                                            contextLeafStack[contextLeafDepth--] = undefined;
                                                                            contextType = context != null && context[$TYPE];
                                                                            continue;
                                                                        }
                                                                        if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                            contextLeafKeys = Object.keys(context);
                                                                            contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                            contextLeaves.parent = contextParent;
                                                                            i = -1;
                                                                            n = contextLeafKeys.length;
                                                                            while (++i < n) {
                                                                                if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                    contextLeaves[i] = context[contextLeafKey];
                                                                                }
                                                                            }
                                                                        }
                                                                        contextParent = context;
                                                                        if (context = contextLeaves.pop()) {
                                                                            contextLeafDepth++;
                                                                            contextType = context != null && context[$TYPE];
                                                                        } else {
                                                                            contextType = 'leaf';
                                                                            context = contextParent;
                                                                            contextParent = contextLeaves.parent;
                                                                        }
                                                                        continue;
                                                                    }
                                                                key = keyTmp;
                                                                context = contextTmp;
                                                                contextParent = contextParentTmp;
                                                                contextType = contextTypeTmp;
                                                                contextTmp = contextTypeTmp = undefined;
                                                                if (context != null && typeof context === 'object') {
                                                                    head = root.__head;
                                                                    tail = root.__tail;
                                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                    context === head && (root.__head = root.__next = head = next);
                                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                                    context.__next = context.__prev = undefined;
                                                                    head = tail = next = prev = undefined;
                                                                }
                                                            }
                                                            message[$SIZE] = messageSize - sizeOffset;
                                                            contextParent[key] = context = message;
                                                            break;
                                                        }
                                                        context = contexts[--column];
                                                        key = context[__KEY];
                                                        contextParent = contexts[column - 1] || contextCache;
                                                    } while (column > -1);
                                                    context[__SELF] = context;
                                                    context[__KEY] = key;
                                                    context[__PARENT] = contextParent;
                                                    context[__ROOT] = contextCache;
                                                    if (context[__GENERATION] === undefined) {
                                                        context[__GENERATION] = 0;
                                                    }
                                                    contextTmp = context;
                                                    contextParentTmp = contextParent;
                                                    while (context !== undefined) {
                                                        contextSize = context['$size'] = (context['$size'] || 0) + sizeOffset;
                                                        contextTmp2 = context;
                                                        if (context[__GENERATION_UPDATED] !== generation) {
                                                            generationStack = [];
                                                            generationDepth = 0;
                                                            while (generationDepth > -1) {
                                                                if ((generationReferences = generationStack[generationDepth]) === undefined) {
                                                                    i = k = -1;
                                                                    n = context[__REFS_LENGTH] || 0;
                                                                    generationStack[generationDepth] = generationReferences = [];
                                                                    context[__GENERATION_UPDATED] = generation;
                                                                    context[__GENERATION] = (context[__GENERATION] || 0) + 1;
                                                                    if ((reference = context[__PARENT]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                        generationReferences[++k] = reference;
                                                                    }
                                                                    while (++i < n) {
                                                                        if ((reference = context[__REF + i]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                            generationReferences[++k] = reference;
                                                                        }
                                                                    }
                                                                }
                                                                if ((context = generationReferences.pop()) !== undefined) {
                                                                    ++generationDepth;
                                                                } else {
                                                                    generationStack[generationDepth--] = undefined;
                                                                }
                                                            }
                                                        }
                                                        reference = generationStack = generationReferences = undefined;
                                                        context = contextTmp2;
                                                        if ((contextParent = context[__PARENT]) !== undefined && contextSize <= 0) {
                                                            contextRefsLength = context.__refsLength || 0;
                                                            i = -1;
                                                            while (++i < contextRefsLength) {
                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                    reference.__context = undefined;
                                                                    context[__REF + i] = undefined;
                                                                }
                                                            }
                                                            context.__refsLength = undefined;
                                                            contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                            if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                while (++i <= n) {
                                                                    referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                }
                                                                referenceContext[__REFS_LENGTH] = n;
                                                                contextValue[__REF_INDEX] = undefined;
                                                                contextValue[__CONTEXT] = undefined;
                                                                referenceContext = undefined;
                                                            }
                                                            if (context != null && typeof context === 'object') {
                                                                head = root.__head;
                                                                tail = root.__tail;
                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                context === head && (root.__head = root.__next = head = next);
                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                context.__next = context.__prev = undefined;
                                                                head = tail = next = prev = undefined;
                                                            }
                                                        }
                                                        context = contextParent;
                                                    }
                                                    context = contextTmp;
                                                    contextParent = contextParentTmp;
                                                    contextTmp = contextTmp2 = contextParentTmp = undefined;
                                                    contextType = context != null && context[$TYPE];
                                                    contextValue = contextType === 'sentinel' ? context.value : context;
                                                }
                                            }
                                        }
                                    }
                                    break resolvePath;
                                } while (true);
                            if (context != null) {
                                if (context != null && typeof context === 'object' && contextExpires !== 1) {
                                    head = root.__head;
                                    tail = root.__tail;
                                    next = context.__next, prev = context.__prev;
                                    if (context !== head) {
                                        next && (next != null && typeof next === 'object') && (next.__prev = prev);
                                        prev && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                        (next = head) && (head != null && typeof head === 'object') && (head.__prev = context);
                                        root.__head = root.__next = head = context;
                                        head.__next = next;
                                        head.__prev = undefined;
                                    }
                                    if (tail == null || context === tail) {
                                        root.__tail = root.__prev = tail = prev || context;
                                    }
                                    head = tail = next = prev = undefined;
                                }
                                if (contextType === 'error') {
                                    if (expandsCount > -1) {
                                        requestedPath[requestedPath.length] = null;
                                    }
                                    contextValue = context;
                                }
                            }
                            if (context == null || refreshing === true) {
                                src = optimizedPath;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                opt = dest;
                                src = optimizedBoundPath;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                req = dest;
                                reqLen = n;
                                i = -1;
                                n = requestedPath.length;
                                while (++i < n) {
                                    key = path[i];
                                    key2 = requestedPath[i];
                                    req[reqLen + i] = key && typeof key === 'object' && [key2] || key2;
                                }
                                if (column < length) {
                                    j = column + 1;
                                    k = length + 1;
                                    reqLen = req.length;
                                    optLen = opt.length;
                                    i = -1;
                                    n = k - j;
                                    while (++i < n) {
                                        req[reqLen + i] = opt[optLen + i] = path[j + i];
                                    }
                                }
                                req.pathSetIndex = index;
                                requestedMissingPaths[requestedMissingPaths.length] = req;
                                optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                            } else if (contextValue !== undefined || boxed === true) {
                                src = optimizedPath;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                opt = dest;
                                src = requestedPath;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                req = dest;
                                requestedPaths[requestedPaths.length] = req;
                                optimizedPaths[optimizedPaths.length] = opt;
                                if (contextType === 'error') {
                                    if (err === undefined) {
                                        if (boxed === true) {
                                            err = context;
                                        } else {
                                            dest = {};
                                            src = context;
                                            keys = Object.keys(src);
                                            i = -1;
                                            n = keys.length;
                                            while (++i < n) {
                                                x = keys[i];
                                                !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                                            }
                                            err = dest;
                                        }
                                        val = !!includeErrors && err || undefined;
                                    }
                                    errors[errors.length] = {
                                        path: req,
                                        value: err
                                    };
                                    err = undefined;
                                } else {
                                    if (boxed === true) {
                                        val = context;
                                    } else if (contextValue != null && typeof contextValue === 'object') {
                                        if (Array.isArray(contextValue)) {
                                            src = contextValue;
                                            dest = new Array(n = src.length);
                                            i = -1;
                                            while (++i < n) {
                                                dest[i] = src[i];
                                            }
                                            val = dest;
                                        } else {
                                            dest = {};
                                            src = contextValue;
                                            keys = Object.keys(src);
                                            i = -1;
                                            n = keys.length;
                                            while (++i < n) {
                                                x = keys[i];
                                                !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                                            }
                                            val = dest;
                                        }
                                    } else {
                                        val = contextValue;
                                    }
                                }
                                if (!(contextType === 'error')) {
                                    pbv.value = val;
                                    pbv.path = req;
                                    dest = {};
                                    src = pbv;
                                    keys = Object.keys(src);
                                    i = -1;
                                    n = keys.length;
                                    while (++i < n) {
                                        x = keys[i];
                                        !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                                    }
                                    val = dest;
                                    if (!!onNext) {
                                        onNext.call(model, val);
                                    } else if (!!values) {
                                        values[values.length] = val;
                                    }
                                }
                            }
                            column = length;
                        }
                    }
                } else {
                    keys[__OFFSET] = 0;
                    length -= 1;
                    column -= 1;
                }
            }
            message = messages[length - 1];
        }
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setJSONGAsJSON() {
    var returnBlocker;
    var generation, model, state, values, errorSelector, onNext, errors, boxed, includeErrors, refreshing, connected, root, contextCache, context, expired, expiredLength, boundPath, optimizedBoundPath, column, offset, jsonDepth, boundPathValue, contexts, requested, optimized, requestedPaths, optimizedPaths, requestedMissingPaths, optimizedMissingPaths, requestedPath, optimizedPath, jsongEnvelopes, messages, jsons, jsonKeys, contextParent, index, count, paths, messageCache, messageParent, message, pathIndex, pathCount, hasValues, jsonCache, json, refsByCols, path, pathSet, length, resetOptimizedDepth, reference, i, j, n, isKeySet, key, contextExpires, contextInvalidated, head, tail, next, prev, contextType, contextValue, contextTimestamp, messageType, messageValue, messageTimestamp, messageExpires, sizeOffset, branchKeyTmp, messageSize, contextRefsLength, messageRefsLength, contextLeafStack, contextLeafDepth, keyTmp, contextTmp, contextParentTmp, contextTypeTmp, referenceContext, contextLeaves, contextLeafKeys, contextLeafKey, originalMessageSize, contextSize, contextTmp2, generationStack, generationDepth, generationReferences, k, expandsCount, outermostColumn, outermostLength, outermostPath, refLen, refContainer, backRefs, jsonKey, src, dest, opt, req, reqLen, key2, optLen, err, keys, x, val, jsonLength;
    generation = __GENERATION_GENERATION++;
    model = arguments[0];
    state = arguments[1];
    values = arguments[2];
    errorSelector = arguments[3];
    if (typeof values === 'function') {
        onNext = values;
        values = undefined;
    }
    errors = state.errors || (state.errors = []);
    boxed = model._boxed;
    includeErrors = model._includeErrors;
    refreshing = model._refreshing;
    connected = model._connected;
    root = model._root;
    contextCache = context = model._cache;
    expired = root.expired;
    expiredLength = expired.length;
    boundPath = state.boundPath || model._path;
    optimizedBoundPath = [];
    column = state.column || (state.column = 0) - 1;
    offset = state.offset || (state.offset = 0);
    jsonDepth = state.jsonDepth || (state.jsonDepth = 0);
    boundPathValue = state.boundPathValue;
    contexts = state.contexts || (state.contexts = []);
    requested = state.requested || (state.requested = {});
    optimized = state.optimized || (state.optimized = {});
    requestedPaths = state.requestedPaths || (state.requestedPaths = []);
    optimizedPaths = state.optimizedPaths || (state.optimizedPaths = []);
    requestedMissingPaths = state.requestedMissingPaths || (state.requestedMissingPaths = []);
    optimizedMissingPaths = state.optimizedMissingPaths || (state.optimizedMissingPaths = []);
    requestedPath = state.requestedPath || (state.requestedPath = []);
    optimizedPath = state.optimizedPath || (state.optimizedPath = []);
    jsongEnvelopes = state;
    messages = state.messages || (state.messages = []);
    jsons = state.jsons || (state.jsons = []);
    jsonKeys = state.jsonKeys || (state.jsonKeys = []);
    contexts[column] = contextParent = context;
    index = 0;
    count = jsongEnvelopes.length;
    for (; index < count; ++index) {
        jsongEnvelope = jsongEnvelopes[index];
        paths = jsongEnvelope.paths;
        messages[-1] = messageCache = messageParent = message = jsongEnvelope.jsong;
        pathIndex = paths.index || (paths.index = 0);
        pathCount = paths.length;
        for (; pathIndex < pathCount; ++pathIndex) {
            pathSet = paths[pathIndex];
            hasValues = false;
            jsonDepth = jsonKeys.length = 0;
            jsonCache = json = jsons[-1] = !!values && values[index] || undefined;
            offset = 0;
            refsByCols = state.refsByCols = [];
            refsByCols[-1] = optimizedBoundPath;
            path = pathSet;
            length = path.length - 1;
            column = path.column || (path.column = 0);
            while (column > -1) {
                resetOptimizedDepth = column;
                while (--resetOptimizedDepth >= -1) {
                    if (!!(reference = refsByCols[resetOptimizedDepth])) {
                        i = j = -1;
                        n = reference.length;
                        offset = n - ++resetOptimizedDepth;
                        while (++i < n) {
                            optimizedPath[++j] = reference[i];
                        }
                        while (resetOptimizedDepth < column) {
                            optimizedPath[++j] = requestedPath[resetOptimizedDepth++];
                        }
                        optimizedPath.length = offset + resetOptimizedDepth;
                        break;
                    }
                }
                messageParent = messages[column - 1];
                contextParent = contexts[column - 1];
                resolvePath:
                    do {
                        for (; column < length; ++column) {
                            key = path[column];
                            isKeySet = false;
                            if (key != null && typeof key === 'object') {
                                isKeySet = true;
                                if (Array.isArray(key)) {
                                    key = key[key.index || (key.index = 0)];
                                    if (key != null && typeof key === 'object') {
                                        key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                    }
                                } else {
                                    key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            }
                            requestedPath[requestedPath.length = column] = key;
                            if (key != null && key !== __NULL) {
                                !!jsonCache && isKeySet === true && (jsonKeys[jsonDepth] = key);
                                optimizedPath[optimizedPath.length = column + offset] = key;
                                context = contextParent[key];
                                if (context != null) {
                                    if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                        contextInvalidated = context != null && context[__INVALIDATED];
                                        if (contextInvalidated === true === false) {
                                            context.__invalidated = true;
                                            context[$EXPIRES] = 0;
                                            expired[++expiredLength] = context;
                                            if (context != null && typeof context === 'object') {
                                                head = root.__head;
                                                tail = root.__tail;
                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                context === head && (root.__head = root.__next = head = next);
                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                context.__next = context.__prev = undefined;
                                                head = tail = next = prev = undefined;
                                            }
                                        }
                                        context = undefined;
                                    }
                                }
                                contextType = context != null && context[$TYPE];
                                contextValue = contextType === 'sentinel' ? context.value : context;
                                contextTimestamp = context != null && context[$TIMESTAMP];
                                message = messageParent && messageParent[key];
                                if (!(context != null) && !(message != null)) {
                                    break resolvePath;
                                }
                                messageType = message != null && message[$TYPE];
                                messageValue = messageType === 'sentinel' ? message.value : message;
                                messageTimestamp = message != null && message[$TIMESTAMP];
                                messageExpires = (message != null || null) && message[$EXPIRES];
                                if (!!((messageExpires = (message != null || null) && message[$EXPIRES]) != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < now())) === false) {
                                    if (context != null === false) {
                                        sizeOffset = 0;
                                        branchKeyTmp = key;
                                        messageSize = message != null && message[$SIZE] || 0;
                                        do {
                                            if (key != null && key !== __NULL) {
                                                if (context != null && context !== message) {
                                                    contextRefsLength = context.__refsLength || 0;
                                                    messageRefsLength = message.__refsLength || 0;
                                                    i = -1;
                                                    while (++i < contextRefsLength) {
                                                        if ((reference = context[__REF + i]) !== undefined) {
                                                            reference[__CONTEXT] = message;
                                                            message[__REF + (messageRefsLength + i)] = reference;
                                                            context[__REF + i] = undefined;
                                                        }
                                                    }
                                                    message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                    context[__REFS_LENGTH] = reference = undefined;
                                                    contextLeafStack = [];
                                                    contextLeafDepth = 0;
                                                    keyTmp = key;
                                                    contextTmp = context;
                                                    contextParentTmp = contextParent;
                                                    contextTypeTmp = contextType;
                                                    recursing:
                                                        while (contextLeafDepth > -1) {
                                                            if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                                contextRefsLength = context.__refsLength || 0;
                                                                i = -1;
                                                                while (++i < contextRefsLength) {
                                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                                        reference.__context = undefined;
                                                                        context[__REF + i] = undefined;
                                                                    }
                                                                }
                                                                context.__refsLength = undefined;
                                                                contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                    i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                    n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                    while (++i <= n) {
                                                                        referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                    }
                                                                    referenceContext[__REFS_LENGTH] = n;
                                                                    contextValue[__REF_INDEX] = undefined;
                                                                    contextValue[__CONTEXT] = undefined;
                                                                    referenceContext = undefined;
                                                                }
                                                                if (context != null && typeof context === 'object') {
                                                                    head = root.__head;
                                                                    tail = root.__tail;
                                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                    context === head && (root.__head = root.__next = head = next);
                                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                                    context.__next = context.__prev = undefined;
                                                                    head = tail = next = prev = undefined;
                                                                }
                                                                context = contextParent;
                                                                contextParent = contextLeaves && contextLeaves.parent;
                                                                contextLeafStack[contextLeafDepth--] = undefined;
                                                                contextType = context != null && context[$TYPE];
                                                                continue;
                                                            }
                                                            if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                contextLeafKeys = Object.keys(context);
                                                                contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                contextLeaves.parent = contextParent;
                                                                i = -1;
                                                                n = contextLeafKeys.length;
                                                                while (++i < n) {
                                                                    if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                        contextLeaves[i] = context[contextLeafKey];
                                                                    }
                                                                }
                                                            }
                                                            contextParent = context;
                                                            if (context = contextLeaves.pop()) {
                                                                contextLeafDepth++;
                                                                contextType = context != null && context[$TYPE];
                                                            } else {
                                                                contextType = 'leaf';
                                                                context = contextParent;
                                                                contextParent = contextLeaves.parent;
                                                            }
                                                            continue;
                                                        }
                                                    key = keyTmp;
                                                    context = contextTmp;
                                                    contextParent = contextParentTmp;
                                                    contextType = contextTypeTmp;
                                                    contextTmp = contextTypeTmp = undefined;
                                                    if (context != null && typeof context === 'object') {
                                                        head = root.__head;
                                                        tail = root.__tail;
                                                        (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                        (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                        context === head && (root.__head = root.__next = head = next);
                                                        context === tail && (root.__tail = root.__prev = tail = prev);
                                                        context.__next = context.__prev = undefined;
                                                        head = tail = next = prev = undefined;
                                                    }
                                                }
                                                message[$SIZE] = messageSize - sizeOffset;
                                                contextParent[key] = context = message;
                                                break;
                                            }
                                            context = contexts[--column];
                                            key = context[__KEY];
                                            contextParent = contexts[column - 1] || contextCache;
                                        } while (column > -1);
                                        context[__SELF] = context;
                                        context[__KEY] = key;
                                        context[__PARENT] = contextParent;
                                        context[__ROOT] = contextCache;
                                        if (context[__GENERATION] === undefined) {
                                            context[__GENERATION] = 0;
                                        }
                                        contextType = context != null && context[$TYPE];
                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                        key = branchKeyTmp;
                                    } else if (context !== message && ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) && ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue)) && (messageTimestamp < contextTimestamp || messageExpires === 0 && ((context = message) || true)) === false) {
                                        inserting:
                                            while (true) {
                                                i = 0;
                                                if ((i = contextValue.length) === messageValue.length) {
                                                    checking_refs:
                                                        while (--i > -1) {
                                                            if (contextValue[i] !== messageValue[i]) {
                                                                break checking_refs;
                                                            }
                                                        }
                                                    if (i === -1) {
                                                        break inserting;
                                                    }
                                                }
                                                branchKeyTmp = key;
                                                messageSize = message != null && message[$SIZE] || 0;
                                                originalMessageSize = messageSize || 0;
                                                if ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) {
                                                    messageType = 'array';
                                                    originalMessageSize = messageValue.length || 1;
                                                    messageSize = (messageType === 'sentinel' && 50 || 0) + originalMessageSize;
                                                    messageValue[__CONTAINER] = message;
                                                } else if (messageType === 'sentinel') {
                                                    messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                } else if (messageType === 'error') {
                                                    if (typeof errorSelector === 'function') {
                                                        message = Enumerable.errorSelector(message);
                                                    }
                                                    messageSize = 50 + originalMessageSize;
                                                } else if (messageValue == null || typeof messageValue !== 'object') {
                                                    originalMessageSize = typeof messageValue === 'string' && messageValue.length || 1;
                                                    messageSize = 50 + originalMessageSize;
                                                    messageType = 'sentinel';
                                                    message = {
                                                        '$type': messageType,
                                                        'value': messageValue
                                                    };
                                                } else {
                                                    messageSize = message[$SIZE] || 50 * 2;
                                                    messageType = message[$TYPE] = messageType || 'leaf';
                                                }
                                                message[$SIZE] = sizeOffset = messageSize;
                                                do {
                                                    if (key != null && key !== __NULL) {
                                                        if (context != null && context !== message) {
                                                            contextRefsLength = context.__refsLength || 0;
                                                            messageRefsLength = message.__refsLength || 0;
                                                            i = -1;
                                                            while (++i < contextRefsLength) {
                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                    reference[__CONTEXT] = message;
                                                                    message[__REF + (messageRefsLength + i)] = reference;
                                                                    context[__REF + i] = undefined;
                                                                }
                                                            }
                                                            message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                            context[__REFS_LENGTH] = reference = undefined;
                                                            contextLeafStack = [];
                                                            contextLeafDepth = 0;
                                                            keyTmp = key;
                                                            contextTmp = context;
                                                            contextParentTmp = contextParent;
                                                            contextTypeTmp = contextType;
                                                            recursing:
                                                                while (contextLeafDepth > -1) {
                                                                    if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                                                        contextRefsLength = context.__refsLength || 0;
                                                                        i = -1;
                                                                        while (++i < contextRefsLength) {
                                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                                reference.__context = undefined;
                                                                                context[__REF + i] = undefined;
                                                                            }
                                                                        }
                                                                        context.__refsLength = undefined;
                                                                        contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                        if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                            i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                            n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                            while (++i <= n) {
                                                                                referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                            }
                                                                            referenceContext[__REFS_LENGTH] = n;
                                                                            contextValue[__REF_INDEX] = undefined;
                                                                            contextValue[__CONTEXT] = undefined;
                                                                            referenceContext = undefined;
                                                                        }
                                                                        if (context != null && typeof context === 'object') {
                                                                            head = root.__head;
                                                                            tail = root.__tail;
                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                            context === head && (root.__head = root.__next = head = next);
                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                            context.__next = context.__prev = undefined;
                                                                            head = tail = next = prev = undefined;
                                                                        }
                                                                        context = contextParent;
                                                                        contextParent = contextLeaves && contextLeaves.parent;
                                                                        contextLeafStack[contextLeafDepth--] = undefined;
                                                                        contextType = context != null && context[$TYPE];
                                                                        continue;
                                                                    }
                                                                    if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                        contextLeafKeys = Object.keys(context);
                                                                        contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                        contextLeaves.parent = contextParent;
                                                                        i = -1;
                                                                        n = contextLeafKeys.length;
                                                                        while (++i < n) {
                                                                            if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                contextLeaves[i] = context[contextLeafKey];
                                                                            }
                                                                        }
                                                                    }
                                                                    contextParent = context;
                                                                    if (context = contextLeaves.pop()) {
                                                                        contextLeafDepth++;
                                                                        contextType = context != null && context[$TYPE];
                                                                    } else {
                                                                        contextType = 'leaf';
                                                                        context = contextParent;
                                                                        contextParent = contextLeaves.parent;
                                                                    }
                                                                    continue;
                                                                }
                                                            key = keyTmp;
                                                            context = contextTmp;
                                                            contextParent = contextParentTmp;
                                                            contextType = contextTypeTmp;
                                                            contextTmp = contextTypeTmp = undefined;
                                                            if (context != null && typeof context === 'object') {
                                                                head = root.__head;
                                                                tail = root.__tail;
                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                context === head && (root.__head = root.__next = head = next);
                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                context.__next = context.__prev = undefined;
                                                                head = tail = next = prev = undefined;
                                                            }
                                                        }
                                                        message[$SIZE] = messageSize - sizeOffset;
                                                        contextParent[key] = context = message;
                                                        break;
                                                    }
                                                    context = contexts[--column];
                                                    key = context[__KEY];
                                                    contextParent = contexts[column - 1] || contextCache;
                                                } while (column > -1);
                                                context[__SELF] = context;
                                                context[__KEY] = key;
                                                context[__PARENT] = contextParent;
                                                context[__ROOT] = contextCache;
                                                if (context[__GENERATION] === undefined) {
                                                    context[__GENERATION] = 0;
                                                }
                                                contextTmp = context;
                                                contextParentTmp = contextParent;
                                                while (context !== undefined) {
                                                    contextSize = context['$size'] = (context['$size'] || 0) + sizeOffset;
                                                    contextTmp2 = context;
                                                    if (context[__GENERATION_UPDATED] !== generation) {
                                                        generationStack = [];
                                                        generationDepth = 0;
                                                        while (generationDepth > -1) {
                                                            if ((generationReferences = generationStack[generationDepth]) === undefined) {
                                                                i = k = -1;
                                                                n = context[__REFS_LENGTH] || 0;
                                                                generationStack[generationDepth] = generationReferences = [];
                                                                context[__GENERATION_UPDATED] = generation;
                                                                context[__GENERATION] = (context[__GENERATION] || 0) + 1;
                                                                if ((reference = context[__PARENT]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                    generationReferences[++k] = reference;
                                                                }
                                                                while (++i < n) {
                                                                    if ((reference = context[__REF + i]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                        generationReferences[++k] = reference;
                                                                    }
                                                                }
                                                            }
                                                            if ((context = generationReferences.pop()) !== undefined) {
                                                                ++generationDepth;
                                                            } else {
                                                                generationStack[generationDepth--] = undefined;
                                                            }
                                                        }
                                                    }
                                                    reference = generationStack = generationReferences = undefined;
                                                    context = contextTmp2;
                                                    if ((contextParent = context[__PARENT]) !== undefined && contextSize <= 0) {
                                                        contextRefsLength = context.__refsLength || 0;
                                                        i = -1;
                                                        while (++i < contextRefsLength) {
                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                reference.__context = undefined;
                                                                context[__REF + i] = undefined;
                                                            }
                                                        }
                                                        context.__refsLength = undefined;
                                                        contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                        if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                            i = (contextValue[__REF_INDEX] || 0) - 1;
                                                            n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                            while (++i <= n) {
                                                                referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                            }
                                                            referenceContext[__REFS_LENGTH] = n;
                                                            contextValue[__REF_INDEX] = undefined;
                                                            contextValue[__CONTEXT] = undefined;
                                                            referenceContext = undefined;
                                                        }
                                                        if (context != null && typeof context === 'object') {
                                                            head = root.__head;
                                                            tail = root.__tail;
                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                            context === head && (root.__head = root.__next = head = next);
                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                            context.__next = context.__prev = undefined;
                                                            head = tail = next = prev = undefined;
                                                        }
                                                    }
                                                    context = contextParent;
                                                }
                                                context = contextTmp;
                                                contextParent = contextParentTmp;
                                                contextTmp = contextTmp2 = contextParentTmp = undefined;
                                                contextType = context != null && context[$TYPE];
                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                key = branchKeyTmp;
                                                break;
                                            }
                                    } else {
                                        context[__SELF] = context;
                                        context[__KEY] = key;
                                        context[__PARENT] = contextParent;
                                        context[__ROOT] = contextCache;
                                        if (context[__GENERATION] === undefined) {
                                            context[__GENERATION] = 0;
                                        }
                                    }
                                } else {
                                    context[__SELF] = context;
                                    context[__KEY] = key;
                                    context[__PARENT] = contextParent;
                                    context[__ROOT] = contextCache;
                                    if (context[__GENERATION] === undefined) {
                                        context[__GENERATION] = 0;
                                    }
                                }
                                branchKeyTmp = key;
                                if ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue)) {
                                    expandsCount = -1;
                                    refsByCols[outermostColumn = column] = contextValue;
                                    do {
                                        branchKeyTmp = key;
                                        if (false) {
                                        } else {
                                            message = messageCache;
                                            messageParent = messageCache;
                                            refsByCols[outermostColumn = column] = contextValue;
                                            outermostLength = length;
                                            outermostPath = path;
                                            offset = 0;
                                            column = -1;
                                            path = contextValue;
                                            length = path.length - 1;
                                            contextParent = contextCache;
                                            while (++column < length) {
                                                if ((key = path[column]) == null) {
                                                    continue;
                                                }
                                                optimizedPath[optimizedPath.length = column + offset] = key;
                                                context = contextParent[key];
                                                if (context != null) {
                                                    if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                        contextInvalidated = context != null && context[__INVALIDATED];
                                                        if (contextInvalidated === true === false) {
                                                            context.__invalidated = true;
                                                            context[$EXPIRES] = 0;
                                                            expired[++expiredLength] = context;
                                                            if (context != null && typeof context === 'object') {
                                                                head = root.__head;
                                                                tail = root.__tail;
                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                context === head && (root.__head = root.__next = head = next);
                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                context.__next = context.__prev = undefined;
                                                                head = tail = next = prev = undefined;
                                                            }
                                                        }
                                                        context = undefined;
                                                    }
                                                }
                                                contextType = context != null && context[$TYPE];
                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                contextTimestamp = context != null && context[$TIMESTAMP];
                                                message = messageParent && messageParent[key];
                                                if (!(context != null) && !(message != null)) {
                                                    break resolvePath;
                                                }
                                                messageType = message != null && message[$TYPE];
                                                messageValue = messageType === 'sentinel' ? message.value : message;
                                                messageTimestamp = message != null && message[$TIMESTAMP];
                                                messageExpires = (message != null || null) && message[$EXPIRES];
                                                if (!!((messageExpires = (message != null || null) && message[$EXPIRES]) != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < now())) === false) {
                                                    if (context != null === false) {
                                                        sizeOffset = 0;
                                                        branchKeyTmp = key;
                                                        messageSize = message != null && message[$SIZE] || 0;
                                                        do {
                                                            if (key != null && key !== __NULL) {
                                                                if (context != null && context !== message) {
                                                                    contextRefsLength = context.__refsLength || 0;
                                                                    messageRefsLength = message.__refsLength || 0;
                                                                    i = -1;
                                                                    while (++i < contextRefsLength) {
                                                                        if ((reference = context[__REF + i]) !== undefined) {
                                                                            reference[__CONTEXT] = message;
                                                                            message[__REF + (messageRefsLength + i)] = reference;
                                                                            context[__REF + i] = undefined;
                                                                        }
                                                                    }
                                                                    message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                                    context[__REFS_LENGTH] = reference = undefined;
                                                                    contextLeafStack = [];
                                                                    contextLeafDepth = 0;
                                                                    keyTmp = key;
                                                                    contextTmp = context;
                                                                    contextParentTmp = contextParent;
                                                                    contextTypeTmp = contextType;
                                                                    recursing:
                                                                        while (contextLeafDepth > -1) {
                                                                            if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                                                contextRefsLength = context.__refsLength || 0;
                                                                                i = -1;
                                                                                while (++i < contextRefsLength) {
                                                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                                                        reference.__context = undefined;
                                                                                        context[__REF + i] = undefined;
                                                                                    }
                                                                                }
                                                                                context.__refsLength = undefined;
                                                                                contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                                if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                    i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                    n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                    while (++i <= n) {
                                                                                        referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                    }
                                                                                    referenceContext[__REFS_LENGTH] = n;
                                                                                    contextValue[__REF_INDEX] = undefined;
                                                                                    contextValue[__CONTEXT] = undefined;
                                                                                    referenceContext = undefined;
                                                                                }
                                                                                if (context != null && typeof context === 'object') {
                                                                                    head = root.__head;
                                                                                    tail = root.__tail;
                                                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                    context === head && (root.__head = root.__next = head = next);
                                                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                    context.__next = context.__prev = undefined;
                                                                                    head = tail = next = prev = undefined;
                                                                                }
                                                                                context = contextParent;
                                                                                contextParent = contextLeaves && contextLeaves.parent;
                                                                                contextLeafStack[contextLeafDepth--] = undefined;
                                                                                contextType = context != null && context[$TYPE];
                                                                                continue;
                                                                            }
                                                                            if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                                contextLeafKeys = Object.keys(context);
                                                                                contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                                contextLeaves.parent = contextParent;
                                                                                i = -1;
                                                                                n = contextLeafKeys.length;
                                                                                while (++i < n) {
                                                                                    if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                        contextLeaves[i] = context[contextLeafKey];
                                                                                    }
                                                                                }
                                                                            }
                                                                            contextParent = context;
                                                                            if (context = contextLeaves.pop()) {
                                                                                contextLeafDepth++;
                                                                                contextType = context != null && context[$TYPE];
                                                                            } else {
                                                                                contextType = 'leaf';
                                                                                context = contextParent;
                                                                                contextParent = contextLeaves.parent;
                                                                            }
                                                                            continue;
                                                                        }
                                                                    key = keyTmp;
                                                                    context = contextTmp;
                                                                    contextParent = contextParentTmp;
                                                                    contextType = contextTypeTmp;
                                                                    contextTmp = contextTypeTmp = undefined;
                                                                    if (context != null && typeof context === 'object') {
                                                                        head = root.__head;
                                                                        tail = root.__tail;
                                                                        (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                        (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                        context === head && (root.__head = root.__next = head = next);
                                                                        context === tail && (root.__tail = root.__prev = tail = prev);
                                                                        context.__next = context.__prev = undefined;
                                                                        head = tail = next = prev = undefined;
                                                                    }
                                                                }
                                                                message[$SIZE] = messageSize - sizeOffset;
                                                                contextParent[key] = context = message;
                                                                break;
                                                            }
                                                            context = contexts[--column];
                                                            key = context[__KEY];
                                                            contextParent = contexts[column - 1] || contextCache;
                                                        } while (column > -1);
                                                        context[__SELF] = context;
                                                        context[__KEY] = key;
                                                        context[__PARENT] = contextParent;
                                                        context[__ROOT] = contextCache;
                                                        if (context[__GENERATION] === undefined) {
                                                            context[__GENERATION] = 0;
                                                        }
                                                        contextType = context != null && context[$TYPE];
                                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                                        key = branchKeyTmp;
                                                    } else if (context !== message && ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) && ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue)) && (messageTimestamp < contextTimestamp || messageExpires === 0 && ((context = message) || true)) === false) {
                                                        inserting:
                                                            while (true) {
                                                                i = 0;
                                                                if ((i = contextValue.length) === messageValue.length) {
                                                                    checking_refs:
                                                                        while (--i > -1) {
                                                                            if (contextValue[i] !== messageValue[i]) {
                                                                                break checking_refs;
                                                                            }
                                                                        }
                                                                    if (i === -1) {
                                                                        break inserting;
                                                                    }
                                                                }
                                                                branchKeyTmp = key;
                                                                messageSize = message != null && message[$SIZE] || 0;
                                                                originalMessageSize = messageSize || 0;
                                                                if ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) {
                                                                    messageType = 'array';
                                                                    originalMessageSize = messageValue.length || 1;
                                                                    messageSize = (messageType === 'sentinel' && 50 || 0) + originalMessageSize;
                                                                    messageValue[__CONTAINER] = message;
                                                                } else if (messageType === 'sentinel') {
                                                                    messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                                } else if (messageType === 'error') {
                                                                    if (typeof errorSelector === 'function') {
                                                                        message = Enumerable.errorSelector(message);
                                                                    }
                                                                    messageSize = 50 + originalMessageSize;
                                                                } else if (messageValue == null || typeof messageValue !== 'object') {
                                                                    originalMessageSize = typeof messageValue === 'string' && messageValue.length || 1;
                                                                    messageSize = 50 + originalMessageSize;
                                                                    messageType = 'sentinel';
                                                                    message = {
                                                                        '$type': messageType,
                                                                        'value': messageValue
                                                                    };
                                                                } else {
                                                                    messageSize = message[$SIZE] || 50 * 2;
                                                                    messageType = message[$TYPE] = messageType || 'leaf';
                                                                }
                                                                message[$SIZE] = sizeOffset = messageSize;
                                                                do {
                                                                    if (key != null && key !== __NULL) {
                                                                        if (context != null && context !== message) {
                                                                            contextRefsLength = context.__refsLength || 0;
                                                                            messageRefsLength = message.__refsLength || 0;
                                                                            i = -1;
                                                                            while (++i < contextRefsLength) {
                                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                                    reference[__CONTEXT] = message;
                                                                                    message[__REF + (messageRefsLength + i)] = reference;
                                                                                    context[__REF + i] = undefined;
                                                                                }
                                                                            }
                                                                            message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                                            context[__REFS_LENGTH] = reference = undefined;
                                                                            contextLeafStack = [];
                                                                            contextLeafDepth = 0;
                                                                            keyTmp = key;
                                                                            contextTmp = context;
                                                                            contextParentTmp = contextParent;
                                                                            contextTypeTmp = contextType;
                                                                            recursing:
                                                                                while (contextLeafDepth > -1) {
                                                                                    if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                                                                        contextRefsLength = context.__refsLength || 0;
                                                                                        i = -1;
                                                                                        while (++i < contextRefsLength) {
                                                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                                                reference.__context = undefined;
                                                                                                context[__REF + i] = undefined;
                                                                                            }
                                                                                        }
                                                                                        context.__refsLength = undefined;
                                                                                        contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                                        if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                            i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                            n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                            while (++i <= n) {
                                                                                                referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                            }
                                                                                            referenceContext[__REFS_LENGTH] = n;
                                                                                            contextValue[__REF_INDEX] = undefined;
                                                                                            contextValue[__CONTEXT] = undefined;
                                                                                            referenceContext = undefined;
                                                                                        }
                                                                                        if (context != null && typeof context === 'object') {
                                                                                            head = root.__head;
                                                                                            tail = root.__tail;
                                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                            context === head && (root.__head = root.__next = head = next);
                                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                            context.__next = context.__prev = undefined;
                                                                                            head = tail = next = prev = undefined;
                                                                                        }
                                                                                        context = contextParent;
                                                                                        contextParent = contextLeaves && contextLeaves.parent;
                                                                                        contextLeafStack[contextLeafDepth--] = undefined;
                                                                                        contextType = context != null && context[$TYPE];
                                                                                        continue;
                                                                                    }
                                                                                    if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                                        contextLeafKeys = Object.keys(context);
                                                                                        contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                                        contextLeaves.parent = contextParent;
                                                                                        i = -1;
                                                                                        n = contextLeafKeys.length;
                                                                                        while (++i < n) {
                                                                                            if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                                contextLeaves[i] = context[contextLeafKey];
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    contextParent = context;
                                                                                    if (context = contextLeaves.pop()) {
                                                                                        contextLeafDepth++;
                                                                                        contextType = context != null && context[$TYPE];
                                                                                    } else {
                                                                                        contextType = 'leaf';
                                                                                        context = contextParent;
                                                                                        contextParent = contextLeaves.parent;
                                                                                    }
                                                                                    continue;
                                                                                }
                                                                            key = keyTmp;
                                                                            context = contextTmp;
                                                                            contextParent = contextParentTmp;
                                                                            contextType = contextTypeTmp;
                                                                            contextTmp = contextTypeTmp = undefined;
                                                                            if (context != null && typeof context === 'object') {
                                                                                head = root.__head;
                                                                                tail = root.__tail;
                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                context.__next = context.__prev = undefined;
                                                                                head = tail = next = prev = undefined;
                                                                            }
                                                                        }
                                                                        message[$SIZE] = messageSize - sizeOffset;
                                                                        contextParent[key] = context = message;
                                                                        break;
                                                                    }
                                                                    context = contexts[--column];
                                                                    key = context[__KEY];
                                                                    contextParent = contexts[column - 1] || contextCache;
                                                                } while (column > -1);
                                                                context[__SELF] = context;
                                                                context[__KEY] = key;
                                                                context[__PARENT] = contextParent;
                                                                context[__ROOT] = contextCache;
                                                                if (context[__GENERATION] === undefined) {
                                                                    context[__GENERATION] = 0;
                                                                }
                                                                contextTmp = context;
                                                                contextParentTmp = contextParent;
                                                                while (context !== undefined) {
                                                                    contextSize = context['$size'] = (context['$size'] || 0) + sizeOffset;
                                                                    contextTmp2 = context;
                                                                    if (context[__GENERATION_UPDATED] !== generation) {
                                                                        generationStack = [];
                                                                        generationDepth = 0;
                                                                        while (generationDepth > -1) {
                                                                            if ((generationReferences = generationStack[generationDepth]) === undefined) {
                                                                                i = k = -1;
                                                                                n = context[__REFS_LENGTH] || 0;
                                                                                generationStack[generationDepth] = generationReferences = [];
                                                                                context[__GENERATION_UPDATED] = generation;
                                                                                context[__GENERATION] = (context[__GENERATION] || 0) + 1;
                                                                                if ((reference = context[__PARENT]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                                    generationReferences[++k] = reference;
                                                                                }
                                                                                while (++i < n) {
                                                                                    if ((reference = context[__REF + i]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                                        generationReferences[++k] = reference;
                                                                                    }
                                                                                }
                                                                            }
                                                                            if ((context = generationReferences.pop()) !== undefined) {
                                                                                ++generationDepth;
                                                                            } else {
                                                                                generationStack[generationDepth--] = undefined;
                                                                            }
                                                                        }
                                                                    }
                                                                    reference = generationStack = generationReferences = undefined;
                                                                    context = contextTmp2;
                                                                    if ((contextParent = context[__PARENT]) !== undefined && contextSize <= 0) {
                                                                        contextRefsLength = context.__refsLength || 0;
                                                                        i = -1;
                                                                        while (++i < contextRefsLength) {
                                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                                reference.__context = undefined;
                                                                                context[__REF + i] = undefined;
                                                                            }
                                                                        }
                                                                        context.__refsLength = undefined;
                                                                        contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                        if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                            i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                            n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                            while (++i <= n) {
                                                                                referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                            }
                                                                            referenceContext[__REFS_LENGTH] = n;
                                                                            contextValue[__REF_INDEX] = undefined;
                                                                            contextValue[__CONTEXT] = undefined;
                                                                            referenceContext = undefined;
                                                                        }
                                                                        if (context != null && typeof context === 'object') {
                                                                            head = root.__head;
                                                                            tail = root.__tail;
                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                            context === head && (root.__head = root.__next = head = next);
                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                            context.__next = context.__prev = undefined;
                                                                            head = tail = next = prev = undefined;
                                                                        }
                                                                    }
                                                                    context = contextParent;
                                                                }
                                                                context = contextTmp;
                                                                contextParent = contextParentTmp;
                                                                contextTmp = contextTmp2 = contextParentTmp = undefined;
                                                                contextType = context != null && context[$TYPE];
                                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                                key = branchKeyTmp;
                                                                break;
                                                            }
                                                    } else {
                                                        context[__SELF] = context;
                                                        context[__KEY] = key;
                                                        context[__PARENT] = contextParent;
                                                        context[__ROOT] = contextCache;
                                                        if (context[__GENERATION] === undefined) {
                                                            context[__GENERATION] = 0;
                                                        }
                                                    }
                                                } else {
                                                    context[__SELF] = context;
                                                    context[__KEY] = key;
                                                    context[__PARENT] = contextParent;
                                                    context[__ROOT] = contextCache;
                                                    if (context[__GENERATION] === undefined) {
                                                        context[__GENERATION] = 0;
                                                    }
                                                }
                                                contextParent = context;
                                                messageParent = message;
                                                if (context === undefined) {
                                                    i = -1;
                                                    refLen = path.length;
                                                    offset = refLen - column - 1;
                                                    optimizedPath.length = refLen;
                                                    while (++i < refLen) {
                                                        optimizedPath[i] = path[i];
                                                    }
                                                    break;
                                                } else if (!!contextType || Array.isArray(contextValue)) {
                                                    break;
                                                }
                                                contextParent = context;
                                            }
                                            if (column === length) {
                                                if ((key = path[column]) != null) {
                                                    optimizedPath[optimizedPath.length = column + offset] = key;
                                                    context = contextParent[key];
                                                    if (context != null) {
                                                        if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                            contextInvalidated = context != null && context[__INVALIDATED];
                                                            if (contextInvalidated === true === false) {
                                                                context.__invalidated = true;
                                                                context[$EXPIRES] = 0;
                                                                expired[++expiredLength] = context;
                                                                if (context != null && typeof context === 'object') {
                                                                    head = root.__head;
                                                                    tail = root.__tail;
                                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                    context === head && (root.__head = root.__next = head = next);
                                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                                    context.__next = context.__prev = undefined;
                                                                    head = tail = next = prev = undefined;
                                                                }
                                                            }
                                                            context = undefined;
                                                        }
                                                    }
                                                    contextType = context != null && context[$TYPE];
                                                    contextValue = contextType === 'sentinel' ? context.value : context;
                                                    contextTimestamp = context != null && context[$TIMESTAMP];
                                                    message = messageParent && messageParent[key];
                                                    if (!(context != null) && !(message != null)) {
                                                        break resolvePath;
                                                    }
                                                    messageType = message != null && message[$TYPE];
                                                    messageValue = messageType === 'sentinel' ? message.value : message;
                                                    messageTimestamp = message != null && message[$TIMESTAMP];
                                                    messageExpires = (message != null || null) && message[$EXPIRES];
                                                    if (!!((messageExpires = (message != null || null) && message[$EXPIRES]) != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < now())) === false) {
                                                        if (context != null === false) {
                                                            sizeOffset = 0;
                                                            branchKeyTmp = key;
                                                            messageSize = message != null && message[$SIZE] || 0;
                                                            do {
                                                                if (key != null && key !== __NULL) {
                                                                    if (context != null && context !== message) {
                                                                        contextRefsLength = context.__refsLength || 0;
                                                                        messageRefsLength = message.__refsLength || 0;
                                                                        i = -1;
                                                                        while (++i < contextRefsLength) {
                                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                                reference[__CONTEXT] = message;
                                                                                message[__REF + (messageRefsLength + i)] = reference;
                                                                                context[__REF + i] = undefined;
                                                                            }
                                                                        }
                                                                        message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                                        context[__REFS_LENGTH] = reference = undefined;
                                                                        contextLeafStack = [];
                                                                        contextLeafDepth = 0;
                                                                        keyTmp = key;
                                                                        contextTmp = context;
                                                                        contextParentTmp = contextParent;
                                                                        contextTypeTmp = contextType;
                                                                        recursing:
                                                                            while (contextLeafDepth > -1) {
                                                                                if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                                    contextValue = contextType === 'sentinel' ? context.value : context;
                                                                                    contextRefsLength = context.__refsLength || 0;
                                                                                    i = -1;
                                                                                    while (++i < contextRefsLength) {
                                                                                        if ((reference = context[__REF + i]) !== undefined) {
                                                                                            reference.__context = undefined;
                                                                                            context[__REF + i] = undefined;
                                                                                        }
                                                                                    }
                                                                                    context.__refsLength = undefined;
                                                                                    contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                                    if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                        i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                        n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                        while (++i <= n) {
                                                                                            referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                        }
                                                                                        referenceContext[__REFS_LENGTH] = n;
                                                                                        contextValue[__REF_INDEX] = undefined;
                                                                                        contextValue[__CONTEXT] = undefined;
                                                                                        referenceContext = undefined;
                                                                                    }
                                                                                    if (context != null && typeof context === 'object') {
                                                                                        head = root.__head;
                                                                                        tail = root.__tail;
                                                                                        (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                        (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                        context === head && (root.__head = root.__next = head = next);
                                                                                        context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                        context.__next = context.__prev = undefined;
                                                                                        head = tail = next = prev = undefined;
                                                                                    }
                                                                                    context = contextParent;
                                                                                    contextParent = contextLeaves && contextLeaves.parent;
                                                                                    contextLeafStack[contextLeafDepth--] = undefined;
                                                                                    contextType = context != null && context[$TYPE];
                                                                                    continue;
                                                                                }
                                                                                if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                                    contextLeafKeys = Object.keys(context);
                                                                                    contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                                    contextLeaves.parent = contextParent;
                                                                                    i = -1;
                                                                                    n = contextLeafKeys.length;
                                                                                    while (++i < n) {
                                                                                        if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                            contextLeaves[i] = context[contextLeafKey];
                                                                                        }
                                                                                    }
                                                                                }
                                                                                contextParent = context;
                                                                                if (context = contextLeaves.pop()) {
                                                                                    contextLeafDepth++;
                                                                                    contextType = context != null && context[$TYPE];
                                                                                } else {
                                                                                    contextType = 'leaf';
                                                                                    context = contextParent;
                                                                                    contextParent = contextLeaves.parent;
                                                                                }
                                                                                continue;
                                                                            }
                                                                        key = keyTmp;
                                                                        context = contextTmp;
                                                                        contextParent = contextParentTmp;
                                                                        contextType = contextTypeTmp;
                                                                        contextTmp = contextTypeTmp = undefined;
                                                                        if (context != null && typeof context === 'object') {
                                                                            head = root.__head;
                                                                            tail = root.__tail;
                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                            context === head && (root.__head = root.__next = head = next);
                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                            context.__next = context.__prev = undefined;
                                                                            head = tail = next = prev = undefined;
                                                                        }
                                                                    }
                                                                    message[$SIZE] = messageSize - sizeOffset;
                                                                    contextParent[key] = context = message;
                                                                    break;
                                                                }
                                                                context = contexts[--column];
                                                                key = context[__KEY];
                                                                contextParent = contexts[column - 1] || contextCache;
                                                            } while (column > -1);
                                                            context[__SELF] = context;
                                                            context[__KEY] = key;
                                                            context[__PARENT] = contextParent;
                                                            context[__ROOT] = contextCache;
                                                            if (context[__GENERATION] === undefined) {
                                                                context[__GENERATION] = 0;
                                                            }
                                                            contextType = context != null && context[$TYPE];
                                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                                            key = branchKeyTmp;
                                                        } else if (context !== message && ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) && ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue)) && (messageTimestamp < contextTimestamp || messageExpires === 0 && ((context = message) || true)) === false) {
                                                            inserting:
                                                                while (true) {
                                                                    i = 0;
                                                                    if ((i = contextValue.length) === messageValue.length) {
                                                                        checking_refs:
                                                                            while (--i > -1) {
                                                                                if (contextValue[i] !== messageValue[i]) {
                                                                                    break checking_refs;
                                                                                }
                                                                            }
                                                                        if (i === -1) {
                                                                            break inserting;
                                                                        }
                                                                    }
                                                                    branchKeyTmp = key;
                                                                    messageSize = message != null && message[$SIZE] || 0;
                                                                    originalMessageSize = messageSize || 0;
                                                                    if ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) {
                                                                        messageType = 'array';
                                                                        originalMessageSize = messageValue.length || 1;
                                                                        messageSize = (messageType === 'sentinel' && 50 || 0) + originalMessageSize;
                                                                        messageValue[__CONTAINER] = message;
                                                                    } else if (messageType === 'sentinel') {
                                                                        messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                                    } else if (messageType === 'error') {
                                                                        if (typeof errorSelector === 'function') {
                                                                            message = Enumerable.errorSelector(message);
                                                                        }
                                                                        messageSize = 50 + originalMessageSize;
                                                                    } else if (messageValue == null || typeof messageValue !== 'object') {
                                                                        originalMessageSize = typeof messageValue === 'string' && messageValue.length || 1;
                                                                        messageSize = 50 + originalMessageSize;
                                                                        messageType = 'sentinel';
                                                                        message = {
                                                                            '$type': messageType,
                                                                            'value': messageValue
                                                                        };
                                                                    } else {
                                                                        messageSize = message[$SIZE] || 50 * 2;
                                                                        messageType = message[$TYPE] = messageType || 'leaf';
                                                                    }
                                                                    message[$SIZE] = sizeOffset = messageSize;
                                                                    do {
                                                                        if (key != null && key !== __NULL) {
                                                                            if (context != null && context !== message) {
                                                                                contextRefsLength = context.__refsLength || 0;
                                                                                messageRefsLength = message.__refsLength || 0;
                                                                                i = -1;
                                                                                while (++i < contextRefsLength) {
                                                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                                                        reference[__CONTEXT] = message;
                                                                                        message[__REF + (messageRefsLength + i)] = reference;
                                                                                        context[__REF + i] = undefined;
                                                                                    }
                                                                                }
                                                                                message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                                                context[__REFS_LENGTH] = reference = undefined;
                                                                                contextLeafStack = [];
                                                                                contextLeafDepth = 0;
                                                                                keyTmp = key;
                                                                                contextTmp = context;
                                                                                contextParentTmp = contextParent;
                                                                                contextTypeTmp = contextType;
                                                                                recursing:
                                                                                    while (contextLeafDepth > -1) {
                                                                                        if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                                                                            contextRefsLength = context.__refsLength || 0;
                                                                                            i = -1;
                                                                                            while (++i < contextRefsLength) {
                                                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                                                    reference.__context = undefined;
                                                                                                    context[__REF + i] = undefined;
                                                                                                }
                                                                                            }
                                                                                            context.__refsLength = undefined;
                                                                                            contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                                            if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                                i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                                n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                                while (++i <= n) {
                                                                                                    referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                                }
                                                                                                referenceContext[__REFS_LENGTH] = n;
                                                                                                contextValue[__REF_INDEX] = undefined;
                                                                                                contextValue[__CONTEXT] = undefined;
                                                                                                referenceContext = undefined;
                                                                                            }
                                                                                            if (context != null && typeof context === 'object') {
                                                                                                head = root.__head;
                                                                                                tail = root.__tail;
                                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                                context.__next = context.__prev = undefined;
                                                                                                head = tail = next = prev = undefined;
                                                                                            }
                                                                                            context = contextParent;
                                                                                            contextParent = contextLeaves && contextLeaves.parent;
                                                                                            contextLeafStack[contextLeafDepth--] = undefined;
                                                                                            contextType = context != null && context[$TYPE];
                                                                                            continue;
                                                                                        }
                                                                                        if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                                            contextLeafKeys = Object.keys(context);
                                                                                            contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                                            contextLeaves.parent = contextParent;
                                                                                            i = -1;
                                                                                            n = contextLeafKeys.length;
                                                                                            while (++i < n) {
                                                                                                if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                                    contextLeaves[i] = context[contextLeafKey];
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        contextParent = context;
                                                                                        if (context = contextLeaves.pop()) {
                                                                                            contextLeafDepth++;
                                                                                            contextType = context != null && context[$TYPE];
                                                                                        } else {
                                                                                            contextType = 'leaf';
                                                                                            context = contextParent;
                                                                                            contextParent = contextLeaves.parent;
                                                                                        }
                                                                                        continue;
                                                                                    }
                                                                                key = keyTmp;
                                                                                context = contextTmp;
                                                                                contextParent = contextParentTmp;
                                                                                contextType = contextTypeTmp;
                                                                                contextTmp = contextTypeTmp = undefined;
                                                                                if (context != null && typeof context === 'object') {
                                                                                    head = root.__head;
                                                                                    tail = root.__tail;
                                                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                    context === head && (root.__head = root.__next = head = next);
                                                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                    context.__next = context.__prev = undefined;
                                                                                    head = tail = next = prev = undefined;
                                                                                }
                                                                            }
                                                                            message[$SIZE] = messageSize - sizeOffset;
                                                                            contextParent[key] = context = message;
                                                                            break;
                                                                        }
                                                                        context = contexts[--column];
                                                                        key = context[__KEY];
                                                                        contextParent = contexts[column - 1] || contextCache;
                                                                    } while (column > -1);
                                                                    context[__SELF] = context;
                                                                    context[__KEY] = key;
                                                                    context[__PARENT] = contextParent;
                                                                    context[__ROOT] = contextCache;
                                                                    if (context[__GENERATION] === undefined) {
                                                                        context[__GENERATION] = 0;
                                                                    }
                                                                    contextTmp = context;
                                                                    contextParentTmp = contextParent;
                                                                    while (context !== undefined) {
                                                                        contextSize = context['$size'] = (context['$size'] || 0) + sizeOffset;
                                                                        contextTmp2 = context;
                                                                        if (context[__GENERATION_UPDATED] !== generation) {
                                                                            generationStack = [];
                                                                            generationDepth = 0;
                                                                            while (generationDepth > -1) {
                                                                                if ((generationReferences = generationStack[generationDepth]) === undefined) {
                                                                                    i = k = -1;
                                                                                    n = context[__REFS_LENGTH] || 0;
                                                                                    generationStack[generationDepth] = generationReferences = [];
                                                                                    context[__GENERATION_UPDATED] = generation;
                                                                                    context[__GENERATION] = (context[__GENERATION] || 0) + 1;
                                                                                    if ((reference = context[__PARENT]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                                        generationReferences[++k] = reference;
                                                                                    }
                                                                                    while (++i < n) {
                                                                                        if ((reference = context[__REF + i]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                                            generationReferences[++k] = reference;
                                                                                        }
                                                                                    }
                                                                                }
                                                                                if ((context = generationReferences.pop()) !== undefined) {
                                                                                    ++generationDepth;
                                                                                } else {
                                                                                    generationStack[generationDepth--] = undefined;
                                                                                }
                                                                            }
                                                                        }
                                                                        reference = generationStack = generationReferences = undefined;
                                                                        context = contextTmp2;
                                                                        if ((contextParent = context[__PARENT]) !== undefined && contextSize <= 0) {
                                                                            contextRefsLength = context.__refsLength || 0;
                                                                            i = -1;
                                                                            while (++i < contextRefsLength) {
                                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                                    reference.__context = undefined;
                                                                                    context[__REF + i] = undefined;
                                                                                }
                                                                            }
                                                                            context.__refsLength = undefined;
                                                                            contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                            if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                while (++i <= n) {
                                                                                    referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                }
                                                                                referenceContext[__REFS_LENGTH] = n;
                                                                                contextValue[__REF_INDEX] = undefined;
                                                                                contextValue[__CONTEXT] = undefined;
                                                                                referenceContext = undefined;
                                                                            }
                                                                            if (context != null && typeof context === 'object') {
                                                                                head = root.__head;
                                                                                tail = root.__tail;
                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                context.__next = context.__prev = undefined;
                                                                                head = tail = next = prev = undefined;
                                                                            }
                                                                        }
                                                                        context = contextParent;
                                                                    }
                                                                    context = contextTmp;
                                                                    contextParent = contextParentTmp;
                                                                    contextTmp = contextTmp2 = contextParentTmp = undefined;
                                                                    contextType = context != null && context[$TYPE];
                                                                    contextValue = contextType === 'sentinel' ? context.value : context;
                                                                    key = branchKeyTmp;
                                                                    break;
                                                                }
                                                        } else {
                                                            context[__SELF] = context;
                                                            context[__KEY] = key;
                                                            context[__PARENT] = contextParent;
                                                            context[__ROOT] = contextCache;
                                                            if (context[__GENERATION] === undefined) {
                                                                context[__GENERATION] = 0;
                                                            }
                                                        }
                                                    } else {
                                                        context[__SELF] = context;
                                                        context[__KEY] = key;
                                                        context[__PARENT] = contextParent;
                                                        context[__ROOT] = contextCache;
                                                        if (context[__GENERATION] === undefined) {
                                                            context[__GENERATION] = 0;
                                                        }
                                                    }
                                                    contextParent = context;
                                                    messageParent = message;
                                                }
                                                if (context != null) {
                                                    if ((refContainer = path[__CONTAINER] || path).__context === undefined) {
                                                        backRefs = context.__refsLength || 0;
                                                        context['__ref' + backRefs] = refContainer;
                                                        context.__refsLength = backRefs + 1;
                                                        refContainer.__refIndex = backRefs;
                                                        refContainer.__context = context;
                                                        refContainer = backRefs = undefined;
                                                    }
                                                }
                                            }
                                            expandsCount = Number(contextType === 'error') - 1;
                                            column = outermostColumn;
                                            path = outermostPath;
                                            offset = length - column;
                                            length = outermostLength;
                                            key = branchKeyTmp;
                                            outermostColumn = undefined;
                                            outermostPath = undefined;
                                            outermostLength = undefined;
                                            branchKeyTmp = undefined;
                                        }
                                    } while ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue));
                                } else if (!!contextType) {
                                    break resolvePath;
                                }
                                key = branchKeyTmp;
                                contexts[column] = contextParent = context;
                                messages[column] = messageParent = message;
                                if (!!jsonCache && isKeySet === true) {
                                    do {
                                        jsonKey = jsonKeys[jsonDepth];
                                    } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                                    if (jsonKey != null && jsonKey !== __NULL) {
                                        json = jsons[jsonDepth - 1] || jsonCache;
                                    } else {
                                        json = jsonCache;
                                    }
                                    if (jsonKey != null && jsonKey !== __NULL) {
                                        json = json[jsonKey] || (json[jsonKey] = {});
                                    }
                                    jsons[jsonDepth] = json;
                                    jsonDepth += 1;
                                }
                            }
                        }
                        if (column === length) {
                            key = path[column];
                            isKeySet = false;
                            if (key != null && typeof key === 'object') {
                                isKeySet = true;
                                if (Array.isArray(key)) {
                                    key = key[key.index || (key.index = 0)];
                                    if (key != null && typeof key === 'object') {
                                        key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                    }
                                } else {
                                    key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            }
                            requestedPath[requestedPath.length = column] = key;
                            if (key != null && key !== __NULL) {
                                !!jsonCache && isKeySet === true && (jsonKeys[jsonDepth] = key);
                                optimizedPath[optimizedPath.length = column + offset] = key;
                                context = contextParent[key];
                                if (context != null) {
                                    if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                        contextInvalidated = context != null && context[__INVALIDATED];
                                        if (contextInvalidated === true === false) {
                                            context.__invalidated = true;
                                            context[$EXPIRES] = 0;
                                            expired[++expiredLength] = context;
                                            if (context != null && typeof context === 'object') {
                                                head = root.__head;
                                                tail = root.__tail;
                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                context === head && (root.__head = root.__next = head = next);
                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                context.__next = context.__prev = undefined;
                                                head = tail = next = prev = undefined;
                                            }
                                        }
                                        context = undefined;
                                    }
                                }
                                contextType = context != null && context[$TYPE];
                                contextValue = contextType === 'sentinel' ? context.value : context;
                                contextTimestamp = context != null && context[$TIMESTAMP];
                                message = messageParent && messageParent[key];
                                if (!(context != null) && !(message != null)) {
                                    break resolvePath;
                                }
                                messageType = message != null && message[$TYPE];
                                messageValue = messageType === 'sentinel' ? message.value : message;
                                messageTimestamp = message != null && message[$TIMESTAMP];
                                messageExpires = (message != null || null) && message[$EXPIRES];
                                if ((messageTimestamp < contextTimestamp || messageExpires === 0 && ((context = message) || true)) === false === true) {
                                    messageSize = message != null && message[$SIZE] || 0;
                                    originalMessageSize = messageSize || 0;
                                    if ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) {
                                        messageType = 'array';
                                        originalMessageSize = messageValue.length || 1;
                                        messageSize = (messageType === 'sentinel' && 50 || 0) + originalMessageSize;
                                        messageValue[__CONTAINER] = message;
                                    } else if (messageType === 'sentinel') {
                                        messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                    } else if (messageType === 'error') {
                                        if (typeof errorSelector === 'function') {
                                            message = Enumerable.errorSelector(message);
                                        }
                                        messageSize = 50 + originalMessageSize;
                                    } else if (messageValue == null || typeof messageValue !== 'object') {
                                        originalMessageSize = typeof messageValue === 'string' && messageValue.length || 1;
                                        messageSize = 50 + originalMessageSize;
                                        messageType = 'sentinel';
                                        message = {
                                            '$type': messageType,
                                            'value': messageValue
                                        };
                                    } else {
                                        messageSize = message[$SIZE] || 50 * 2;
                                        messageType = message[$TYPE] = messageType || 'leaf';
                                    }
                                    message[$SIZE] = sizeOffset = messageSize;
                                    if (!!((messageExpires = (message != null || null) && message[$EXPIRES]) != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < now())) === false) {
                                        messageSize = message != null && message[$SIZE] || 0;
                                        do {
                                            if (key != null && key !== __NULL) {
                                                if (context != null && context !== message) {
                                                    contextRefsLength = context.__refsLength || 0;
                                                    messageRefsLength = message.__refsLength || 0;
                                                    i = -1;
                                                    while (++i < contextRefsLength) {
                                                        if ((reference = context[__REF + i]) !== undefined) {
                                                            reference[__CONTEXT] = message;
                                                            message[__REF + (messageRefsLength + i)] = reference;
                                                            context[__REF + i] = undefined;
                                                        }
                                                    }
                                                    message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                    context[__REFS_LENGTH] = reference = undefined;
                                                    contextLeafStack = [];
                                                    contextLeafDepth = 0;
                                                    keyTmp = key;
                                                    contextTmp = context;
                                                    contextParentTmp = contextParent;
                                                    contextTypeTmp = contextType;
                                                    recursing:
                                                        while (contextLeafDepth > -1) {
                                                            if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                                contextRefsLength = context.__refsLength || 0;
                                                                i = -1;
                                                                while (++i < contextRefsLength) {
                                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                                        reference.__context = undefined;
                                                                        context[__REF + i] = undefined;
                                                                    }
                                                                }
                                                                context.__refsLength = undefined;
                                                                contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                    i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                    n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                    while (++i <= n) {
                                                                        referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                    }
                                                                    referenceContext[__REFS_LENGTH] = n;
                                                                    contextValue[__REF_INDEX] = undefined;
                                                                    contextValue[__CONTEXT] = undefined;
                                                                    referenceContext = undefined;
                                                                }
                                                                if (context != null && typeof context === 'object') {
                                                                    head = root.__head;
                                                                    tail = root.__tail;
                                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                    context === head && (root.__head = root.__next = head = next);
                                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                                    context.__next = context.__prev = undefined;
                                                                    head = tail = next = prev = undefined;
                                                                }
                                                                context = contextParent;
                                                                contextParent = contextLeaves && contextLeaves.parent;
                                                                contextLeafStack[contextLeafDepth--] = undefined;
                                                                contextType = context != null && context[$TYPE];
                                                                continue;
                                                            }
                                                            if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                contextLeafKeys = Object.keys(context);
                                                                contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                contextLeaves.parent = contextParent;
                                                                i = -1;
                                                                n = contextLeafKeys.length;
                                                                while (++i < n) {
                                                                    if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                        contextLeaves[i] = context[contextLeafKey];
                                                                    }
                                                                }
                                                            }
                                                            contextParent = context;
                                                            if (context = contextLeaves.pop()) {
                                                                contextLeafDepth++;
                                                                contextType = context != null && context[$TYPE];
                                                            } else {
                                                                contextType = 'leaf';
                                                                context = contextParent;
                                                                contextParent = contextLeaves.parent;
                                                            }
                                                            continue;
                                                        }
                                                    key = keyTmp;
                                                    context = contextTmp;
                                                    contextParent = contextParentTmp;
                                                    contextType = contextTypeTmp;
                                                    contextTmp = contextTypeTmp = undefined;
                                                    if (context != null && typeof context === 'object') {
                                                        head = root.__head;
                                                        tail = root.__tail;
                                                        (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                        (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                        context === head && (root.__head = root.__next = head = next);
                                                        context === tail && (root.__tail = root.__prev = tail = prev);
                                                        context.__next = context.__prev = undefined;
                                                        head = tail = next = prev = undefined;
                                                    }
                                                }
                                                message[$SIZE] = messageSize - sizeOffset;
                                                contextParent[key] = context = message;
                                                break;
                                            }
                                            context = contexts[--column];
                                            key = context[__KEY];
                                            contextParent = contexts[column - 1] || contextCache;
                                        } while (column > -1);
                                        context[__SELF] = context;
                                        context[__KEY] = key;
                                        context[__PARENT] = contextParent;
                                        context[__ROOT] = contextCache;
                                        if (context[__GENERATION] === undefined) {
                                            context[__GENERATION] = 0;
                                        }
                                        contextTmp = context;
                                        contextParentTmp = contextParent;
                                        while (context !== undefined) {
                                            contextSize = context['$size'] = (context['$size'] || 0) + sizeOffset;
                                            contextTmp2 = context;
                                            if (context[__GENERATION_UPDATED] !== generation) {
                                                generationStack = [];
                                                generationDepth = 0;
                                                while (generationDepth > -1) {
                                                    if ((generationReferences = generationStack[generationDepth]) === undefined) {
                                                        i = k = -1;
                                                        n = context[__REFS_LENGTH] || 0;
                                                        generationStack[generationDepth] = generationReferences = [];
                                                        context[__GENERATION_UPDATED] = generation;
                                                        context[__GENERATION] = (context[__GENERATION] || 0) + 1;
                                                        if ((reference = context[__PARENT]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                            generationReferences[++k] = reference;
                                                        }
                                                        while (++i < n) {
                                                            if ((reference = context[__REF + i]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                generationReferences[++k] = reference;
                                                            }
                                                        }
                                                    }
                                                    if ((context = generationReferences.pop()) !== undefined) {
                                                        ++generationDepth;
                                                    } else {
                                                        generationStack[generationDepth--] = undefined;
                                                    }
                                                }
                                            }
                                            reference = generationStack = generationReferences = undefined;
                                            context = contextTmp2;
                                            if ((contextParent = context[__PARENT]) !== undefined && contextSize <= 0) {
                                                contextRefsLength = context.__refsLength || 0;
                                                i = -1;
                                                while (++i < contextRefsLength) {
                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                        reference.__context = undefined;
                                                        context[__REF + i] = undefined;
                                                    }
                                                }
                                                context.__refsLength = undefined;
                                                contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                    i = (contextValue[__REF_INDEX] || 0) - 1;
                                                    n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                    while (++i <= n) {
                                                        referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                    }
                                                    referenceContext[__REFS_LENGTH] = n;
                                                    contextValue[__REF_INDEX] = undefined;
                                                    contextValue[__CONTEXT] = undefined;
                                                    referenceContext = undefined;
                                                }
                                                if (context != null && typeof context === 'object') {
                                                    head = root.__head;
                                                    tail = root.__tail;
                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                    context === head && (root.__head = root.__next = head = next);
                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                    context.__next = context.__prev = undefined;
                                                    head = tail = next = prev = undefined;
                                                }
                                            }
                                            context = contextParent;
                                        }
                                        context = contextTmp;
                                        contextParent = contextParentTmp;
                                        contextTmp = contextTmp2 = contextParentTmp = undefined;
                                        contextType = context != null && context[$TYPE];
                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                    }
                                }
                            }
                        }
                        break resolvePath;
                    } while (true);
                if (context != null) {
                    if (context != null && typeof context === 'object' && contextExpires !== 1) {
                        head = root.__head;
                        tail = root.__tail;
                        next = context.__next, prev = context.__prev;
                        if (context !== head) {
                            next && (next != null && typeof next === 'object') && (next.__prev = prev);
                            prev && (prev != null && typeof prev === 'object') && (prev.__next = next);
                            (next = head) && (head != null && typeof head === 'object') && (head.__prev = context);
                            root.__head = root.__next = head = context;
                            head.__next = next;
                            head.__prev = undefined;
                        }
                        if (tail == null || context === tail) {
                            root.__tail = root.__prev = tail = prev || context;
                        }
                        head = tail = next = prev = undefined;
                    }
                    if (contextType === 'error') {
                        if (expandsCount > -1) {
                            requestedPath[requestedPath.length] = null;
                        }
                        contextValue = context;
                    }
                }
                if (context == null || refreshing === true) {
                    src = optimizedPath;
                    dest = new Array(n = src.length);
                    i = -1;
                    while (++i < n) {
                        dest[i] = src[i];
                    }
                    opt = dest;
                    src = optimizedBoundPath;
                    dest = new Array(n = src.length);
                    i = -1;
                    while (++i < n) {
                        dest[i] = src[i];
                    }
                    req = dest;
                    reqLen = n;
                    i = -1;
                    n = requestedPath.length;
                    while (++i < n) {
                        key = path[i];
                        key2 = requestedPath[i];
                        req[reqLen + i] = key && typeof key === 'object' && [key2] || key2;
                    }
                    if (column < length) {
                        j = column + 1;
                        k = length + 1;
                        reqLen = req.length;
                        optLen = opt.length;
                        i = -1;
                        n = k - j;
                        while (++i < n) {
                            req[reqLen + i] = opt[optLen + i] = path[j + i];
                        }
                    }
                    req.pathSetIndex = index;
                    requestedMissingPaths[requestedMissingPaths.length] = req;
                    optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                } else if (contextValue !== undefined || boxed === true) {
                    src = optimizedPath;
                    dest = new Array(n = src.length);
                    i = -1;
                    while (++i < n) {
                        dest[i] = src[i];
                    }
                    opt = dest;
                    src = requestedPath;
                    dest = new Array(n = src.length);
                    i = -1;
                    while (++i < n) {
                        dest[i] = src[i];
                    }
                    req = dest;
                    requestedPaths[requestedPaths.length] = req;
                    optimizedPaths[optimizedPaths.length] = opt;
                    if (!!jsonCache) {
                        hasValues = true;
                        if (contextType === 'error') {
                            if (err === undefined) {
                                if (boxed === true) {
                                    err = context;
                                } else {
                                    dest = {};
                                    src = context;
                                    keys = Object.keys(src);
                                    i = -1;
                                    n = keys.length;
                                    while (++i < n) {
                                        x = keys[i];
                                        !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                                    }
                                    err = dest;
                                }
                                val = !!includeErrors && err || undefined;
                            }
                            errors[errors.length] = {
                                path: req,
                                value: err
                            };
                            err = undefined;
                        } else {
                            if (boxed === true) {
                                val = context;
                            } else if (contextValue != null && typeof contextValue === 'object') {
                                if (Array.isArray(contextValue)) {
                                    src = contextValue;
                                    dest = new Array(n = src.length);
                                    i = -1;
                                    while (++i < n) {
                                        dest[i] = src[i];
                                    }
                                    val = dest;
                                } else {
                                    dest = {};
                                    src = contextValue;
                                    keys = Object.keys(src);
                                    i = -1;
                                    n = keys.length;
                                    while (++i < n) {
                                        x = keys[i];
                                        !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                                    }
                                    val = dest;
                                }
                            } else {
                                val = contextValue;
                            }
                        }
                        do {
                            jsonKey = jsonKeys[jsonDepth];
                        } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                        if (jsonKey != null && jsonKey !== __NULL) {
                            json = jsons[jsonDepth - 1] || jsonCache;
                        } else {
                            json = jsonCache;
                        }
                        if (jsonKey != null && jsonKey !== __NULL) {
                            json[jsonKey] = val;
                        } else {
                            json = jsons[jsonDepth] = val;
                        }
                    }
                }
                for (; column > -1; --column) {
                    key = path[column];
                    if (key == null || typeof key !== 'object') {
                        continue;
                    }
                    isKeySet = true;
                    if (Array.isArray(key)) {
                        jsonDepth -= Number(jsonDepth > 0);
                        if (++key.index === key.length) {
                            key = key[key.index = 0];
                            if (key == null || typeof key !== 'object') {
                                continue;
                            }
                        } else {
                            break;
                        }
                    }
                    if (++key[__OFFSET] > (key.to || (key.to = key.from + (key.length || 1) - 1))) {
                        key[__OFFSET] = key.from;
                        continue;
                    }
                    jsonDepth -= Number(jsonDepth > 0);
                    break;
                }
            }
            path.column = column;
            if (!!jsonCache) {
                jsonDepth = -2;
                jsonLength = jsons.length;
                while (++jsonDepth < jsonLength) {
                    if ((json = jsons[jsonDepth]) != null) {
                        break;
                    }
                }
                if (hasValues) {
                    values[index] = { json: json };
                } else {
                    values[index] = undefined;
                }
            }
        }
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setJSONGAsJSONG() {
    var returnBlocker;
    var generation, model, state, values, errorSelector, onNext, errors, boxed, includeErrors, refreshing, connected, root, contextCache, context, expired, expiredLength, boundPath, optimizedBoundPath, column, offset, jsonDepth, boundPathValue, contexts, requested, optimized, requestedPaths, optimizedPaths, requestedMissingPaths, optimizedMissingPaths, requestedPath, optimizedPath, jsongEnvelopes, messages, jsons, jsonKeys, contextParent, index, count, paths, messageCache, messageParent, message, pathIndex, pathCount, hasValues, jsonCache, json, refsByCols, path, pathSet, length, resetOptimizedDepth, reference, i, j, n, isKeySet, key, contextExpires, contextInvalidated, head, tail, next, prev, contextType, contextValue, contextTimestamp, messageType, messageValue, messageTimestamp, messageExpires, sizeOffset, branchKeyTmp, messageSize, contextRefsLength, messageRefsLength, contextLeafStack, contextLeafDepth, keyTmp, contextTmp, contextParentTmp, contextTypeTmp, referenceContext, contextLeaves, contextLeafKeys, contextLeafKey, originalMessageSize, contextSize, contextTmp2, generationStack, generationDepth, generationReferences, k, jsonKey, val, src, dest, expandsCount, outermostColumn, outermostLength, outermostPath, err, keys, x, refLen, refContainer, backRefs, opt, req, reqLen, key2, optLen;
    generation = __GENERATION_GENERATION++;
    model = arguments[0];
    state = arguments[1];
    values = arguments[2];
    errorSelector = arguments[3];
    if (typeof values === 'function') {
        onNext = values;
        values = undefined;
    }
    errors = state.errors || (state.errors = []);
    boxed = model._boxed;
    includeErrors = model._includeErrors;
    refreshing = model._refreshing;
    connected = model._connected;
    root = model._root;
    contextCache = context = model._cache;
    expired = root.expired;
    expiredLength = expired.length;
    boundPath = state.boundPath || model._path;
    optimizedBoundPath = [];
    column = state.column || (state.column = 0) - 1;
    offset = state.offset || (state.offset = 0);
    jsonDepth = state.jsonDepth || (state.jsonDepth = 0);
    boundPathValue = state.boundPathValue;
    contexts = state.contexts || (state.contexts = []);
    requested = state.requested || (state.requested = {});
    optimized = state.optimized || (state.optimized = {});
    requestedPaths = state.requestedPaths || (state.requestedPaths = []);
    optimizedPaths = state.optimizedPaths || (state.optimizedPaths = []);
    requestedMissingPaths = state.requestedMissingPaths || (state.requestedMissingPaths = []);
    optimizedMissingPaths = state.optimizedMissingPaths || (state.optimizedMissingPaths = []);
    requestedPath = state.requestedPath || (state.requestedPath = []);
    optimizedPath = state.optimizedPath || (state.optimizedPath = []);
    jsongEnvelopes = state;
    messages = state.messages || (state.messages = []);
    jsons = state.jsons || (state.jsons = []);
    jsonKeys = state.jsonKeys || (state.jsonKeys = []);
    includeErrors = true;
    contexts[column] = contextParent = context;
    index = 0;
    count = jsongEnvelopes.length;
    for (; index < count; ++index) {
        jsongEnvelope = jsongEnvelopes[index];
        paths = jsongEnvelope.paths;
        messages[-1] = messageCache = messageParent = message = jsongEnvelope.jsong;
        pathIndex = paths.index || (paths.index = 0);
        pathCount = paths.length;
        for (; pathIndex < pathCount; ++pathIndex) {
            pathSet = paths[pathIndex];
            hasValues = hasValues || false;
            jsonDepth = jsonKeys.length = 0;
            jsonCache = json = jsons[-1] = !!values && values[0] || undefined;
            offset = 0;
            refsByCols = state.refsByCols = [];
            refsByCols[-1] = optimizedBoundPath;
            path = pathSet;
            length = path.length - 1;
            column = path.column || (path.column = 0);
            while (column > -1) {
                resetOptimizedDepth = column;
                while (--resetOptimizedDepth >= -1) {
                    if (!!(reference = refsByCols[resetOptimizedDepth])) {
                        i = j = -1;
                        n = reference.length;
                        offset = n - ++resetOptimizedDepth;
                        while (++i < n) {
                            optimizedPath[++j] = reference[i];
                        }
                        while (resetOptimizedDepth < column) {
                            optimizedPath[++j] = requestedPath[resetOptimizedDepth++];
                        }
                        optimizedPath.length = offset + resetOptimizedDepth;
                        break;
                    }
                }
                messageParent = messages[column - 1];
                contextParent = contexts[column - 1];
                resolvePath:
                    do {
                        for (; column < length; ++column) {
                            key = path[column];
                            isKeySet = false;
                            if (key != null && typeof key === 'object') {
                                isKeySet = true;
                                if (Array.isArray(key)) {
                                    key = key[key.index || (key.index = 0)];
                                    if (key != null && typeof key === 'object') {
                                        key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                    }
                                } else {
                                    key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            }
                            requestedPath[requestedPath.length = column] = key;
                            if (key != null && key !== __NULL) {
                                isKeySet = true;
                                jsonKeys[jsonDepth = column] = key;
                                optimizedPath[optimizedPath.length = column + offset] = key;
                                context = contextParent[key];
                                if (context != null) {
                                    if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                        contextInvalidated = context != null && context[__INVALIDATED];
                                        if (contextInvalidated === true === false) {
                                            context.__invalidated = true;
                                            context[$EXPIRES] = 0;
                                            expired[++expiredLength] = context;
                                            if (context != null && typeof context === 'object') {
                                                head = root.__head;
                                                tail = root.__tail;
                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                context === head && (root.__head = root.__next = head = next);
                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                context.__next = context.__prev = undefined;
                                                head = tail = next = prev = undefined;
                                            }
                                        }
                                        context = undefined;
                                    }
                                }
                                contextType = context != null && context[$TYPE];
                                contextValue = contextType === 'sentinel' ? context.value : context;
                                contextTimestamp = context != null && context[$TIMESTAMP];
                                message = messageParent && messageParent[key];
                                if (!(context != null) && !(message != null)) {
                                    break resolvePath;
                                }
                                messageType = message != null && message[$TYPE];
                                messageValue = messageType === 'sentinel' ? message.value : message;
                                messageTimestamp = message != null && message[$TIMESTAMP];
                                messageExpires = (message != null || null) && message[$EXPIRES];
                                if (!!((messageExpires = (message != null || null) && message[$EXPIRES]) != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < now())) === false) {
                                    if (context != null === false) {
                                        sizeOffset = 0;
                                        branchKeyTmp = key;
                                        messageSize = message != null && message[$SIZE] || 0;
                                        do {
                                            if (key != null && key !== __NULL) {
                                                if (context != null && context !== message) {
                                                    contextRefsLength = context.__refsLength || 0;
                                                    messageRefsLength = message.__refsLength || 0;
                                                    i = -1;
                                                    while (++i < contextRefsLength) {
                                                        if ((reference = context[__REF + i]) !== undefined) {
                                                            reference[__CONTEXT] = message;
                                                            message[__REF + (messageRefsLength + i)] = reference;
                                                            context[__REF + i] = undefined;
                                                        }
                                                    }
                                                    message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                    context[__REFS_LENGTH] = reference = undefined;
                                                    contextLeafStack = [];
                                                    contextLeafDepth = 0;
                                                    keyTmp = key;
                                                    contextTmp = context;
                                                    contextParentTmp = contextParent;
                                                    contextTypeTmp = contextType;
                                                    recursing:
                                                        while (contextLeafDepth > -1) {
                                                            if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                                contextRefsLength = context.__refsLength || 0;
                                                                i = -1;
                                                                while (++i < contextRefsLength) {
                                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                                        reference.__context = undefined;
                                                                        context[__REF + i] = undefined;
                                                                    }
                                                                }
                                                                context.__refsLength = undefined;
                                                                contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                    i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                    n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                    while (++i <= n) {
                                                                        referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                    }
                                                                    referenceContext[__REFS_LENGTH] = n;
                                                                    contextValue[__REF_INDEX] = undefined;
                                                                    contextValue[__CONTEXT] = undefined;
                                                                    referenceContext = undefined;
                                                                }
                                                                if (context != null && typeof context === 'object') {
                                                                    head = root.__head;
                                                                    tail = root.__tail;
                                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                    context === head && (root.__head = root.__next = head = next);
                                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                                    context.__next = context.__prev = undefined;
                                                                    head = tail = next = prev = undefined;
                                                                }
                                                                context = contextParent;
                                                                contextParent = contextLeaves && contextLeaves.parent;
                                                                contextLeafStack[contextLeafDepth--] = undefined;
                                                                contextType = context != null && context[$TYPE];
                                                                continue;
                                                            }
                                                            if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                contextLeafKeys = Object.keys(context);
                                                                contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                contextLeaves.parent = contextParent;
                                                                i = -1;
                                                                n = contextLeafKeys.length;
                                                                while (++i < n) {
                                                                    if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                        contextLeaves[i] = context[contextLeafKey];
                                                                    }
                                                                }
                                                            }
                                                            contextParent = context;
                                                            if (context = contextLeaves.pop()) {
                                                                contextLeafDepth++;
                                                                contextType = context != null && context[$TYPE];
                                                            } else {
                                                                contextType = 'leaf';
                                                                context = contextParent;
                                                                contextParent = contextLeaves.parent;
                                                            }
                                                            continue;
                                                        }
                                                    key = keyTmp;
                                                    context = contextTmp;
                                                    contextParent = contextParentTmp;
                                                    contextType = contextTypeTmp;
                                                    contextTmp = contextTypeTmp = undefined;
                                                    if (context != null && typeof context === 'object') {
                                                        head = root.__head;
                                                        tail = root.__tail;
                                                        (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                        (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                        context === head && (root.__head = root.__next = head = next);
                                                        context === tail && (root.__tail = root.__prev = tail = prev);
                                                        context.__next = context.__prev = undefined;
                                                        head = tail = next = prev = undefined;
                                                    }
                                                }
                                                message[$SIZE] = messageSize - sizeOffset;
                                                contextParent[key] = context = message;
                                                break;
                                            }
                                            context = contexts[--column];
                                            key = context[__KEY];
                                            contextParent = contexts[column - 1] || contextCache;
                                        } while (column > -1);
                                        context[__SELF] = context;
                                        context[__KEY] = key;
                                        context[__PARENT] = contextParent;
                                        context[__ROOT] = contextCache;
                                        if (context[__GENERATION] === undefined) {
                                            context[__GENERATION] = 0;
                                        }
                                        contextType = context != null && context[$TYPE];
                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                        key = branchKeyTmp;
                                    } else if (context !== message && ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) && ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue)) && (messageTimestamp < contextTimestamp || messageExpires === 0 && ((context = message) || true)) === false) {
                                        inserting:
                                            while (true) {
                                                i = 0;
                                                if ((i = contextValue.length) === messageValue.length) {
                                                    checking_refs:
                                                        while (--i > -1) {
                                                            if (contextValue[i] !== messageValue[i]) {
                                                                break checking_refs;
                                                            }
                                                        }
                                                    if (i === -1) {
                                                        break inserting;
                                                    }
                                                }
                                                branchKeyTmp = key;
                                                messageSize = message != null && message[$SIZE] || 0;
                                                originalMessageSize = messageSize || 0;
                                                if ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) {
                                                    messageType = 'array';
                                                    originalMessageSize = messageValue.length || 1;
                                                    messageSize = (messageType === 'sentinel' && 50 || 0) + originalMessageSize;
                                                    messageValue[__CONTAINER] = message;
                                                } else if (messageType === 'sentinel') {
                                                    messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                } else if (messageType === 'error') {
                                                    if (typeof errorSelector === 'function') {
                                                        message = Enumerable.errorSelector(message);
                                                    }
                                                    messageSize = 50 + originalMessageSize;
                                                } else if (messageValue == null || typeof messageValue !== 'object') {
                                                    originalMessageSize = typeof messageValue === 'string' && messageValue.length || 1;
                                                    messageSize = 50 + originalMessageSize;
                                                    messageType = 'sentinel';
                                                    message = {
                                                        '$type': messageType,
                                                        'value': messageValue
                                                    };
                                                } else {
                                                    messageSize = message[$SIZE] || 50 * 2;
                                                    messageType = message[$TYPE] = messageType || 'leaf';
                                                }
                                                message[$SIZE] = sizeOffset = messageSize;
                                                do {
                                                    if (key != null && key !== __NULL) {
                                                        if (context != null && context !== message) {
                                                            contextRefsLength = context.__refsLength || 0;
                                                            messageRefsLength = message.__refsLength || 0;
                                                            i = -1;
                                                            while (++i < contextRefsLength) {
                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                    reference[__CONTEXT] = message;
                                                                    message[__REF + (messageRefsLength + i)] = reference;
                                                                    context[__REF + i] = undefined;
                                                                }
                                                            }
                                                            message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                            context[__REFS_LENGTH] = reference = undefined;
                                                            contextLeafStack = [];
                                                            contextLeafDepth = 0;
                                                            keyTmp = key;
                                                            contextTmp = context;
                                                            contextParentTmp = contextParent;
                                                            contextTypeTmp = contextType;
                                                            recursing:
                                                                while (contextLeafDepth > -1) {
                                                                    if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                                                        contextRefsLength = context.__refsLength || 0;
                                                                        i = -1;
                                                                        while (++i < contextRefsLength) {
                                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                                reference.__context = undefined;
                                                                                context[__REF + i] = undefined;
                                                                            }
                                                                        }
                                                                        context.__refsLength = undefined;
                                                                        contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                        if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                            i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                            n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                            while (++i <= n) {
                                                                                referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                            }
                                                                            referenceContext[__REFS_LENGTH] = n;
                                                                            contextValue[__REF_INDEX] = undefined;
                                                                            contextValue[__CONTEXT] = undefined;
                                                                            referenceContext = undefined;
                                                                        }
                                                                        if (context != null && typeof context === 'object') {
                                                                            head = root.__head;
                                                                            tail = root.__tail;
                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                            context === head && (root.__head = root.__next = head = next);
                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                            context.__next = context.__prev = undefined;
                                                                            head = tail = next = prev = undefined;
                                                                        }
                                                                        context = contextParent;
                                                                        contextParent = contextLeaves && contextLeaves.parent;
                                                                        contextLeafStack[contextLeafDepth--] = undefined;
                                                                        contextType = context != null && context[$TYPE];
                                                                        continue;
                                                                    }
                                                                    if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                        contextLeafKeys = Object.keys(context);
                                                                        contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                        contextLeaves.parent = contextParent;
                                                                        i = -1;
                                                                        n = contextLeafKeys.length;
                                                                        while (++i < n) {
                                                                            if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                contextLeaves[i] = context[contextLeafKey];
                                                                            }
                                                                        }
                                                                    }
                                                                    contextParent = context;
                                                                    if (context = contextLeaves.pop()) {
                                                                        contextLeafDepth++;
                                                                        contextType = context != null && context[$TYPE];
                                                                    } else {
                                                                        contextType = 'leaf';
                                                                        context = contextParent;
                                                                        contextParent = contextLeaves.parent;
                                                                    }
                                                                    continue;
                                                                }
                                                            key = keyTmp;
                                                            context = contextTmp;
                                                            contextParent = contextParentTmp;
                                                            contextType = contextTypeTmp;
                                                            contextTmp = contextTypeTmp = undefined;
                                                            if (context != null && typeof context === 'object') {
                                                                head = root.__head;
                                                                tail = root.__tail;
                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                context === head && (root.__head = root.__next = head = next);
                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                context.__next = context.__prev = undefined;
                                                                head = tail = next = prev = undefined;
                                                            }
                                                        }
                                                        message[$SIZE] = messageSize - sizeOffset;
                                                        contextParent[key] = context = message;
                                                        break;
                                                    }
                                                    context = contexts[--column];
                                                    key = context[__KEY];
                                                    contextParent = contexts[column - 1] || contextCache;
                                                } while (column > -1);
                                                context[__SELF] = context;
                                                context[__KEY] = key;
                                                context[__PARENT] = contextParent;
                                                context[__ROOT] = contextCache;
                                                if (context[__GENERATION] === undefined) {
                                                    context[__GENERATION] = 0;
                                                }
                                                contextTmp = context;
                                                contextParentTmp = contextParent;
                                                while (context !== undefined) {
                                                    contextSize = context['$size'] = (context['$size'] || 0) + sizeOffset;
                                                    contextTmp2 = context;
                                                    if (context[__GENERATION_UPDATED] !== generation) {
                                                        generationStack = [];
                                                        generationDepth = 0;
                                                        while (generationDepth > -1) {
                                                            if ((generationReferences = generationStack[generationDepth]) === undefined) {
                                                                i = k = -1;
                                                                n = context[__REFS_LENGTH] || 0;
                                                                generationStack[generationDepth] = generationReferences = [];
                                                                context[__GENERATION_UPDATED] = generation;
                                                                context[__GENERATION] = (context[__GENERATION] || 0) + 1;
                                                                if ((reference = context[__PARENT]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                    generationReferences[++k] = reference;
                                                                }
                                                                while (++i < n) {
                                                                    if ((reference = context[__REF + i]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                        generationReferences[++k] = reference;
                                                                    }
                                                                }
                                                            }
                                                            if ((context = generationReferences.pop()) !== undefined) {
                                                                ++generationDepth;
                                                            } else {
                                                                generationStack[generationDepth--] = undefined;
                                                            }
                                                        }
                                                    }
                                                    reference = generationStack = generationReferences = undefined;
                                                    context = contextTmp2;
                                                    if ((contextParent = context[__PARENT]) !== undefined && contextSize <= 0) {
                                                        contextRefsLength = context.__refsLength || 0;
                                                        i = -1;
                                                        while (++i < contextRefsLength) {
                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                reference.__context = undefined;
                                                                context[__REF + i] = undefined;
                                                            }
                                                        }
                                                        context.__refsLength = undefined;
                                                        contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                        if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                            i = (contextValue[__REF_INDEX] || 0) - 1;
                                                            n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                            while (++i <= n) {
                                                                referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                            }
                                                            referenceContext[__REFS_LENGTH] = n;
                                                            contextValue[__REF_INDEX] = undefined;
                                                            contextValue[__CONTEXT] = undefined;
                                                            referenceContext = undefined;
                                                        }
                                                        if (context != null && typeof context === 'object') {
                                                            head = root.__head;
                                                            tail = root.__tail;
                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                            context === head && (root.__head = root.__next = head = next);
                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                            context.__next = context.__prev = undefined;
                                                            head = tail = next = prev = undefined;
                                                        }
                                                    }
                                                    context = contextParent;
                                                }
                                                context = contextTmp;
                                                contextParent = contextParentTmp;
                                                contextTmp = contextTmp2 = contextParentTmp = undefined;
                                                contextType = context != null && context[$TYPE];
                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                key = branchKeyTmp;
                                                break;
                                            }
                                    } else {
                                        context[__SELF] = context;
                                        context[__KEY] = key;
                                        context[__PARENT] = contextParent;
                                        context[__ROOT] = contextCache;
                                        if (context[__GENERATION] === undefined) {
                                            context[__GENERATION] = 0;
                                        }
                                    }
                                } else {
                                    context[__SELF] = context;
                                    context[__KEY] = key;
                                    context[__PARENT] = contextParent;
                                    context[__ROOT] = contextCache;
                                    if (context[__GENERATION] === undefined) {
                                        context[__GENERATION] = 0;
                                    }
                                }
                                branchKeyTmp = key;
                                if ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue)) {
                                    isKeySet = false;
                                    if ((jsonKey = key) != null && jsonKey !== __NULL) {
                                        if (boxed === true) {
                                            val = context;
                                        } else {
                                            src = contextValue;
                                            dest = new Array(n = src.length);
                                            i = -1;
                                            while (++i < n) {
                                                dest[i] = src[i];
                                            }
                                            val = dest;
                                        }
                                        do {
                                            jsonKey = jsonKeys[jsonDepth];
                                        } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                                        if (jsonKey != null && jsonKey !== __NULL) {
                                            json = jsons[jsonDepth - 1] || jsonCache;
                                        } else {
                                            json = jsonCache;
                                        }
                                        if (jsonKey != null && jsonKey !== __NULL) {
                                            json[jsonKey] = val;
                                        } else {
                                            json = jsons[jsonDepth] = val;
                                        }
                                    }
                                    expandsCount = -1;
                                    refsByCols[outermostColumn = column] = contextValue;
                                    do {
                                        branchKeyTmp = key;
                                        if (false) {
                                        } else {
                                            json = jsonCache;
                                            message = messageCache;
                                            messageParent = messageCache;
                                            refsByCols[outermostColumn = column] = contextValue;
                                            outermostLength = length;
                                            outermostPath = path;
                                            offset = 0;
                                            column = -1;
                                            path = contextValue;
                                            length = path.length - 1;
                                            contextParent = contextCache;
                                            while (++column < length) {
                                                if ((key = path[column]) == null) {
                                                    continue;
                                                }
                                                optimizedPath[optimizedPath.length = column + offset] = key;
                                                context = contextParent[key];
                                                if (context != null) {
                                                    if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                        contextInvalidated = context != null && context[__INVALIDATED];
                                                        if (contextInvalidated === true === false) {
                                                            context.__invalidated = true;
                                                            context[$EXPIRES] = 0;
                                                            expired[++expiredLength] = context;
                                                            if (context != null && typeof context === 'object') {
                                                                head = root.__head;
                                                                tail = root.__tail;
                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                context === head && (root.__head = root.__next = head = next);
                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                context.__next = context.__prev = undefined;
                                                                head = tail = next = prev = undefined;
                                                            }
                                                        }
                                                        context = undefined;
                                                    }
                                                }
                                                contextType = context != null && context[$TYPE];
                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                contextTimestamp = context != null && context[$TIMESTAMP];
                                                message = messageParent && messageParent[key];
                                                if (!(context != null) && !(message != null)) {
                                                    break resolvePath;
                                                }
                                                messageType = message != null && message[$TYPE];
                                                messageValue = messageType === 'sentinel' ? message.value : message;
                                                messageTimestamp = message != null && message[$TIMESTAMP];
                                                messageExpires = (message != null || null) && message[$EXPIRES];
                                                if (!!((messageExpires = (message != null || null) && message[$EXPIRES]) != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < now())) === false) {
                                                    if (context != null === false) {
                                                        sizeOffset = 0;
                                                        branchKeyTmp = key;
                                                        messageSize = message != null && message[$SIZE] || 0;
                                                        do {
                                                            if (key != null && key !== __NULL) {
                                                                if (context != null && context !== message) {
                                                                    contextRefsLength = context.__refsLength || 0;
                                                                    messageRefsLength = message.__refsLength || 0;
                                                                    i = -1;
                                                                    while (++i < contextRefsLength) {
                                                                        if ((reference = context[__REF + i]) !== undefined) {
                                                                            reference[__CONTEXT] = message;
                                                                            message[__REF + (messageRefsLength + i)] = reference;
                                                                            context[__REF + i] = undefined;
                                                                        }
                                                                    }
                                                                    message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                                    context[__REFS_LENGTH] = reference = undefined;
                                                                    contextLeafStack = [];
                                                                    contextLeafDepth = 0;
                                                                    keyTmp = key;
                                                                    contextTmp = context;
                                                                    contextParentTmp = contextParent;
                                                                    contextTypeTmp = contextType;
                                                                    recursing:
                                                                        while (contextLeafDepth > -1) {
                                                                            if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                                                contextRefsLength = context.__refsLength || 0;
                                                                                i = -1;
                                                                                while (++i < contextRefsLength) {
                                                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                                                        reference.__context = undefined;
                                                                                        context[__REF + i] = undefined;
                                                                                    }
                                                                                }
                                                                                context.__refsLength = undefined;
                                                                                contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                                if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                    i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                    n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                    while (++i <= n) {
                                                                                        referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                    }
                                                                                    referenceContext[__REFS_LENGTH] = n;
                                                                                    contextValue[__REF_INDEX] = undefined;
                                                                                    contextValue[__CONTEXT] = undefined;
                                                                                    referenceContext = undefined;
                                                                                }
                                                                                if (context != null && typeof context === 'object') {
                                                                                    head = root.__head;
                                                                                    tail = root.__tail;
                                                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                    context === head && (root.__head = root.__next = head = next);
                                                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                    context.__next = context.__prev = undefined;
                                                                                    head = tail = next = prev = undefined;
                                                                                }
                                                                                context = contextParent;
                                                                                contextParent = contextLeaves && contextLeaves.parent;
                                                                                contextLeafStack[contextLeafDepth--] = undefined;
                                                                                contextType = context != null && context[$TYPE];
                                                                                continue;
                                                                            }
                                                                            if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                                contextLeafKeys = Object.keys(context);
                                                                                contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                                contextLeaves.parent = contextParent;
                                                                                i = -1;
                                                                                n = contextLeafKeys.length;
                                                                                while (++i < n) {
                                                                                    if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                        contextLeaves[i] = context[contextLeafKey];
                                                                                    }
                                                                                }
                                                                            }
                                                                            contextParent = context;
                                                                            if (context = contextLeaves.pop()) {
                                                                                contextLeafDepth++;
                                                                                contextType = context != null && context[$TYPE];
                                                                            } else {
                                                                                contextType = 'leaf';
                                                                                context = contextParent;
                                                                                contextParent = contextLeaves.parent;
                                                                            }
                                                                            continue;
                                                                        }
                                                                    key = keyTmp;
                                                                    context = contextTmp;
                                                                    contextParent = contextParentTmp;
                                                                    contextType = contextTypeTmp;
                                                                    contextTmp = contextTypeTmp = undefined;
                                                                    if (context != null && typeof context === 'object') {
                                                                        head = root.__head;
                                                                        tail = root.__tail;
                                                                        (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                        (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                        context === head && (root.__head = root.__next = head = next);
                                                                        context === tail && (root.__tail = root.__prev = tail = prev);
                                                                        context.__next = context.__prev = undefined;
                                                                        head = tail = next = prev = undefined;
                                                                    }
                                                                }
                                                                message[$SIZE] = messageSize - sizeOffset;
                                                                contextParent[key] = context = message;
                                                                break;
                                                            }
                                                            context = contexts[--column];
                                                            key = context[__KEY];
                                                            contextParent = contexts[column - 1] || contextCache;
                                                        } while (column > -1);
                                                        context[__SELF] = context;
                                                        context[__KEY] = key;
                                                        context[__PARENT] = contextParent;
                                                        context[__ROOT] = contextCache;
                                                        if (context[__GENERATION] === undefined) {
                                                            context[__GENERATION] = 0;
                                                        }
                                                        contextType = context != null && context[$TYPE];
                                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                                        key = branchKeyTmp;
                                                    } else if (context !== message && ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) && ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue)) && (messageTimestamp < contextTimestamp || messageExpires === 0 && ((context = message) || true)) === false) {
                                                        inserting:
                                                            while (true) {
                                                                i = 0;
                                                                if ((i = contextValue.length) === messageValue.length) {
                                                                    checking_refs:
                                                                        while (--i > -1) {
                                                                            if (contextValue[i] !== messageValue[i]) {
                                                                                break checking_refs;
                                                                            }
                                                                        }
                                                                    if (i === -1) {
                                                                        break inserting;
                                                                    }
                                                                }
                                                                branchKeyTmp = key;
                                                                messageSize = message != null && message[$SIZE] || 0;
                                                                originalMessageSize = messageSize || 0;
                                                                if ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) {
                                                                    messageType = 'array';
                                                                    originalMessageSize = messageValue.length || 1;
                                                                    messageSize = (messageType === 'sentinel' && 50 || 0) + originalMessageSize;
                                                                    messageValue[__CONTAINER] = message;
                                                                } else if (messageType === 'sentinel') {
                                                                    messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                                } else if (messageType === 'error') {
                                                                    if (typeof errorSelector === 'function') {
                                                                        message = Enumerable.errorSelector(message);
                                                                    }
                                                                    messageSize = 50 + originalMessageSize;
                                                                } else if (messageValue == null || typeof messageValue !== 'object') {
                                                                    originalMessageSize = typeof messageValue === 'string' && messageValue.length || 1;
                                                                    messageSize = 50 + originalMessageSize;
                                                                    messageType = 'sentinel';
                                                                    message = {
                                                                        '$type': messageType,
                                                                        'value': messageValue
                                                                    };
                                                                } else {
                                                                    messageSize = message[$SIZE] || 50 * 2;
                                                                    messageType = message[$TYPE] = messageType || 'leaf';
                                                                }
                                                                message[$SIZE] = sizeOffset = messageSize;
                                                                do {
                                                                    if (key != null && key !== __NULL) {
                                                                        if (context != null && context !== message) {
                                                                            contextRefsLength = context.__refsLength || 0;
                                                                            messageRefsLength = message.__refsLength || 0;
                                                                            i = -1;
                                                                            while (++i < contextRefsLength) {
                                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                                    reference[__CONTEXT] = message;
                                                                                    message[__REF + (messageRefsLength + i)] = reference;
                                                                                    context[__REF + i] = undefined;
                                                                                }
                                                                            }
                                                                            message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                                            context[__REFS_LENGTH] = reference = undefined;
                                                                            contextLeafStack = [];
                                                                            contextLeafDepth = 0;
                                                                            keyTmp = key;
                                                                            contextTmp = context;
                                                                            contextParentTmp = contextParent;
                                                                            contextTypeTmp = contextType;
                                                                            recursing:
                                                                                while (contextLeafDepth > -1) {
                                                                                    if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                                                                        contextRefsLength = context.__refsLength || 0;
                                                                                        i = -1;
                                                                                        while (++i < contextRefsLength) {
                                                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                                                reference.__context = undefined;
                                                                                                context[__REF + i] = undefined;
                                                                                            }
                                                                                        }
                                                                                        context.__refsLength = undefined;
                                                                                        contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                                        if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                            i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                            n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                            while (++i <= n) {
                                                                                                referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                            }
                                                                                            referenceContext[__REFS_LENGTH] = n;
                                                                                            contextValue[__REF_INDEX] = undefined;
                                                                                            contextValue[__CONTEXT] = undefined;
                                                                                            referenceContext = undefined;
                                                                                        }
                                                                                        if (context != null && typeof context === 'object') {
                                                                                            head = root.__head;
                                                                                            tail = root.__tail;
                                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                            context === head && (root.__head = root.__next = head = next);
                                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                            context.__next = context.__prev = undefined;
                                                                                            head = tail = next = prev = undefined;
                                                                                        }
                                                                                        context = contextParent;
                                                                                        contextParent = contextLeaves && contextLeaves.parent;
                                                                                        contextLeafStack[contextLeafDepth--] = undefined;
                                                                                        contextType = context != null && context[$TYPE];
                                                                                        continue;
                                                                                    }
                                                                                    if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                                        contextLeafKeys = Object.keys(context);
                                                                                        contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                                        contextLeaves.parent = contextParent;
                                                                                        i = -1;
                                                                                        n = contextLeafKeys.length;
                                                                                        while (++i < n) {
                                                                                            if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                                contextLeaves[i] = context[contextLeafKey];
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    contextParent = context;
                                                                                    if (context = contextLeaves.pop()) {
                                                                                        contextLeafDepth++;
                                                                                        contextType = context != null && context[$TYPE];
                                                                                    } else {
                                                                                        contextType = 'leaf';
                                                                                        context = contextParent;
                                                                                        contextParent = contextLeaves.parent;
                                                                                    }
                                                                                    continue;
                                                                                }
                                                                            key = keyTmp;
                                                                            context = contextTmp;
                                                                            contextParent = contextParentTmp;
                                                                            contextType = contextTypeTmp;
                                                                            contextTmp = contextTypeTmp = undefined;
                                                                            if (context != null && typeof context === 'object') {
                                                                                head = root.__head;
                                                                                tail = root.__tail;
                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                context.__next = context.__prev = undefined;
                                                                                head = tail = next = prev = undefined;
                                                                            }
                                                                        }
                                                                        message[$SIZE] = messageSize - sizeOffset;
                                                                        contextParent[key] = context = message;
                                                                        break;
                                                                    }
                                                                    context = contexts[--column];
                                                                    key = context[__KEY];
                                                                    contextParent = contexts[column - 1] || contextCache;
                                                                } while (column > -1);
                                                                context[__SELF] = context;
                                                                context[__KEY] = key;
                                                                context[__PARENT] = contextParent;
                                                                context[__ROOT] = contextCache;
                                                                if (context[__GENERATION] === undefined) {
                                                                    context[__GENERATION] = 0;
                                                                }
                                                                contextTmp = context;
                                                                contextParentTmp = contextParent;
                                                                while (context !== undefined) {
                                                                    contextSize = context['$size'] = (context['$size'] || 0) + sizeOffset;
                                                                    contextTmp2 = context;
                                                                    if (context[__GENERATION_UPDATED] !== generation) {
                                                                        generationStack = [];
                                                                        generationDepth = 0;
                                                                        while (generationDepth > -1) {
                                                                            if ((generationReferences = generationStack[generationDepth]) === undefined) {
                                                                                i = k = -1;
                                                                                n = context[__REFS_LENGTH] || 0;
                                                                                generationStack[generationDepth] = generationReferences = [];
                                                                                context[__GENERATION_UPDATED] = generation;
                                                                                context[__GENERATION] = (context[__GENERATION] || 0) + 1;
                                                                                if ((reference = context[__PARENT]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                                    generationReferences[++k] = reference;
                                                                                }
                                                                                while (++i < n) {
                                                                                    if ((reference = context[__REF + i]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                                        generationReferences[++k] = reference;
                                                                                    }
                                                                                }
                                                                            }
                                                                            if ((context = generationReferences.pop()) !== undefined) {
                                                                                ++generationDepth;
                                                                            } else {
                                                                                generationStack[generationDepth--] = undefined;
                                                                            }
                                                                        }
                                                                    }
                                                                    reference = generationStack = generationReferences = undefined;
                                                                    context = contextTmp2;
                                                                    if ((contextParent = context[__PARENT]) !== undefined && contextSize <= 0) {
                                                                        contextRefsLength = context.__refsLength || 0;
                                                                        i = -1;
                                                                        while (++i < contextRefsLength) {
                                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                                reference.__context = undefined;
                                                                                context[__REF + i] = undefined;
                                                                            }
                                                                        }
                                                                        context.__refsLength = undefined;
                                                                        contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                        if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                            i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                            n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                            while (++i <= n) {
                                                                                referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                            }
                                                                            referenceContext[__REFS_LENGTH] = n;
                                                                            contextValue[__REF_INDEX] = undefined;
                                                                            contextValue[__CONTEXT] = undefined;
                                                                            referenceContext = undefined;
                                                                        }
                                                                        if (context != null && typeof context === 'object') {
                                                                            head = root.__head;
                                                                            tail = root.__tail;
                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                            context === head && (root.__head = root.__next = head = next);
                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                            context.__next = context.__prev = undefined;
                                                                            head = tail = next = prev = undefined;
                                                                        }
                                                                    }
                                                                    context = contextParent;
                                                                }
                                                                context = contextTmp;
                                                                contextParent = contextParentTmp;
                                                                contextTmp = contextTmp2 = contextParentTmp = undefined;
                                                                contextType = context != null && context[$TYPE];
                                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                                key = branchKeyTmp;
                                                                break;
                                                            }
                                                    } else {
                                                        context[__SELF] = context;
                                                        context[__KEY] = key;
                                                        context[__PARENT] = contextParent;
                                                        context[__ROOT] = contextCache;
                                                        if (context[__GENERATION] === undefined) {
                                                            context[__GENERATION] = 0;
                                                        }
                                                    }
                                                } else {
                                                    context[__SELF] = context;
                                                    context[__KEY] = key;
                                                    context[__PARENT] = contextParent;
                                                    context[__ROOT] = contextCache;
                                                    if (context[__GENERATION] === undefined) {
                                                        context[__GENERATION] = 0;
                                                    }
                                                }
                                                contextParent = context;
                                                messageParent = message;
                                                if (context != null && ((jsonKey = key) != null && jsonKey !== __NULL)) {
                                                    if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                        if (contextType === 'error') {
                                                            if (boxed === true) {
                                                                err = context;
                                                            } else {
                                                                dest = {};
                                                                src = context;
                                                                keys = Object.keys(src);
                                                                i = -1;
                                                                n = keys.length;
                                                                while (++i < n) {
                                                                    x = keys[i];
                                                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                                }
                                                                err = dest;
                                                            }
                                                            val = !!includeErrors && err || undefined;
                                                        } else {
                                                            if (boxed === true) {
                                                                val = context;
                                                            } else if (contextValue != null && typeof contextValue === 'object') {
                                                                if (Array.isArray(contextValue)) {
                                                                    src = contextValue;
                                                                    dest = new Array(n = src.length);
                                                                    i = -1;
                                                                    while (++i < n) {
                                                                        dest[i] = src[i];
                                                                    }
                                                                    val = dest;
                                                                } else {
                                                                    dest = {};
                                                                    src = contextValue;
                                                                    keys = Object.keys(src);
                                                                    i = -1;
                                                                    n = keys.length;
                                                                    while (++i < n) {
                                                                        x = keys[i];
                                                                        !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                                    }
                                                                    val = dest;
                                                                }
                                                            } else {
                                                                val = contextValue;
                                                            }
                                                        }
                                                        if (jsonKey != null && jsonKey !== __NULL) {
                                                            json[jsonKey] = val;
                                                        } else {
                                                            json = jsons[jsonDepth] = val;
                                                        }
                                                    } else {
                                                        if (jsonKey != null && jsonKey !== __NULL) {
                                                            json = json[jsonKey] || (json[jsonKey] = {});
                                                        }
                                                    }
                                                }
                                                if (context === undefined) {
                                                    i = -1;
                                                    refLen = path.length;
                                                    offset = refLen - column - 1;
                                                    optimizedPath.length = refLen;
                                                    while (++i < refLen) {
                                                        optimizedPath[i] = path[i];
                                                    }
                                                    break;
                                                } else if (!!contextType || Array.isArray(contextValue)) {
                                                    break;
                                                }
                                                contextParent = context;
                                            }
                                            if (column === length) {
                                                if ((key = path[column]) != null) {
                                                    optimizedPath[optimizedPath.length = column + offset] = key;
                                                    context = contextParent[key];
                                                    if (context != null) {
                                                        if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                            contextInvalidated = context != null && context[__INVALIDATED];
                                                            if (contextInvalidated === true === false) {
                                                                context.__invalidated = true;
                                                                context[$EXPIRES] = 0;
                                                                expired[++expiredLength] = context;
                                                                if (context != null && typeof context === 'object') {
                                                                    head = root.__head;
                                                                    tail = root.__tail;
                                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                    context === head && (root.__head = root.__next = head = next);
                                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                                    context.__next = context.__prev = undefined;
                                                                    head = tail = next = prev = undefined;
                                                                }
                                                            }
                                                            context = undefined;
                                                        }
                                                    }
                                                    contextType = context != null && context[$TYPE];
                                                    contextValue = contextType === 'sentinel' ? context.value : context;
                                                    contextTimestamp = context != null && context[$TIMESTAMP];
                                                    message = messageParent && messageParent[key];
                                                    if (!(context != null) && !(message != null)) {
                                                        break resolvePath;
                                                    }
                                                    messageType = message != null && message[$TYPE];
                                                    messageValue = messageType === 'sentinel' ? message.value : message;
                                                    messageTimestamp = message != null && message[$TIMESTAMP];
                                                    messageExpires = (message != null || null) && message[$EXPIRES];
                                                    if (!!((messageExpires = (message != null || null) && message[$EXPIRES]) != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < now())) === false) {
                                                        if (context != null === false) {
                                                            sizeOffset = 0;
                                                            branchKeyTmp = key;
                                                            messageSize = message != null && message[$SIZE] || 0;
                                                            do {
                                                                if (key != null && key !== __NULL) {
                                                                    if (context != null && context !== message) {
                                                                        contextRefsLength = context.__refsLength || 0;
                                                                        messageRefsLength = message.__refsLength || 0;
                                                                        i = -1;
                                                                        while (++i < contextRefsLength) {
                                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                                reference[__CONTEXT] = message;
                                                                                message[__REF + (messageRefsLength + i)] = reference;
                                                                                context[__REF + i] = undefined;
                                                                            }
                                                                        }
                                                                        message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                                        context[__REFS_LENGTH] = reference = undefined;
                                                                        contextLeafStack = [];
                                                                        contextLeafDepth = 0;
                                                                        keyTmp = key;
                                                                        contextTmp = context;
                                                                        contextParentTmp = contextParent;
                                                                        contextTypeTmp = contextType;
                                                                        recursing:
                                                                            while (contextLeafDepth > -1) {
                                                                                if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                                    contextValue = contextType === 'sentinel' ? context.value : context;
                                                                                    contextRefsLength = context.__refsLength || 0;
                                                                                    i = -1;
                                                                                    while (++i < contextRefsLength) {
                                                                                        if ((reference = context[__REF + i]) !== undefined) {
                                                                                            reference.__context = undefined;
                                                                                            context[__REF + i] = undefined;
                                                                                        }
                                                                                    }
                                                                                    context.__refsLength = undefined;
                                                                                    contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                                    if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                        i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                        n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                        while (++i <= n) {
                                                                                            referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                        }
                                                                                        referenceContext[__REFS_LENGTH] = n;
                                                                                        contextValue[__REF_INDEX] = undefined;
                                                                                        contextValue[__CONTEXT] = undefined;
                                                                                        referenceContext = undefined;
                                                                                    }
                                                                                    if (context != null && typeof context === 'object') {
                                                                                        head = root.__head;
                                                                                        tail = root.__tail;
                                                                                        (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                        (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                        context === head && (root.__head = root.__next = head = next);
                                                                                        context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                        context.__next = context.__prev = undefined;
                                                                                        head = tail = next = prev = undefined;
                                                                                    }
                                                                                    context = contextParent;
                                                                                    contextParent = contextLeaves && contextLeaves.parent;
                                                                                    contextLeafStack[contextLeafDepth--] = undefined;
                                                                                    contextType = context != null && context[$TYPE];
                                                                                    continue;
                                                                                }
                                                                                if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                                    contextLeafKeys = Object.keys(context);
                                                                                    contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                                    contextLeaves.parent = contextParent;
                                                                                    i = -1;
                                                                                    n = contextLeafKeys.length;
                                                                                    while (++i < n) {
                                                                                        if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                            contextLeaves[i] = context[contextLeafKey];
                                                                                        }
                                                                                    }
                                                                                }
                                                                                contextParent = context;
                                                                                if (context = contextLeaves.pop()) {
                                                                                    contextLeafDepth++;
                                                                                    contextType = context != null && context[$TYPE];
                                                                                } else {
                                                                                    contextType = 'leaf';
                                                                                    context = contextParent;
                                                                                    contextParent = contextLeaves.parent;
                                                                                }
                                                                                continue;
                                                                            }
                                                                        key = keyTmp;
                                                                        context = contextTmp;
                                                                        contextParent = contextParentTmp;
                                                                        contextType = contextTypeTmp;
                                                                        contextTmp = contextTypeTmp = undefined;
                                                                        if (context != null && typeof context === 'object') {
                                                                            head = root.__head;
                                                                            tail = root.__tail;
                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                            context === head && (root.__head = root.__next = head = next);
                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                            context.__next = context.__prev = undefined;
                                                                            head = tail = next = prev = undefined;
                                                                        }
                                                                    }
                                                                    message[$SIZE] = messageSize - sizeOffset;
                                                                    contextParent[key] = context = message;
                                                                    break;
                                                                }
                                                                context = contexts[--column];
                                                                key = context[__KEY];
                                                                contextParent = contexts[column - 1] || contextCache;
                                                            } while (column > -1);
                                                            context[__SELF] = context;
                                                            context[__KEY] = key;
                                                            context[__PARENT] = contextParent;
                                                            context[__ROOT] = contextCache;
                                                            if (context[__GENERATION] === undefined) {
                                                                context[__GENERATION] = 0;
                                                            }
                                                            contextType = context != null && context[$TYPE];
                                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                                            key = branchKeyTmp;
                                                        } else if (context !== message && ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) && ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue)) && (messageTimestamp < contextTimestamp || messageExpires === 0 && ((context = message) || true)) === false) {
                                                            inserting:
                                                                while (true) {
                                                                    i = 0;
                                                                    if ((i = contextValue.length) === messageValue.length) {
                                                                        checking_refs:
                                                                            while (--i > -1) {
                                                                                if (contextValue[i] !== messageValue[i]) {
                                                                                    break checking_refs;
                                                                                }
                                                                            }
                                                                        if (i === -1) {
                                                                            break inserting;
                                                                        }
                                                                    }
                                                                    branchKeyTmp = key;
                                                                    messageSize = message != null && message[$SIZE] || 0;
                                                                    originalMessageSize = messageSize || 0;
                                                                    if ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) {
                                                                        messageType = 'array';
                                                                        originalMessageSize = messageValue.length || 1;
                                                                        messageSize = (messageType === 'sentinel' && 50 || 0) + originalMessageSize;
                                                                        messageValue[__CONTAINER] = message;
                                                                    } else if (messageType === 'sentinel') {
                                                                        messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                                    } else if (messageType === 'error') {
                                                                        if (typeof errorSelector === 'function') {
                                                                            message = Enumerable.errorSelector(message);
                                                                        }
                                                                        messageSize = 50 + originalMessageSize;
                                                                    } else if (messageValue == null || typeof messageValue !== 'object') {
                                                                        originalMessageSize = typeof messageValue === 'string' && messageValue.length || 1;
                                                                        messageSize = 50 + originalMessageSize;
                                                                        messageType = 'sentinel';
                                                                        message = {
                                                                            '$type': messageType,
                                                                            'value': messageValue
                                                                        };
                                                                    } else {
                                                                        messageSize = message[$SIZE] || 50 * 2;
                                                                        messageType = message[$TYPE] = messageType || 'leaf';
                                                                    }
                                                                    message[$SIZE] = sizeOffset = messageSize;
                                                                    do {
                                                                        if (key != null && key !== __NULL) {
                                                                            if (context != null && context !== message) {
                                                                                contextRefsLength = context.__refsLength || 0;
                                                                                messageRefsLength = message.__refsLength || 0;
                                                                                i = -1;
                                                                                while (++i < contextRefsLength) {
                                                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                                                        reference[__CONTEXT] = message;
                                                                                        message[__REF + (messageRefsLength + i)] = reference;
                                                                                        context[__REF + i] = undefined;
                                                                                    }
                                                                                }
                                                                                message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                                                context[__REFS_LENGTH] = reference = undefined;
                                                                                contextLeafStack = [];
                                                                                contextLeafDepth = 0;
                                                                                keyTmp = key;
                                                                                contextTmp = context;
                                                                                contextParentTmp = contextParent;
                                                                                contextTypeTmp = contextType;
                                                                                recursing:
                                                                                    while (contextLeafDepth > -1) {
                                                                                        if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                                                                            contextRefsLength = context.__refsLength || 0;
                                                                                            i = -1;
                                                                                            while (++i < contextRefsLength) {
                                                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                                                    reference.__context = undefined;
                                                                                                    context[__REF + i] = undefined;
                                                                                                }
                                                                                            }
                                                                                            context.__refsLength = undefined;
                                                                                            contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                                            if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                                i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                                n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                                while (++i <= n) {
                                                                                                    referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                                }
                                                                                                referenceContext[__REFS_LENGTH] = n;
                                                                                                contextValue[__REF_INDEX] = undefined;
                                                                                                contextValue[__CONTEXT] = undefined;
                                                                                                referenceContext = undefined;
                                                                                            }
                                                                                            if (context != null && typeof context === 'object') {
                                                                                                head = root.__head;
                                                                                                tail = root.__tail;
                                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                                context.__next = context.__prev = undefined;
                                                                                                head = tail = next = prev = undefined;
                                                                                            }
                                                                                            context = contextParent;
                                                                                            contextParent = contextLeaves && contextLeaves.parent;
                                                                                            contextLeafStack[contextLeafDepth--] = undefined;
                                                                                            contextType = context != null && context[$TYPE];
                                                                                            continue;
                                                                                        }
                                                                                        if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                                            contextLeafKeys = Object.keys(context);
                                                                                            contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                                            contextLeaves.parent = contextParent;
                                                                                            i = -1;
                                                                                            n = contextLeafKeys.length;
                                                                                            while (++i < n) {
                                                                                                if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                                    contextLeaves[i] = context[contextLeafKey];
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        contextParent = context;
                                                                                        if (context = contextLeaves.pop()) {
                                                                                            contextLeafDepth++;
                                                                                            contextType = context != null && context[$TYPE];
                                                                                        } else {
                                                                                            contextType = 'leaf';
                                                                                            context = contextParent;
                                                                                            contextParent = contextLeaves.parent;
                                                                                        }
                                                                                        continue;
                                                                                    }
                                                                                key = keyTmp;
                                                                                context = contextTmp;
                                                                                contextParent = contextParentTmp;
                                                                                contextType = contextTypeTmp;
                                                                                contextTmp = contextTypeTmp = undefined;
                                                                                if (context != null && typeof context === 'object') {
                                                                                    head = root.__head;
                                                                                    tail = root.__tail;
                                                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                    context === head && (root.__head = root.__next = head = next);
                                                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                    context.__next = context.__prev = undefined;
                                                                                    head = tail = next = prev = undefined;
                                                                                }
                                                                            }
                                                                            message[$SIZE] = messageSize - sizeOffset;
                                                                            contextParent[key] = context = message;
                                                                            break;
                                                                        }
                                                                        context = contexts[--column];
                                                                        key = context[__KEY];
                                                                        contextParent = contexts[column - 1] || contextCache;
                                                                    } while (column > -1);
                                                                    context[__SELF] = context;
                                                                    context[__KEY] = key;
                                                                    context[__PARENT] = contextParent;
                                                                    context[__ROOT] = contextCache;
                                                                    if (context[__GENERATION] === undefined) {
                                                                        context[__GENERATION] = 0;
                                                                    }
                                                                    contextTmp = context;
                                                                    contextParentTmp = contextParent;
                                                                    while (context !== undefined) {
                                                                        contextSize = context['$size'] = (context['$size'] || 0) + sizeOffset;
                                                                        contextTmp2 = context;
                                                                        if (context[__GENERATION_UPDATED] !== generation) {
                                                                            generationStack = [];
                                                                            generationDepth = 0;
                                                                            while (generationDepth > -1) {
                                                                                if ((generationReferences = generationStack[generationDepth]) === undefined) {
                                                                                    i = k = -1;
                                                                                    n = context[__REFS_LENGTH] || 0;
                                                                                    generationStack[generationDepth] = generationReferences = [];
                                                                                    context[__GENERATION_UPDATED] = generation;
                                                                                    context[__GENERATION] = (context[__GENERATION] || 0) + 1;
                                                                                    if ((reference = context[__PARENT]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                                        generationReferences[++k] = reference;
                                                                                    }
                                                                                    while (++i < n) {
                                                                                        if ((reference = context[__REF + i]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                                            generationReferences[++k] = reference;
                                                                                        }
                                                                                    }
                                                                                }
                                                                                if ((context = generationReferences.pop()) !== undefined) {
                                                                                    ++generationDepth;
                                                                                } else {
                                                                                    generationStack[generationDepth--] = undefined;
                                                                                }
                                                                            }
                                                                        }
                                                                        reference = generationStack = generationReferences = undefined;
                                                                        context = contextTmp2;
                                                                        if ((contextParent = context[__PARENT]) !== undefined && contextSize <= 0) {
                                                                            contextRefsLength = context.__refsLength || 0;
                                                                            i = -1;
                                                                            while (++i < contextRefsLength) {
                                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                                    reference.__context = undefined;
                                                                                    context[__REF + i] = undefined;
                                                                                }
                                                                            }
                                                                            context.__refsLength = undefined;
                                                                            contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                            if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                while (++i <= n) {
                                                                                    referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                }
                                                                                referenceContext[__REFS_LENGTH] = n;
                                                                                contextValue[__REF_INDEX] = undefined;
                                                                                contextValue[__CONTEXT] = undefined;
                                                                                referenceContext = undefined;
                                                                            }
                                                                            if (context != null && typeof context === 'object') {
                                                                                head = root.__head;
                                                                                tail = root.__tail;
                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                context.__next = context.__prev = undefined;
                                                                                head = tail = next = prev = undefined;
                                                                            }
                                                                        }
                                                                        context = contextParent;
                                                                    }
                                                                    context = contextTmp;
                                                                    contextParent = contextParentTmp;
                                                                    contextTmp = contextTmp2 = contextParentTmp = undefined;
                                                                    contextType = context != null && context[$TYPE];
                                                                    contextValue = contextType === 'sentinel' ? context.value : context;
                                                                    key = branchKeyTmp;
                                                                    break;
                                                                }
                                                        } else {
                                                            context[__SELF] = context;
                                                            context[__KEY] = key;
                                                            context[__PARENT] = contextParent;
                                                            context[__ROOT] = contextCache;
                                                            if (context[__GENERATION] === undefined) {
                                                                context[__GENERATION] = 0;
                                                            }
                                                        }
                                                    } else {
                                                        context[__SELF] = context;
                                                        context[__KEY] = key;
                                                        context[__PARENT] = contextParent;
                                                        context[__ROOT] = contextCache;
                                                        if (context[__GENERATION] === undefined) {
                                                            context[__GENERATION] = 0;
                                                        }
                                                    }
                                                    contextParent = context;
                                                    messageParent = message;
                                                    if (context != null && ((jsonKey = key) != null && jsonKey !== __NULL)) {
                                                        if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                            if (contextType === 'error') {
                                                                if (boxed === true) {
                                                                    err = context;
                                                                } else {
                                                                    dest = {};
                                                                    src = context;
                                                                    keys = Object.keys(src);
                                                                    i = -1;
                                                                    n = keys.length;
                                                                    while (++i < n) {
                                                                        x = keys[i];
                                                                        !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                                    }
                                                                    err = dest;
                                                                }
                                                                val = !!includeErrors && err || undefined;
                                                            } else {
                                                                if (boxed === true) {
                                                                    val = context;
                                                                } else if (contextValue != null && typeof contextValue === 'object') {
                                                                    if (Array.isArray(contextValue)) {
                                                                        src = contextValue;
                                                                        dest = new Array(n = src.length);
                                                                        i = -1;
                                                                        while (++i < n) {
                                                                            dest[i] = src[i];
                                                                        }
                                                                        val = dest;
                                                                    } else {
                                                                        dest = {};
                                                                        src = contextValue;
                                                                        keys = Object.keys(src);
                                                                        i = -1;
                                                                        n = keys.length;
                                                                        while (++i < n) {
                                                                            x = keys[i];
                                                                            !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                                        }
                                                                        val = dest;
                                                                    }
                                                                } else {
                                                                    val = contextValue;
                                                                }
                                                            }
                                                            if (jsonKey != null && jsonKey !== __NULL) {
                                                                json[jsonKey] = val;
                                                            } else {
                                                                json = jsons[jsonDepth] = val;
                                                            }
                                                        } else {
                                                            if (jsonKey != null && jsonKey !== __NULL) {
                                                                json = json[jsonKey] || (json[jsonKey] = {});
                                                            }
                                                        }
                                                    }
                                                }
                                                if (context != null) {
                                                    if ((refContainer = path[__CONTAINER] || path).__context === undefined) {
                                                        backRefs = context.__refsLength || 0;
                                                        context['__ref' + backRefs] = refContainer;
                                                        context.__refsLength = backRefs + 1;
                                                        refContainer.__refIndex = backRefs;
                                                        refContainer.__context = context;
                                                        refContainer = backRefs = undefined;
                                                    }
                                                }
                                            }
                                            expandsCount = Number(contextType === 'error') - 1;
                                            column = outermostColumn;
                                            path = outermostPath;
                                            offset = length - column;
                                            length = outermostLength;
                                            key = branchKeyTmp;
                                            outermostColumn = undefined;
                                            outermostPath = undefined;
                                            outermostLength = undefined;
                                            branchKeyTmp = undefined;
                                        }
                                    } while ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue));
                                } else if (!!contextType) {
                                    break resolvePath;
                                }
                                key = branchKeyTmp;
                                contexts[column] = contextParent = context;
                                messages[column] = messageParent = message;
                                if (isKeySet === true && ((jsonKey = key) != null && jsonKey !== __NULL)) {
                                    do {
                                        jsonKey = jsonKeys[jsonDepth];
                                    } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                                    if (jsonKey != null && jsonKey !== __NULL) {
                                        json = jsons[jsonDepth - 1] || jsonCache;
                                    } else {
                                        json = jsonCache;
                                    }
                                    if (jsonKey != null && jsonKey !== __NULL) {
                                        json = json[jsonKey] || (json[jsonKey] = {});
                                    }
                                }
                                jsons[jsonDepth] = json;
                                jsonDepth += 1;
                            }
                        }
                        if (column === length) {
                            key = path[column];
                            isKeySet = false;
                            if (key != null && typeof key === 'object') {
                                isKeySet = true;
                                if (Array.isArray(key)) {
                                    key = key[key.index || (key.index = 0)];
                                    if (key != null && typeof key === 'object') {
                                        key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                    }
                                } else {
                                    key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            }
                            requestedPath[requestedPath.length = column] = key;
                            if (key != null && key !== __NULL) {
                                jsonDepth = column;
                                isKeySet = true;
                                !!jsonCache && isKeySet === true && (jsonKeys[jsonDepth] = key);
                                optimizedPath[optimizedPath.length = column + offset] = key;
                                context = contextParent[key];
                                if (context != null) {
                                    if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                        contextInvalidated = context != null && context[__INVALIDATED];
                                        if (contextInvalidated === true === false) {
                                            context.__invalidated = true;
                                            context[$EXPIRES] = 0;
                                            expired[++expiredLength] = context;
                                            if (context != null && typeof context === 'object') {
                                                head = root.__head;
                                                tail = root.__tail;
                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                context === head && (root.__head = root.__next = head = next);
                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                context.__next = context.__prev = undefined;
                                                head = tail = next = prev = undefined;
                                            }
                                        }
                                        context = undefined;
                                    }
                                }
                                contextType = context != null && context[$TYPE];
                                contextValue = contextType === 'sentinel' ? context.value : context;
                                contextTimestamp = context != null && context[$TIMESTAMP];
                                message = messageParent && messageParent[key];
                                if (!(context != null) && !(message != null)) {
                                    break resolvePath;
                                }
                                messageType = message != null && message[$TYPE];
                                messageValue = messageType === 'sentinel' ? message.value : message;
                                messageTimestamp = message != null && message[$TIMESTAMP];
                                messageExpires = (message != null || null) && message[$EXPIRES];
                                if ((messageTimestamp < contextTimestamp || messageExpires === 0 && ((context = message) || true)) === false === true) {
                                    messageSize = message != null && message[$SIZE] || 0;
                                    originalMessageSize = messageSize || 0;
                                    if ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) {
                                        messageType = 'array';
                                        originalMessageSize = messageValue.length || 1;
                                        messageSize = (messageType === 'sentinel' && 50 || 0) + originalMessageSize;
                                        messageValue[__CONTAINER] = message;
                                    } else if (messageType === 'sentinel') {
                                        messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                    } else if (messageType === 'error') {
                                        if (typeof errorSelector === 'function') {
                                            message = Enumerable.errorSelector(message);
                                        }
                                        messageSize = 50 + originalMessageSize;
                                    } else if (messageValue == null || typeof messageValue !== 'object') {
                                        originalMessageSize = typeof messageValue === 'string' && messageValue.length || 1;
                                        messageSize = 50 + originalMessageSize;
                                        messageType = 'sentinel';
                                        message = {
                                            '$type': messageType,
                                            'value': messageValue
                                        };
                                    } else {
                                        messageSize = message[$SIZE] || 50 * 2;
                                        messageType = message[$TYPE] = messageType || 'leaf';
                                    }
                                    message[$SIZE] = sizeOffset = messageSize;
                                    if (!!((messageExpires = (message != null || null) && message[$EXPIRES]) != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < now())) === false) {
                                        messageSize = message != null && message[$SIZE] || 0;
                                        do {
                                            if (key != null && key !== __NULL) {
                                                if (context != null && context !== message) {
                                                    contextRefsLength = context.__refsLength || 0;
                                                    messageRefsLength = message.__refsLength || 0;
                                                    i = -1;
                                                    while (++i < contextRefsLength) {
                                                        if ((reference = context[__REF + i]) !== undefined) {
                                                            reference[__CONTEXT] = message;
                                                            message[__REF + (messageRefsLength + i)] = reference;
                                                            context[__REF + i] = undefined;
                                                        }
                                                    }
                                                    message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                    context[__REFS_LENGTH] = reference = undefined;
                                                    contextLeafStack = [];
                                                    contextLeafDepth = 0;
                                                    keyTmp = key;
                                                    contextTmp = context;
                                                    contextParentTmp = contextParent;
                                                    contextTypeTmp = contextType;
                                                    recursing:
                                                        while (contextLeafDepth > -1) {
                                                            if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                                contextRefsLength = context.__refsLength || 0;
                                                                i = -1;
                                                                while (++i < contextRefsLength) {
                                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                                        reference.__context = undefined;
                                                                        context[__REF + i] = undefined;
                                                                    }
                                                                }
                                                                context.__refsLength = undefined;
                                                                contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                    i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                    n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                    while (++i <= n) {
                                                                        referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                    }
                                                                    referenceContext[__REFS_LENGTH] = n;
                                                                    contextValue[__REF_INDEX] = undefined;
                                                                    contextValue[__CONTEXT] = undefined;
                                                                    referenceContext = undefined;
                                                                }
                                                                if (context != null && typeof context === 'object') {
                                                                    head = root.__head;
                                                                    tail = root.__tail;
                                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                    context === head && (root.__head = root.__next = head = next);
                                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                                    context.__next = context.__prev = undefined;
                                                                    head = tail = next = prev = undefined;
                                                                }
                                                                context = contextParent;
                                                                contextParent = contextLeaves && contextLeaves.parent;
                                                                contextLeafStack[contextLeafDepth--] = undefined;
                                                                contextType = context != null && context[$TYPE];
                                                                continue;
                                                            }
                                                            if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                contextLeafKeys = Object.keys(context);
                                                                contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                contextLeaves.parent = contextParent;
                                                                i = -1;
                                                                n = contextLeafKeys.length;
                                                                while (++i < n) {
                                                                    if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                        contextLeaves[i] = context[contextLeafKey];
                                                                    }
                                                                }
                                                            }
                                                            contextParent = context;
                                                            if (context = contextLeaves.pop()) {
                                                                contextLeafDepth++;
                                                                contextType = context != null && context[$TYPE];
                                                            } else {
                                                                contextType = 'leaf';
                                                                context = contextParent;
                                                                contextParent = contextLeaves.parent;
                                                            }
                                                            continue;
                                                        }
                                                    key = keyTmp;
                                                    context = contextTmp;
                                                    contextParent = contextParentTmp;
                                                    contextType = contextTypeTmp;
                                                    contextTmp = contextTypeTmp = undefined;
                                                    if (context != null && typeof context === 'object') {
                                                        head = root.__head;
                                                        tail = root.__tail;
                                                        (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                        (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                        context === head && (root.__head = root.__next = head = next);
                                                        context === tail && (root.__tail = root.__prev = tail = prev);
                                                        context.__next = context.__prev = undefined;
                                                        head = tail = next = prev = undefined;
                                                    }
                                                }
                                                message[$SIZE] = messageSize - sizeOffset;
                                                contextParent[key] = context = message;
                                                break;
                                            }
                                            context = contexts[--column];
                                            key = context[__KEY];
                                            contextParent = contexts[column - 1] || contextCache;
                                        } while (column > -1);
                                        context[__SELF] = context;
                                        context[__KEY] = key;
                                        context[__PARENT] = contextParent;
                                        context[__ROOT] = contextCache;
                                        if (context[__GENERATION] === undefined) {
                                            context[__GENERATION] = 0;
                                        }
                                        contextTmp = context;
                                        contextParentTmp = contextParent;
                                        while (context !== undefined) {
                                            contextSize = context['$size'] = (context['$size'] || 0) + sizeOffset;
                                            contextTmp2 = context;
                                            if (context[__GENERATION_UPDATED] !== generation) {
                                                generationStack = [];
                                                generationDepth = 0;
                                                while (generationDepth > -1) {
                                                    if ((generationReferences = generationStack[generationDepth]) === undefined) {
                                                        i = k = -1;
                                                        n = context[__REFS_LENGTH] || 0;
                                                        generationStack[generationDepth] = generationReferences = [];
                                                        context[__GENERATION_UPDATED] = generation;
                                                        context[__GENERATION] = (context[__GENERATION] || 0) + 1;
                                                        if ((reference = context[__PARENT]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                            generationReferences[++k] = reference;
                                                        }
                                                        while (++i < n) {
                                                            if ((reference = context[__REF + i]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                generationReferences[++k] = reference;
                                                            }
                                                        }
                                                    }
                                                    if ((context = generationReferences.pop()) !== undefined) {
                                                        ++generationDepth;
                                                    } else {
                                                        generationStack[generationDepth--] = undefined;
                                                    }
                                                }
                                            }
                                            reference = generationStack = generationReferences = undefined;
                                            context = contextTmp2;
                                            if ((contextParent = context[__PARENT]) !== undefined && contextSize <= 0) {
                                                contextRefsLength = context.__refsLength || 0;
                                                i = -1;
                                                while (++i < contextRefsLength) {
                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                        reference.__context = undefined;
                                                        context[__REF + i] = undefined;
                                                    }
                                                }
                                                context.__refsLength = undefined;
                                                contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                    i = (contextValue[__REF_INDEX] || 0) - 1;
                                                    n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                    while (++i <= n) {
                                                        referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                    }
                                                    referenceContext[__REFS_LENGTH] = n;
                                                    contextValue[__REF_INDEX] = undefined;
                                                    contextValue[__CONTEXT] = undefined;
                                                    referenceContext = undefined;
                                                }
                                                if (context != null && typeof context === 'object') {
                                                    head = root.__head;
                                                    tail = root.__tail;
                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                    context === head && (root.__head = root.__next = head = next);
                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                    context.__next = context.__prev = undefined;
                                                    head = tail = next = prev = undefined;
                                                }
                                            }
                                            context = contextParent;
                                        }
                                        context = contextTmp;
                                        contextParent = contextParentTmp;
                                        contextTmp = contextTmp2 = contextParentTmp = undefined;
                                        contextType = context != null && context[$TYPE];
                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                    }
                                }
                            }
                        }
                        break resolvePath;
                    } while (true);
                if (context != null) {
                    if (context != null && typeof context === 'object' && contextExpires !== 1) {
                        head = root.__head;
                        tail = root.__tail;
                        next = context.__next, prev = context.__prev;
                        if (context !== head) {
                            next && (next != null && typeof next === 'object') && (next.__prev = prev);
                            prev && (prev != null && typeof prev === 'object') && (prev.__next = next);
                            (next = head) && (head != null && typeof head === 'object') && (head.__prev = context);
                            root.__head = root.__next = head = context;
                            head.__next = next;
                            head.__prev = undefined;
                        }
                        if (tail == null || context === tail) {
                            root.__tail = root.__prev = tail = prev || context;
                        }
                        head = tail = next = prev = undefined;
                    }
                    if (contextType === 'error') {
                        if (expandsCount > -1) {
                            requestedPath[requestedPath.length] = null;
                        }
                        contextValue = context;
                    }
                }
                if (context == null || refreshing === true) {
                    src = optimizedPath;
                    dest = new Array(n = src.length);
                    i = -1;
                    while (++i < n) {
                        dest[i] = src[i];
                    }
                    opt = dest;
                    src = optimizedBoundPath;
                    dest = new Array(n = src.length);
                    i = -1;
                    while (++i < n) {
                        dest[i] = src[i];
                    }
                    req = dest;
                    reqLen = n;
                    i = -1;
                    n = requestedPath.length;
                    while (++i < n) {
                        key = path[i];
                        key2 = requestedPath[i];
                        req[reqLen + i] = key && typeof key === 'object' && [key2] || key2;
                    }
                    if (column < length) {
                        j = column + 1;
                        k = length + 1;
                        reqLen = req.length;
                        optLen = opt.length;
                        i = -1;
                        n = k - j;
                        while (++i < n) {
                            req[reqLen + i] = opt[optLen + i] = path[j + i];
                        }
                    }
                    req.pathSetIndex = index;
                    requestedMissingPaths[requestedMissingPaths.length] = req;
                    optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                } else if (contextValue !== undefined || boxed === true) {
                    src = optimizedPath;
                    dest = new Array(n = src.length);
                    i = -1;
                    while (++i < n) {
                        dest[i] = src[i];
                    }
                    opt = dest;
                    src = requestedPath;
                    dest = new Array(n = src.length);
                    i = -1;
                    while (++i < n) {
                        dest[i] = src[i];
                    }
                    req = dest;
                    requestedPaths[requestedPaths.length] = req;
                    optimizedPaths[optimizedPaths.length] = opt;
                    hasValues = true;
                    if (err) {
                        errors[errors.length] = {
                            path: req,
                            value: err
                        };
                        err = undefined;
                    } else if ((jsonKey = key) != null && jsonKey !== __NULL) {
                        if (contextType === 'error') {
                            if (err === undefined) {
                                if (boxed === true) {
                                    err = context;
                                } else {
                                    dest = {};
                                    src = context;
                                    keys = Object.keys(src);
                                    i = -1;
                                    n = keys.length;
                                    while (++i < n) {
                                        x = keys[i];
                                        !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                    }
                                    err = dest;
                                }
                                val = !!includeErrors && err || undefined;
                            }
                            errors[errors.length] = {
                                path: req,
                                value: err
                            };
                            err = undefined;
                        } else {
                            if (boxed === true) {
                                val = context;
                            } else if (contextValue != null && typeof contextValue === 'object') {
                                if (Array.isArray(contextValue)) {
                                    src = contextValue;
                                    dest = new Array(n = src.length);
                                    i = -1;
                                    while (++i < n) {
                                        dest[i] = src[i];
                                    }
                                    val = dest;
                                } else {
                                    dest = {};
                                    src = contextValue;
                                    keys = Object.keys(src);
                                    i = -1;
                                    n = keys.length;
                                    while (++i < n) {
                                        x = keys[i];
                                        !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                    }
                                    val = dest;
                                }
                            } else {
                                val = contextValue;
                            }
                        }
                        do {
                            jsonKey = jsonKeys[jsonDepth];
                        } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                        if (jsonKey != null && jsonKey !== __NULL) {
                            json = jsons[jsonDepth - 1] || jsonCache;
                        } else {
                            json = jsonCache;
                        }
                        if (jsonKey != null && jsonKey !== __NULL) {
                            json[jsonKey] = val;
                        } else {
                            json = jsons[jsonDepth] = val;
                        }
                    }
                }
                for (; column > -1; --column) {
                    key = path[column];
                    if (key == null || typeof key !== 'object') {
                        continue;
                    }
                    isKeySet = true;
                    if (Array.isArray(key)) {
                        jsonDepth -= Number(jsonDepth > 0);
                        if (++key.index === key.length) {
                            key = key[key.index = 0];
                            if (key == null || typeof key !== 'object') {
                                continue;
                            }
                        } else {
                            break;
                        }
                    }
                    if (++key[__OFFSET] > (key.to || (key.to = key.from + (key.length || 1) - 1))) {
                        key[__OFFSET] = key.from;
                        continue;
                    }
                    jsonDepth -= Number(jsonDepth > 0);
                    break;
                }
            }
            path.column = column;
        }
    }
    json = jsons[-1];
    if (!!values) {
        values[0] = hasValues && {
            'paths': requestedPaths,
            'jsong': json
        } || undefined;
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setJSONGAsPathMap() {
    var returnBlocker;
    var generation, model, state, values, errorSelector, onNext, errors, boxed, includeErrors, refreshing, connected, root, contextCache, context, expired, expiredLength, boundPath, optimizedBoundPath, column, offset, jsonDepth, boundPathValue, contexts, requested, optimized, requestedPaths, optimizedPaths, requestedMissingPaths, optimizedMissingPaths, requestedPath, optimizedPath, jsongEnvelopes, messages, jsons, jsonKeys, contextParent, index, count, paths, messageCache, messageParent, message, pathIndex, pathCount, hasValues, jsonCache, json, refsByCols, path, pathSet, length, resetOptimizedDepth, reference, i, j, n, isKeySet, key, contextExpires, contextInvalidated, head, tail, next, prev, contextType, contextValue, contextTimestamp, messageType, messageValue, messageTimestamp, messageExpires, sizeOffset, branchKeyTmp, messageSize, contextRefsLength, messageRefsLength, contextLeafStack, contextLeafDepth, keyTmp, contextTmp, contextParentTmp, contextTypeTmp, referenceContext, contextLeaves, contextLeafKeys, contextLeafKey, originalMessageSize, contextSize, contextTmp2, generationStack, generationDepth, generationReferences, k, expandsCount, outermostColumn, outermostLength, outermostPath, refLen, refContainer, backRefs, jsonKey, src, dest, opt, req, reqLen, key2, optLen, err, keys, x, val;
    generation = __GENERATION_GENERATION++;
    model = arguments[0];
    state = arguments[1];
    values = arguments[2];
    errorSelector = arguments[3];
    if (typeof values === 'function') {
        onNext = values;
        values = undefined;
    }
    errors = state.errors || (state.errors = []);
    boxed = model._boxed;
    includeErrors = model._includeErrors;
    refreshing = model._refreshing;
    connected = model._connected;
    root = model._root;
    contextCache = context = model._cache;
    expired = root.expired;
    expiredLength = expired.length;
    boundPath = state.boundPath || model._path;
    optimizedBoundPath = [];
    column = state.column || (state.column = 0) - 1;
    offset = state.offset || (state.offset = 0);
    jsonDepth = state.jsonDepth || (state.jsonDepth = 0);
    boundPathValue = state.boundPathValue;
    contexts = state.contexts || (state.contexts = []);
    requested = state.requested || (state.requested = {});
    optimized = state.optimized || (state.optimized = {});
    requestedPaths = state.requestedPaths || (state.requestedPaths = []);
    optimizedPaths = state.optimizedPaths || (state.optimizedPaths = []);
    requestedMissingPaths = state.requestedMissingPaths || (state.requestedMissingPaths = []);
    optimizedMissingPaths = state.optimizedMissingPaths || (state.optimizedMissingPaths = []);
    requestedPath = state.requestedPath || (state.requestedPath = []);
    optimizedPath = state.optimizedPath || (state.optimizedPath = []);
    jsongEnvelopes = state;
    messages = state.messages || (state.messages = []);
    jsons = state.jsons || (state.jsons = []);
    jsonKeys = state.jsonKeys || (state.jsonKeys = []);
    contexts[column] = contextParent = context;
    index = 0;
    count = jsongEnvelopes.length;
    for (; index < count; ++index) {
        jsongEnvelope = jsongEnvelopes[index];
        paths = jsongEnvelope.paths;
        messages[-1] = messageCache = messageParent = message = jsongEnvelope.jsong;
        pathIndex = paths.index || (paths.index = 0);
        pathCount = paths.length;
        for (; pathIndex < pathCount; ++pathIndex) {
            pathSet = paths[pathIndex];
            hasValues = hasValues || false;
            jsonDepth = jsonKeys.length = 0;
            jsonCache = json = jsons[-1] = !!values && values[0] || undefined;
            offset = 0;
            refsByCols = state.refsByCols = [];
            refsByCols[-1] = optimizedBoundPath;
            path = pathSet;
            length = path.length - 1;
            column = path.column || (path.column = 0);
            while (column > -1) {
                resetOptimizedDepth = column;
                while (--resetOptimizedDepth >= -1) {
                    if (!!(reference = refsByCols[resetOptimizedDepth])) {
                        i = j = -1;
                        n = reference.length;
                        offset = n - ++resetOptimizedDepth;
                        while (++i < n) {
                            optimizedPath[++j] = reference[i];
                        }
                        while (resetOptimizedDepth < column) {
                            optimizedPath[++j] = requestedPath[resetOptimizedDepth++];
                        }
                        optimizedPath.length = offset + resetOptimizedDepth;
                        break;
                    }
                }
                messageParent = messages[column - 1];
                contextParent = contexts[column - 1];
                resolvePath:
                    do {
                        for (; column < length; ++column) {
                            key = path[column];
                            isKeySet = false;
                            if (key != null && typeof key === 'object') {
                                isKeySet = true;
                                if (Array.isArray(key)) {
                                    key = key[key.index || (key.index = 0)];
                                    if (key != null && typeof key === 'object') {
                                        key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                    }
                                } else {
                                    key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            }
                            requestedPath[requestedPath.length = column] = key;
                            if (key != null && key !== __NULL) {
                                jsonDepth = column;
                                isKeySet = true;
                                !!jsonCache && isKeySet === true && (jsonKeys[jsonDepth] = key);
                                optimizedPath[optimizedPath.length = column + offset] = key;
                                context = contextParent[key];
                                if (context != null) {
                                    if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                        contextInvalidated = context != null && context[__INVALIDATED];
                                        if (contextInvalidated === true === false) {
                                            context.__invalidated = true;
                                            context[$EXPIRES] = 0;
                                            expired[++expiredLength] = context;
                                            if (context != null && typeof context === 'object') {
                                                head = root.__head;
                                                tail = root.__tail;
                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                context === head && (root.__head = root.__next = head = next);
                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                context.__next = context.__prev = undefined;
                                                head = tail = next = prev = undefined;
                                            }
                                        }
                                        context = undefined;
                                    }
                                }
                                contextType = context != null && context[$TYPE];
                                contextValue = contextType === 'sentinel' ? context.value : context;
                                contextTimestamp = context != null && context[$TIMESTAMP];
                                message = messageParent && messageParent[key];
                                if (!(context != null) && !(message != null)) {
                                    break resolvePath;
                                }
                                messageType = message != null && message[$TYPE];
                                messageValue = messageType === 'sentinel' ? message.value : message;
                                messageTimestamp = message != null && message[$TIMESTAMP];
                                messageExpires = (message != null || null) && message[$EXPIRES];
                                if (!!((messageExpires = (message != null || null) && message[$EXPIRES]) != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < now())) === false) {
                                    if (context != null === false) {
                                        sizeOffset = 0;
                                        branchKeyTmp = key;
                                        messageSize = message != null && message[$SIZE] || 0;
                                        do {
                                            if (key != null && key !== __NULL) {
                                                if (context != null && context !== message) {
                                                    contextRefsLength = context.__refsLength || 0;
                                                    messageRefsLength = message.__refsLength || 0;
                                                    i = -1;
                                                    while (++i < contextRefsLength) {
                                                        if ((reference = context[__REF + i]) !== undefined) {
                                                            reference[__CONTEXT] = message;
                                                            message[__REF + (messageRefsLength + i)] = reference;
                                                            context[__REF + i] = undefined;
                                                        }
                                                    }
                                                    message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                    context[__REFS_LENGTH] = reference = undefined;
                                                    contextLeafStack = [];
                                                    contextLeafDepth = 0;
                                                    keyTmp = key;
                                                    contextTmp = context;
                                                    contextParentTmp = contextParent;
                                                    contextTypeTmp = contextType;
                                                    recursing:
                                                        while (contextLeafDepth > -1) {
                                                            if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                                contextRefsLength = context.__refsLength || 0;
                                                                i = -1;
                                                                while (++i < contextRefsLength) {
                                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                                        reference.__context = undefined;
                                                                        context[__REF + i] = undefined;
                                                                    }
                                                                }
                                                                context.__refsLength = undefined;
                                                                contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                    i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                    n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                    while (++i <= n) {
                                                                        referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                    }
                                                                    referenceContext[__REFS_LENGTH] = n;
                                                                    contextValue[__REF_INDEX] = undefined;
                                                                    contextValue[__CONTEXT] = undefined;
                                                                    referenceContext = undefined;
                                                                }
                                                                if (context != null && typeof context === 'object') {
                                                                    head = root.__head;
                                                                    tail = root.__tail;
                                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                    context === head && (root.__head = root.__next = head = next);
                                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                                    context.__next = context.__prev = undefined;
                                                                    head = tail = next = prev = undefined;
                                                                }
                                                                context = contextParent;
                                                                contextParent = contextLeaves && contextLeaves.parent;
                                                                contextLeafStack[contextLeafDepth--] = undefined;
                                                                contextType = context != null && context[$TYPE];
                                                                continue;
                                                            }
                                                            if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                contextLeafKeys = Object.keys(context);
                                                                contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                contextLeaves.parent = contextParent;
                                                                i = -1;
                                                                n = contextLeafKeys.length;
                                                                while (++i < n) {
                                                                    if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                        contextLeaves[i] = context[contextLeafKey];
                                                                    }
                                                                }
                                                            }
                                                            contextParent = context;
                                                            if (context = contextLeaves.pop()) {
                                                                contextLeafDepth++;
                                                                contextType = context != null && context[$TYPE];
                                                            } else {
                                                                contextType = 'leaf';
                                                                context = contextParent;
                                                                contextParent = contextLeaves.parent;
                                                            }
                                                            continue;
                                                        }
                                                    key = keyTmp;
                                                    context = contextTmp;
                                                    contextParent = contextParentTmp;
                                                    contextType = contextTypeTmp;
                                                    contextTmp = contextTypeTmp = undefined;
                                                    if (context != null && typeof context === 'object') {
                                                        head = root.__head;
                                                        tail = root.__tail;
                                                        (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                        (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                        context === head && (root.__head = root.__next = head = next);
                                                        context === tail && (root.__tail = root.__prev = tail = prev);
                                                        context.__next = context.__prev = undefined;
                                                        head = tail = next = prev = undefined;
                                                    }
                                                }
                                                message[$SIZE] = messageSize - sizeOffset;
                                                contextParent[key] = context = message;
                                                break;
                                            }
                                            context = contexts[--column];
                                            key = context[__KEY];
                                            contextParent = contexts[column - 1] || contextCache;
                                        } while (column > -1);
                                        context[__SELF] = context;
                                        context[__KEY] = key;
                                        context[__PARENT] = contextParent;
                                        context[__ROOT] = contextCache;
                                        if (context[__GENERATION] === undefined) {
                                            context[__GENERATION] = 0;
                                        }
                                        contextType = context != null && context[$TYPE];
                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                        key = branchKeyTmp;
                                    } else if (context !== message && ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) && ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue)) && (messageTimestamp < contextTimestamp || messageExpires === 0 && ((context = message) || true)) === false) {
                                        inserting:
                                            while (true) {
                                                i = 0;
                                                if ((i = contextValue.length) === messageValue.length) {
                                                    checking_refs:
                                                        while (--i > -1) {
                                                            if (contextValue[i] !== messageValue[i]) {
                                                                break checking_refs;
                                                            }
                                                        }
                                                    if (i === -1) {
                                                        break inserting;
                                                    }
                                                }
                                                branchKeyTmp = key;
                                                messageSize = message != null && message[$SIZE] || 0;
                                                originalMessageSize = messageSize || 0;
                                                if ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) {
                                                    messageType = 'array';
                                                    originalMessageSize = messageValue.length || 1;
                                                    messageSize = (messageType === 'sentinel' && 50 || 0) + originalMessageSize;
                                                    messageValue[__CONTAINER] = message;
                                                } else if (messageType === 'sentinel') {
                                                    messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                } else if (messageType === 'error') {
                                                    if (typeof errorSelector === 'function') {
                                                        message = Enumerable.errorSelector(message);
                                                    }
                                                    messageSize = 50 + originalMessageSize;
                                                } else if (messageValue == null || typeof messageValue !== 'object') {
                                                    originalMessageSize = typeof messageValue === 'string' && messageValue.length || 1;
                                                    messageSize = 50 + originalMessageSize;
                                                    messageType = 'sentinel';
                                                    message = {
                                                        '$type': messageType,
                                                        'value': messageValue
                                                    };
                                                } else {
                                                    messageSize = message[$SIZE] || 50 * 2;
                                                    messageType = message[$TYPE] = messageType || 'leaf';
                                                }
                                                message[$SIZE] = sizeOffset = messageSize;
                                                do {
                                                    if (key != null && key !== __NULL) {
                                                        if (context != null && context !== message) {
                                                            contextRefsLength = context.__refsLength || 0;
                                                            messageRefsLength = message.__refsLength || 0;
                                                            i = -1;
                                                            while (++i < contextRefsLength) {
                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                    reference[__CONTEXT] = message;
                                                                    message[__REF + (messageRefsLength + i)] = reference;
                                                                    context[__REF + i] = undefined;
                                                                }
                                                            }
                                                            message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                            context[__REFS_LENGTH] = reference = undefined;
                                                            contextLeafStack = [];
                                                            contextLeafDepth = 0;
                                                            keyTmp = key;
                                                            contextTmp = context;
                                                            contextParentTmp = contextParent;
                                                            contextTypeTmp = contextType;
                                                            recursing:
                                                                while (contextLeafDepth > -1) {
                                                                    if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                                                        contextRefsLength = context.__refsLength || 0;
                                                                        i = -1;
                                                                        while (++i < contextRefsLength) {
                                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                                reference.__context = undefined;
                                                                                context[__REF + i] = undefined;
                                                                            }
                                                                        }
                                                                        context.__refsLength = undefined;
                                                                        contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                        if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                            i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                            n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                            while (++i <= n) {
                                                                                referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                            }
                                                                            referenceContext[__REFS_LENGTH] = n;
                                                                            contextValue[__REF_INDEX] = undefined;
                                                                            contextValue[__CONTEXT] = undefined;
                                                                            referenceContext = undefined;
                                                                        }
                                                                        if (context != null && typeof context === 'object') {
                                                                            head = root.__head;
                                                                            tail = root.__tail;
                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                            context === head && (root.__head = root.__next = head = next);
                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                            context.__next = context.__prev = undefined;
                                                                            head = tail = next = prev = undefined;
                                                                        }
                                                                        context = contextParent;
                                                                        contextParent = contextLeaves && contextLeaves.parent;
                                                                        contextLeafStack[contextLeafDepth--] = undefined;
                                                                        contextType = context != null && context[$TYPE];
                                                                        continue;
                                                                    }
                                                                    if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                        contextLeafKeys = Object.keys(context);
                                                                        contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                        contextLeaves.parent = contextParent;
                                                                        i = -1;
                                                                        n = contextLeafKeys.length;
                                                                        while (++i < n) {
                                                                            if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                contextLeaves[i] = context[contextLeafKey];
                                                                            }
                                                                        }
                                                                    }
                                                                    contextParent = context;
                                                                    if (context = contextLeaves.pop()) {
                                                                        contextLeafDepth++;
                                                                        contextType = context != null && context[$TYPE];
                                                                    } else {
                                                                        contextType = 'leaf';
                                                                        context = contextParent;
                                                                        contextParent = contextLeaves.parent;
                                                                    }
                                                                    continue;
                                                                }
                                                            key = keyTmp;
                                                            context = contextTmp;
                                                            contextParent = contextParentTmp;
                                                            contextType = contextTypeTmp;
                                                            contextTmp = contextTypeTmp = undefined;
                                                            if (context != null && typeof context === 'object') {
                                                                head = root.__head;
                                                                tail = root.__tail;
                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                context === head && (root.__head = root.__next = head = next);
                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                context.__next = context.__prev = undefined;
                                                                head = tail = next = prev = undefined;
                                                            }
                                                        }
                                                        message[$SIZE] = messageSize - sizeOffset;
                                                        contextParent[key] = context = message;
                                                        break;
                                                    }
                                                    context = contexts[--column];
                                                    key = context[__KEY];
                                                    contextParent = contexts[column - 1] || contextCache;
                                                } while (column > -1);
                                                context[__SELF] = context;
                                                context[__KEY] = key;
                                                context[__PARENT] = contextParent;
                                                context[__ROOT] = contextCache;
                                                if (context[__GENERATION] === undefined) {
                                                    context[__GENERATION] = 0;
                                                }
                                                contextTmp = context;
                                                contextParentTmp = contextParent;
                                                while (context !== undefined) {
                                                    contextSize = context['$size'] = (context['$size'] || 0) + sizeOffset;
                                                    contextTmp2 = context;
                                                    if (context[__GENERATION_UPDATED] !== generation) {
                                                        generationStack = [];
                                                        generationDepth = 0;
                                                        while (generationDepth > -1) {
                                                            if ((generationReferences = generationStack[generationDepth]) === undefined) {
                                                                i = k = -1;
                                                                n = context[__REFS_LENGTH] || 0;
                                                                generationStack[generationDepth] = generationReferences = [];
                                                                context[__GENERATION_UPDATED] = generation;
                                                                context[__GENERATION] = (context[__GENERATION] || 0) + 1;
                                                                if ((reference = context[__PARENT]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                    generationReferences[++k] = reference;
                                                                }
                                                                while (++i < n) {
                                                                    if ((reference = context[__REF + i]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                        generationReferences[++k] = reference;
                                                                    }
                                                                }
                                                            }
                                                            if ((context = generationReferences.pop()) !== undefined) {
                                                                ++generationDepth;
                                                            } else {
                                                                generationStack[generationDepth--] = undefined;
                                                            }
                                                        }
                                                    }
                                                    reference = generationStack = generationReferences = undefined;
                                                    context = contextTmp2;
                                                    if ((contextParent = context[__PARENT]) !== undefined && contextSize <= 0) {
                                                        contextRefsLength = context.__refsLength || 0;
                                                        i = -1;
                                                        while (++i < contextRefsLength) {
                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                reference.__context = undefined;
                                                                context[__REF + i] = undefined;
                                                            }
                                                        }
                                                        context.__refsLength = undefined;
                                                        contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                        if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                            i = (contextValue[__REF_INDEX] || 0) - 1;
                                                            n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                            while (++i <= n) {
                                                                referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                            }
                                                            referenceContext[__REFS_LENGTH] = n;
                                                            contextValue[__REF_INDEX] = undefined;
                                                            contextValue[__CONTEXT] = undefined;
                                                            referenceContext = undefined;
                                                        }
                                                        if (context != null && typeof context === 'object') {
                                                            head = root.__head;
                                                            tail = root.__tail;
                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                            context === head && (root.__head = root.__next = head = next);
                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                            context.__next = context.__prev = undefined;
                                                            head = tail = next = prev = undefined;
                                                        }
                                                    }
                                                    context = contextParent;
                                                }
                                                context = contextTmp;
                                                contextParent = contextParentTmp;
                                                contextTmp = contextTmp2 = contextParentTmp = undefined;
                                                contextType = context != null && context[$TYPE];
                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                key = branchKeyTmp;
                                                break;
                                            }
                                    } else {
                                        context[__SELF] = context;
                                        context[__KEY] = key;
                                        context[__PARENT] = contextParent;
                                        context[__ROOT] = contextCache;
                                        if (context[__GENERATION] === undefined) {
                                            context[__GENERATION] = 0;
                                        }
                                    }
                                } else {
                                    context[__SELF] = context;
                                    context[__KEY] = key;
                                    context[__PARENT] = contextParent;
                                    context[__ROOT] = contextCache;
                                    if (context[__GENERATION] === undefined) {
                                        context[__GENERATION] = 0;
                                    }
                                }
                                branchKeyTmp = key;
                                if ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue)) {
                                    expandsCount = -1;
                                    refsByCols[outermostColumn = column] = contextValue;
                                    do {
                                        branchKeyTmp = key;
                                        if (false) {
                                        } else {
                                            message = messageCache;
                                            messageParent = messageCache;
                                            refsByCols[outermostColumn = column] = contextValue;
                                            outermostLength = length;
                                            outermostPath = path;
                                            offset = 0;
                                            column = -1;
                                            path = contextValue;
                                            length = path.length - 1;
                                            contextParent = contextCache;
                                            while (++column < length) {
                                                if ((key = path[column]) == null) {
                                                    continue;
                                                }
                                                optimizedPath[optimizedPath.length = column + offset] = key;
                                                context = contextParent[key];
                                                if (context != null) {
                                                    if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                        contextInvalidated = context != null && context[__INVALIDATED];
                                                        if (contextInvalidated === true === false) {
                                                            context.__invalidated = true;
                                                            context[$EXPIRES] = 0;
                                                            expired[++expiredLength] = context;
                                                            if (context != null && typeof context === 'object') {
                                                                head = root.__head;
                                                                tail = root.__tail;
                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                context === head && (root.__head = root.__next = head = next);
                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                context.__next = context.__prev = undefined;
                                                                head = tail = next = prev = undefined;
                                                            }
                                                        }
                                                        context = undefined;
                                                    }
                                                }
                                                contextType = context != null && context[$TYPE];
                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                contextTimestamp = context != null && context[$TIMESTAMP];
                                                message = messageParent && messageParent[key];
                                                if (!(context != null) && !(message != null)) {
                                                    break resolvePath;
                                                }
                                                messageType = message != null && message[$TYPE];
                                                messageValue = messageType === 'sentinel' ? message.value : message;
                                                messageTimestamp = message != null && message[$TIMESTAMP];
                                                messageExpires = (message != null || null) && message[$EXPIRES];
                                                if (!!((messageExpires = (message != null || null) && message[$EXPIRES]) != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < now())) === false) {
                                                    if (context != null === false) {
                                                        sizeOffset = 0;
                                                        branchKeyTmp = key;
                                                        messageSize = message != null && message[$SIZE] || 0;
                                                        do {
                                                            if (key != null && key !== __NULL) {
                                                                if (context != null && context !== message) {
                                                                    contextRefsLength = context.__refsLength || 0;
                                                                    messageRefsLength = message.__refsLength || 0;
                                                                    i = -1;
                                                                    while (++i < contextRefsLength) {
                                                                        if ((reference = context[__REF + i]) !== undefined) {
                                                                            reference[__CONTEXT] = message;
                                                                            message[__REF + (messageRefsLength + i)] = reference;
                                                                            context[__REF + i] = undefined;
                                                                        }
                                                                    }
                                                                    message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                                    context[__REFS_LENGTH] = reference = undefined;
                                                                    contextLeafStack = [];
                                                                    contextLeafDepth = 0;
                                                                    keyTmp = key;
                                                                    contextTmp = context;
                                                                    contextParentTmp = contextParent;
                                                                    contextTypeTmp = contextType;
                                                                    recursing:
                                                                        while (contextLeafDepth > -1) {
                                                                            if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                                                contextRefsLength = context.__refsLength || 0;
                                                                                i = -1;
                                                                                while (++i < contextRefsLength) {
                                                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                                                        reference.__context = undefined;
                                                                                        context[__REF + i] = undefined;
                                                                                    }
                                                                                }
                                                                                context.__refsLength = undefined;
                                                                                contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                                if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                    i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                    n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                    while (++i <= n) {
                                                                                        referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                    }
                                                                                    referenceContext[__REFS_LENGTH] = n;
                                                                                    contextValue[__REF_INDEX] = undefined;
                                                                                    contextValue[__CONTEXT] = undefined;
                                                                                    referenceContext = undefined;
                                                                                }
                                                                                if (context != null && typeof context === 'object') {
                                                                                    head = root.__head;
                                                                                    tail = root.__tail;
                                                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                    context === head && (root.__head = root.__next = head = next);
                                                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                    context.__next = context.__prev = undefined;
                                                                                    head = tail = next = prev = undefined;
                                                                                }
                                                                                context = contextParent;
                                                                                contextParent = contextLeaves && contextLeaves.parent;
                                                                                contextLeafStack[contextLeafDepth--] = undefined;
                                                                                contextType = context != null && context[$TYPE];
                                                                                continue;
                                                                            }
                                                                            if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                                contextLeafKeys = Object.keys(context);
                                                                                contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                                contextLeaves.parent = contextParent;
                                                                                i = -1;
                                                                                n = contextLeafKeys.length;
                                                                                while (++i < n) {
                                                                                    if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                        contextLeaves[i] = context[contextLeafKey];
                                                                                    }
                                                                                }
                                                                            }
                                                                            contextParent = context;
                                                                            if (context = contextLeaves.pop()) {
                                                                                contextLeafDepth++;
                                                                                contextType = context != null && context[$TYPE];
                                                                            } else {
                                                                                contextType = 'leaf';
                                                                                context = contextParent;
                                                                                contextParent = contextLeaves.parent;
                                                                            }
                                                                            continue;
                                                                        }
                                                                    key = keyTmp;
                                                                    context = contextTmp;
                                                                    contextParent = contextParentTmp;
                                                                    contextType = contextTypeTmp;
                                                                    contextTmp = contextTypeTmp = undefined;
                                                                    if (context != null && typeof context === 'object') {
                                                                        head = root.__head;
                                                                        tail = root.__tail;
                                                                        (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                        (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                        context === head && (root.__head = root.__next = head = next);
                                                                        context === tail && (root.__tail = root.__prev = tail = prev);
                                                                        context.__next = context.__prev = undefined;
                                                                        head = tail = next = prev = undefined;
                                                                    }
                                                                }
                                                                message[$SIZE] = messageSize - sizeOffset;
                                                                contextParent[key] = context = message;
                                                                break;
                                                            }
                                                            context = contexts[--column];
                                                            key = context[__KEY];
                                                            contextParent = contexts[column - 1] || contextCache;
                                                        } while (column > -1);
                                                        context[__SELF] = context;
                                                        context[__KEY] = key;
                                                        context[__PARENT] = contextParent;
                                                        context[__ROOT] = contextCache;
                                                        if (context[__GENERATION] === undefined) {
                                                            context[__GENERATION] = 0;
                                                        }
                                                        contextType = context != null && context[$TYPE];
                                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                                        key = branchKeyTmp;
                                                    } else if (context !== message && ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) && ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue)) && (messageTimestamp < contextTimestamp || messageExpires === 0 && ((context = message) || true)) === false) {
                                                        inserting:
                                                            while (true) {
                                                                i = 0;
                                                                if ((i = contextValue.length) === messageValue.length) {
                                                                    checking_refs:
                                                                        while (--i > -1) {
                                                                            if (contextValue[i] !== messageValue[i]) {
                                                                                break checking_refs;
                                                                            }
                                                                        }
                                                                    if (i === -1) {
                                                                        break inserting;
                                                                    }
                                                                }
                                                                branchKeyTmp = key;
                                                                messageSize = message != null && message[$SIZE] || 0;
                                                                originalMessageSize = messageSize || 0;
                                                                if ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) {
                                                                    messageType = 'array';
                                                                    originalMessageSize = messageValue.length || 1;
                                                                    messageSize = (messageType === 'sentinel' && 50 || 0) + originalMessageSize;
                                                                    messageValue[__CONTAINER] = message;
                                                                } else if (messageType === 'sentinel') {
                                                                    messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                                } else if (messageType === 'error') {
                                                                    if (typeof errorSelector === 'function') {
                                                                        message = Enumerable.errorSelector(message);
                                                                    }
                                                                    messageSize = 50 + originalMessageSize;
                                                                } else if (messageValue == null || typeof messageValue !== 'object') {
                                                                    originalMessageSize = typeof messageValue === 'string' && messageValue.length || 1;
                                                                    messageSize = 50 + originalMessageSize;
                                                                    messageType = 'sentinel';
                                                                    message = {
                                                                        '$type': messageType,
                                                                        'value': messageValue
                                                                    };
                                                                } else {
                                                                    messageSize = message[$SIZE] || 50 * 2;
                                                                    messageType = message[$TYPE] = messageType || 'leaf';
                                                                }
                                                                message[$SIZE] = sizeOffset = messageSize;
                                                                do {
                                                                    if (key != null && key !== __NULL) {
                                                                        if (context != null && context !== message) {
                                                                            contextRefsLength = context.__refsLength || 0;
                                                                            messageRefsLength = message.__refsLength || 0;
                                                                            i = -1;
                                                                            while (++i < contextRefsLength) {
                                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                                    reference[__CONTEXT] = message;
                                                                                    message[__REF + (messageRefsLength + i)] = reference;
                                                                                    context[__REF + i] = undefined;
                                                                                }
                                                                            }
                                                                            message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                                            context[__REFS_LENGTH] = reference = undefined;
                                                                            contextLeafStack = [];
                                                                            contextLeafDepth = 0;
                                                                            keyTmp = key;
                                                                            contextTmp = context;
                                                                            contextParentTmp = contextParent;
                                                                            contextTypeTmp = contextType;
                                                                            recursing:
                                                                                while (contextLeafDepth > -1) {
                                                                                    if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                                                                        contextRefsLength = context.__refsLength || 0;
                                                                                        i = -1;
                                                                                        while (++i < contextRefsLength) {
                                                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                                                reference.__context = undefined;
                                                                                                context[__REF + i] = undefined;
                                                                                            }
                                                                                        }
                                                                                        context.__refsLength = undefined;
                                                                                        contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                                        if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                            i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                            n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                            while (++i <= n) {
                                                                                                referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                            }
                                                                                            referenceContext[__REFS_LENGTH] = n;
                                                                                            contextValue[__REF_INDEX] = undefined;
                                                                                            contextValue[__CONTEXT] = undefined;
                                                                                            referenceContext = undefined;
                                                                                        }
                                                                                        if (context != null && typeof context === 'object') {
                                                                                            head = root.__head;
                                                                                            tail = root.__tail;
                                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                            context === head && (root.__head = root.__next = head = next);
                                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                            context.__next = context.__prev = undefined;
                                                                                            head = tail = next = prev = undefined;
                                                                                        }
                                                                                        context = contextParent;
                                                                                        contextParent = contextLeaves && contextLeaves.parent;
                                                                                        contextLeafStack[contextLeafDepth--] = undefined;
                                                                                        contextType = context != null && context[$TYPE];
                                                                                        continue;
                                                                                    }
                                                                                    if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                                        contextLeafKeys = Object.keys(context);
                                                                                        contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                                        contextLeaves.parent = contextParent;
                                                                                        i = -1;
                                                                                        n = contextLeafKeys.length;
                                                                                        while (++i < n) {
                                                                                            if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                                contextLeaves[i] = context[contextLeafKey];
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    contextParent = context;
                                                                                    if (context = contextLeaves.pop()) {
                                                                                        contextLeafDepth++;
                                                                                        contextType = context != null && context[$TYPE];
                                                                                    } else {
                                                                                        contextType = 'leaf';
                                                                                        context = contextParent;
                                                                                        contextParent = contextLeaves.parent;
                                                                                    }
                                                                                    continue;
                                                                                }
                                                                            key = keyTmp;
                                                                            context = contextTmp;
                                                                            contextParent = contextParentTmp;
                                                                            contextType = contextTypeTmp;
                                                                            contextTmp = contextTypeTmp = undefined;
                                                                            if (context != null && typeof context === 'object') {
                                                                                head = root.__head;
                                                                                tail = root.__tail;
                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                context.__next = context.__prev = undefined;
                                                                                head = tail = next = prev = undefined;
                                                                            }
                                                                        }
                                                                        message[$SIZE] = messageSize - sizeOffset;
                                                                        contextParent[key] = context = message;
                                                                        break;
                                                                    }
                                                                    context = contexts[--column];
                                                                    key = context[__KEY];
                                                                    contextParent = contexts[column - 1] || contextCache;
                                                                } while (column > -1);
                                                                context[__SELF] = context;
                                                                context[__KEY] = key;
                                                                context[__PARENT] = contextParent;
                                                                context[__ROOT] = contextCache;
                                                                if (context[__GENERATION] === undefined) {
                                                                    context[__GENERATION] = 0;
                                                                }
                                                                contextTmp = context;
                                                                contextParentTmp = contextParent;
                                                                while (context !== undefined) {
                                                                    contextSize = context['$size'] = (context['$size'] || 0) + sizeOffset;
                                                                    contextTmp2 = context;
                                                                    if (context[__GENERATION_UPDATED] !== generation) {
                                                                        generationStack = [];
                                                                        generationDepth = 0;
                                                                        while (generationDepth > -1) {
                                                                            if ((generationReferences = generationStack[generationDepth]) === undefined) {
                                                                                i = k = -1;
                                                                                n = context[__REFS_LENGTH] || 0;
                                                                                generationStack[generationDepth] = generationReferences = [];
                                                                                context[__GENERATION_UPDATED] = generation;
                                                                                context[__GENERATION] = (context[__GENERATION] || 0) + 1;
                                                                                if ((reference = context[__PARENT]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                                    generationReferences[++k] = reference;
                                                                                }
                                                                                while (++i < n) {
                                                                                    if ((reference = context[__REF + i]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                                        generationReferences[++k] = reference;
                                                                                    }
                                                                                }
                                                                            }
                                                                            if ((context = generationReferences.pop()) !== undefined) {
                                                                                ++generationDepth;
                                                                            } else {
                                                                                generationStack[generationDepth--] = undefined;
                                                                            }
                                                                        }
                                                                    }
                                                                    reference = generationStack = generationReferences = undefined;
                                                                    context = contextTmp2;
                                                                    if ((contextParent = context[__PARENT]) !== undefined && contextSize <= 0) {
                                                                        contextRefsLength = context.__refsLength || 0;
                                                                        i = -1;
                                                                        while (++i < contextRefsLength) {
                                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                                reference.__context = undefined;
                                                                                context[__REF + i] = undefined;
                                                                            }
                                                                        }
                                                                        context.__refsLength = undefined;
                                                                        contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                        if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                            i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                            n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                            while (++i <= n) {
                                                                                referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                            }
                                                                            referenceContext[__REFS_LENGTH] = n;
                                                                            contextValue[__REF_INDEX] = undefined;
                                                                            contextValue[__CONTEXT] = undefined;
                                                                            referenceContext = undefined;
                                                                        }
                                                                        if (context != null && typeof context === 'object') {
                                                                            head = root.__head;
                                                                            tail = root.__tail;
                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                            context === head && (root.__head = root.__next = head = next);
                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                            context.__next = context.__prev = undefined;
                                                                            head = tail = next = prev = undefined;
                                                                        }
                                                                    }
                                                                    context = contextParent;
                                                                }
                                                                context = contextTmp;
                                                                contextParent = contextParentTmp;
                                                                contextTmp = contextTmp2 = contextParentTmp = undefined;
                                                                contextType = context != null && context[$TYPE];
                                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                                key = branchKeyTmp;
                                                                break;
                                                            }
                                                    } else {
                                                        context[__SELF] = context;
                                                        context[__KEY] = key;
                                                        context[__PARENT] = contextParent;
                                                        context[__ROOT] = contextCache;
                                                        if (context[__GENERATION] === undefined) {
                                                            context[__GENERATION] = 0;
                                                        }
                                                    }
                                                } else {
                                                    context[__SELF] = context;
                                                    context[__KEY] = key;
                                                    context[__PARENT] = contextParent;
                                                    context[__ROOT] = contextCache;
                                                    if (context[__GENERATION] === undefined) {
                                                        context[__GENERATION] = 0;
                                                    }
                                                }
                                                contextParent = context;
                                                messageParent = message;
                                                if (context === undefined) {
                                                    i = -1;
                                                    refLen = path.length;
                                                    offset = refLen - column - 1;
                                                    optimizedPath.length = refLen;
                                                    while (++i < refLen) {
                                                        optimizedPath[i] = path[i];
                                                    }
                                                    break;
                                                } else if (!!contextType || Array.isArray(contextValue)) {
                                                    break;
                                                }
                                                contextParent = context;
                                            }
                                            if (column === length) {
                                                if ((key = path[column]) != null) {
                                                    optimizedPath[optimizedPath.length = column + offset] = key;
                                                    context = contextParent[key];
                                                    if (context != null) {
                                                        if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                            contextInvalidated = context != null && context[__INVALIDATED];
                                                            if (contextInvalidated === true === false) {
                                                                context.__invalidated = true;
                                                                context[$EXPIRES] = 0;
                                                                expired[++expiredLength] = context;
                                                                if (context != null && typeof context === 'object') {
                                                                    head = root.__head;
                                                                    tail = root.__tail;
                                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                    context === head && (root.__head = root.__next = head = next);
                                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                                    context.__next = context.__prev = undefined;
                                                                    head = tail = next = prev = undefined;
                                                                }
                                                            }
                                                            context = undefined;
                                                        }
                                                    }
                                                    contextType = context != null && context[$TYPE];
                                                    contextValue = contextType === 'sentinel' ? context.value : context;
                                                    contextTimestamp = context != null && context[$TIMESTAMP];
                                                    message = messageParent && messageParent[key];
                                                    if (!(context != null) && !(message != null)) {
                                                        break resolvePath;
                                                    }
                                                    messageType = message != null && message[$TYPE];
                                                    messageValue = messageType === 'sentinel' ? message.value : message;
                                                    messageTimestamp = message != null && message[$TIMESTAMP];
                                                    messageExpires = (message != null || null) && message[$EXPIRES];
                                                    if (!!((messageExpires = (message != null || null) && message[$EXPIRES]) != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < now())) === false) {
                                                        if (context != null === false) {
                                                            sizeOffset = 0;
                                                            branchKeyTmp = key;
                                                            messageSize = message != null && message[$SIZE] || 0;
                                                            do {
                                                                if (key != null && key !== __NULL) {
                                                                    if (context != null && context !== message) {
                                                                        contextRefsLength = context.__refsLength || 0;
                                                                        messageRefsLength = message.__refsLength || 0;
                                                                        i = -1;
                                                                        while (++i < contextRefsLength) {
                                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                                reference[__CONTEXT] = message;
                                                                                message[__REF + (messageRefsLength + i)] = reference;
                                                                                context[__REF + i] = undefined;
                                                                            }
                                                                        }
                                                                        message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                                        context[__REFS_LENGTH] = reference = undefined;
                                                                        contextLeafStack = [];
                                                                        contextLeafDepth = 0;
                                                                        keyTmp = key;
                                                                        contextTmp = context;
                                                                        contextParentTmp = contextParent;
                                                                        contextTypeTmp = contextType;
                                                                        recursing:
                                                                            while (contextLeafDepth > -1) {
                                                                                if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                                    contextValue = contextType === 'sentinel' ? context.value : context;
                                                                                    contextRefsLength = context.__refsLength || 0;
                                                                                    i = -1;
                                                                                    while (++i < contextRefsLength) {
                                                                                        if ((reference = context[__REF + i]) !== undefined) {
                                                                                            reference.__context = undefined;
                                                                                            context[__REF + i] = undefined;
                                                                                        }
                                                                                    }
                                                                                    context.__refsLength = undefined;
                                                                                    contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                                    if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                        i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                        n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                        while (++i <= n) {
                                                                                            referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                        }
                                                                                        referenceContext[__REFS_LENGTH] = n;
                                                                                        contextValue[__REF_INDEX] = undefined;
                                                                                        contextValue[__CONTEXT] = undefined;
                                                                                        referenceContext = undefined;
                                                                                    }
                                                                                    if (context != null && typeof context === 'object') {
                                                                                        head = root.__head;
                                                                                        tail = root.__tail;
                                                                                        (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                        (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                        context === head && (root.__head = root.__next = head = next);
                                                                                        context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                        context.__next = context.__prev = undefined;
                                                                                        head = tail = next = prev = undefined;
                                                                                    }
                                                                                    context = contextParent;
                                                                                    contextParent = contextLeaves && contextLeaves.parent;
                                                                                    contextLeafStack[contextLeafDepth--] = undefined;
                                                                                    contextType = context != null && context[$TYPE];
                                                                                    continue;
                                                                                }
                                                                                if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                                    contextLeafKeys = Object.keys(context);
                                                                                    contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                                    contextLeaves.parent = contextParent;
                                                                                    i = -1;
                                                                                    n = contextLeafKeys.length;
                                                                                    while (++i < n) {
                                                                                        if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                            contextLeaves[i] = context[contextLeafKey];
                                                                                        }
                                                                                    }
                                                                                }
                                                                                contextParent = context;
                                                                                if (context = contextLeaves.pop()) {
                                                                                    contextLeafDepth++;
                                                                                    contextType = context != null && context[$TYPE];
                                                                                } else {
                                                                                    contextType = 'leaf';
                                                                                    context = contextParent;
                                                                                    contextParent = contextLeaves.parent;
                                                                                }
                                                                                continue;
                                                                            }
                                                                        key = keyTmp;
                                                                        context = contextTmp;
                                                                        contextParent = contextParentTmp;
                                                                        contextType = contextTypeTmp;
                                                                        contextTmp = contextTypeTmp = undefined;
                                                                        if (context != null && typeof context === 'object') {
                                                                            head = root.__head;
                                                                            tail = root.__tail;
                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                            context === head && (root.__head = root.__next = head = next);
                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                            context.__next = context.__prev = undefined;
                                                                            head = tail = next = prev = undefined;
                                                                        }
                                                                    }
                                                                    message[$SIZE] = messageSize - sizeOffset;
                                                                    contextParent[key] = context = message;
                                                                    break;
                                                                }
                                                                context = contexts[--column];
                                                                key = context[__KEY];
                                                                contextParent = contexts[column - 1] || contextCache;
                                                            } while (column > -1);
                                                            context[__SELF] = context;
                                                            context[__KEY] = key;
                                                            context[__PARENT] = contextParent;
                                                            context[__ROOT] = contextCache;
                                                            if (context[__GENERATION] === undefined) {
                                                                context[__GENERATION] = 0;
                                                            }
                                                            contextType = context != null && context[$TYPE];
                                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                                            key = branchKeyTmp;
                                                        } else if (context !== message && ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) && ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue)) && (messageTimestamp < contextTimestamp || messageExpires === 0 && ((context = message) || true)) === false) {
                                                            inserting:
                                                                while (true) {
                                                                    i = 0;
                                                                    if ((i = contextValue.length) === messageValue.length) {
                                                                        checking_refs:
                                                                            while (--i > -1) {
                                                                                if (contextValue[i] !== messageValue[i]) {
                                                                                    break checking_refs;
                                                                                }
                                                                            }
                                                                        if (i === -1) {
                                                                            break inserting;
                                                                        }
                                                                    }
                                                                    branchKeyTmp = key;
                                                                    messageSize = message != null && message[$SIZE] || 0;
                                                                    originalMessageSize = messageSize || 0;
                                                                    if ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) {
                                                                        messageType = 'array';
                                                                        originalMessageSize = messageValue.length || 1;
                                                                        messageSize = (messageType === 'sentinel' && 50 || 0) + originalMessageSize;
                                                                        messageValue[__CONTAINER] = message;
                                                                    } else if (messageType === 'sentinel') {
                                                                        messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                                    } else if (messageType === 'error') {
                                                                        if (typeof errorSelector === 'function') {
                                                                            message = Enumerable.errorSelector(message);
                                                                        }
                                                                        messageSize = 50 + originalMessageSize;
                                                                    } else if (messageValue == null || typeof messageValue !== 'object') {
                                                                        originalMessageSize = typeof messageValue === 'string' && messageValue.length || 1;
                                                                        messageSize = 50 + originalMessageSize;
                                                                        messageType = 'sentinel';
                                                                        message = {
                                                                            '$type': messageType,
                                                                            'value': messageValue
                                                                        };
                                                                    } else {
                                                                        messageSize = message[$SIZE] || 50 * 2;
                                                                        messageType = message[$TYPE] = messageType || 'leaf';
                                                                    }
                                                                    message[$SIZE] = sizeOffset = messageSize;
                                                                    do {
                                                                        if (key != null && key !== __NULL) {
                                                                            if (context != null && context !== message) {
                                                                                contextRefsLength = context.__refsLength || 0;
                                                                                messageRefsLength = message.__refsLength || 0;
                                                                                i = -1;
                                                                                while (++i < contextRefsLength) {
                                                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                                                        reference[__CONTEXT] = message;
                                                                                        message[__REF + (messageRefsLength + i)] = reference;
                                                                                        context[__REF + i] = undefined;
                                                                                    }
                                                                                }
                                                                                message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                                                context[__REFS_LENGTH] = reference = undefined;
                                                                                contextLeafStack = [];
                                                                                contextLeafDepth = 0;
                                                                                keyTmp = key;
                                                                                contextTmp = context;
                                                                                contextParentTmp = contextParent;
                                                                                contextTypeTmp = contextType;
                                                                                recursing:
                                                                                    while (contextLeafDepth > -1) {
                                                                                        if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                                                                            contextRefsLength = context.__refsLength || 0;
                                                                                            i = -1;
                                                                                            while (++i < contextRefsLength) {
                                                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                                                    reference.__context = undefined;
                                                                                                    context[__REF + i] = undefined;
                                                                                                }
                                                                                            }
                                                                                            context.__refsLength = undefined;
                                                                                            contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                                            if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                                i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                                n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                                while (++i <= n) {
                                                                                                    referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                                }
                                                                                                referenceContext[__REFS_LENGTH] = n;
                                                                                                contextValue[__REF_INDEX] = undefined;
                                                                                                contextValue[__CONTEXT] = undefined;
                                                                                                referenceContext = undefined;
                                                                                            }
                                                                                            if (context != null && typeof context === 'object') {
                                                                                                head = root.__head;
                                                                                                tail = root.__tail;
                                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                                context.__next = context.__prev = undefined;
                                                                                                head = tail = next = prev = undefined;
                                                                                            }
                                                                                            context = contextParent;
                                                                                            contextParent = contextLeaves && contextLeaves.parent;
                                                                                            contextLeafStack[contextLeafDepth--] = undefined;
                                                                                            contextType = context != null && context[$TYPE];
                                                                                            continue;
                                                                                        }
                                                                                        if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                                            contextLeafKeys = Object.keys(context);
                                                                                            contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                                            contextLeaves.parent = contextParent;
                                                                                            i = -1;
                                                                                            n = contextLeafKeys.length;
                                                                                            while (++i < n) {
                                                                                                if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                                    contextLeaves[i] = context[contextLeafKey];
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        contextParent = context;
                                                                                        if (context = contextLeaves.pop()) {
                                                                                            contextLeafDepth++;
                                                                                            contextType = context != null && context[$TYPE];
                                                                                        } else {
                                                                                            contextType = 'leaf';
                                                                                            context = contextParent;
                                                                                            contextParent = contextLeaves.parent;
                                                                                        }
                                                                                        continue;
                                                                                    }
                                                                                key = keyTmp;
                                                                                context = contextTmp;
                                                                                contextParent = contextParentTmp;
                                                                                contextType = contextTypeTmp;
                                                                                contextTmp = contextTypeTmp = undefined;
                                                                                if (context != null && typeof context === 'object') {
                                                                                    head = root.__head;
                                                                                    tail = root.__tail;
                                                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                    context === head && (root.__head = root.__next = head = next);
                                                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                    context.__next = context.__prev = undefined;
                                                                                    head = tail = next = prev = undefined;
                                                                                }
                                                                            }
                                                                            message[$SIZE] = messageSize - sizeOffset;
                                                                            contextParent[key] = context = message;
                                                                            break;
                                                                        }
                                                                        context = contexts[--column];
                                                                        key = context[__KEY];
                                                                        contextParent = contexts[column - 1] || contextCache;
                                                                    } while (column > -1);
                                                                    context[__SELF] = context;
                                                                    context[__KEY] = key;
                                                                    context[__PARENT] = contextParent;
                                                                    context[__ROOT] = contextCache;
                                                                    if (context[__GENERATION] === undefined) {
                                                                        context[__GENERATION] = 0;
                                                                    }
                                                                    contextTmp = context;
                                                                    contextParentTmp = contextParent;
                                                                    while (context !== undefined) {
                                                                        contextSize = context['$size'] = (context['$size'] || 0) + sizeOffset;
                                                                        contextTmp2 = context;
                                                                        if (context[__GENERATION_UPDATED] !== generation) {
                                                                            generationStack = [];
                                                                            generationDepth = 0;
                                                                            while (generationDepth > -1) {
                                                                                if ((generationReferences = generationStack[generationDepth]) === undefined) {
                                                                                    i = k = -1;
                                                                                    n = context[__REFS_LENGTH] || 0;
                                                                                    generationStack[generationDepth] = generationReferences = [];
                                                                                    context[__GENERATION_UPDATED] = generation;
                                                                                    context[__GENERATION] = (context[__GENERATION] || 0) + 1;
                                                                                    if ((reference = context[__PARENT]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                                        generationReferences[++k] = reference;
                                                                                    }
                                                                                    while (++i < n) {
                                                                                        if ((reference = context[__REF + i]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                                            generationReferences[++k] = reference;
                                                                                        }
                                                                                    }
                                                                                }
                                                                                if ((context = generationReferences.pop()) !== undefined) {
                                                                                    ++generationDepth;
                                                                                } else {
                                                                                    generationStack[generationDepth--] = undefined;
                                                                                }
                                                                            }
                                                                        }
                                                                        reference = generationStack = generationReferences = undefined;
                                                                        context = contextTmp2;
                                                                        if ((contextParent = context[__PARENT]) !== undefined && contextSize <= 0) {
                                                                            contextRefsLength = context.__refsLength || 0;
                                                                            i = -1;
                                                                            while (++i < contextRefsLength) {
                                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                                    reference.__context = undefined;
                                                                                    context[__REF + i] = undefined;
                                                                                }
                                                                            }
                                                                            context.__refsLength = undefined;
                                                                            contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                            if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                while (++i <= n) {
                                                                                    referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                }
                                                                                referenceContext[__REFS_LENGTH] = n;
                                                                                contextValue[__REF_INDEX] = undefined;
                                                                                contextValue[__CONTEXT] = undefined;
                                                                                referenceContext = undefined;
                                                                            }
                                                                            if (context != null && typeof context === 'object') {
                                                                                head = root.__head;
                                                                                tail = root.__tail;
                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                context.__next = context.__prev = undefined;
                                                                                head = tail = next = prev = undefined;
                                                                            }
                                                                        }
                                                                        context = contextParent;
                                                                    }
                                                                    context = contextTmp;
                                                                    contextParent = contextParentTmp;
                                                                    contextTmp = contextTmp2 = contextParentTmp = undefined;
                                                                    contextType = context != null && context[$TYPE];
                                                                    contextValue = contextType === 'sentinel' ? context.value : context;
                                                                    key = branchKeyTmp;
                                                                    break;
                                                                }
                                                        } else {
                                                            context[__SELF] = context;
                                                            context[__KEY] = key;
                                                            context[__PARENT] = contextParent;
                                                            context[__ROOT] = contextCache;
                                                            if (context[__GENERATION] === undefined) {
                                                                context[__GENERATION] = 0;
                                                            }
                                                        }
                                                    } else {
                                                        context[__SELF] = context;
                                                        context[__KEY] = key;
                                                        context[__PARENT] = contextParent;
                                                        context[__ROOT] = contextCache;
                                                        if (context[__GENERATION] === undefined) {
                                                            context[__GENERATION] = 0;
                                                        }
                                                    }
                                                    contextParent = context;
                                                    messageParent = message;
                                                }
                                                if (context != null) {
                                                    if ((refContainer = path[__CONTAINER] || path).__context === undefined) {
                                                        backRefs = context.__refsLength || 0;
                                                        context['__ref' + backRefs] = refContainer;
                                                        context.__refsLength = backRefs + 1;
                                                        refContainer.__refIndex = backRefs;
                                                        refContainer.__context = context;
                                                        refContainer = backRefs = undefined;
                                                    }
                                                }
                                            }
                                            expandsCount = Number(contextType === 'error') - 1;
                                            column = outermostColumn;
                                            path = outermostPath;
                                            offset = length - column;
                                            length = outermostLength;
                                            key = branchKeyTmp;
                                            outermostColumn = undefined;
                                            outermostPath = undefined;
                                            outermostLength = undefined;
                                            branchKeyTmp = undefined;
                                        }
                                    } while ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue));
                                } else if (!!contextType) {
                                    break resolvePath;
                                }
                                key = branchKeyTmp;
                                contexts[column] = contextParent = context;
                                messages[column] = messageParent = message;
                                if (!!jsonCache && isKeySet === true) {
                                    do {
                                        jsonKey = jsonKeys[jsonDepth];
                                    } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                                    if (jsonKey != null && jsonKey !== __NULL) {
                                        json = jsons[jsonDepth - 1] || jsonCache;
                                    } else {
                                        json = jsonCache;
                                    }
                                    if (jsonKey != null && jsonKey !== __NULL) {
                                        json = json[jsonKey] || (json[jsonKey] = {});
                                        json[__KEY] = jsonKey;
                                        json[__GENERATION] = context[__GENERATION] || 0;
                                    }
                                    jsons[jsonDepth] = json;
                                    jsonDepth += 1;
                                }
                            }
                        }
                        if (column === length) {
                            key = path[column];
                            isKeySet = false;
                            if (key != null && typeof key === 'object') {
                                isKeySet = true;
                                if (Array.isArray(key)) {
                                    key = key[key.index || (key.index = 0)];
                                    if (key != null && typeof key === 'object') {
                                        key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                    }
                                } else {
                                    key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            }
                            requestedPath[requestedPath.length = column] = key;
                            if (key != null && key !== __NULL) {
                                jsonDepth = column;
                                isKeySet = true;
                                !!jsonCache && isKeySet === true && (jsonKeys[jsonDepth] = key);
                                optimizedPath[optimizedPath.length = column + offset] = key;
                                context = contextParent[key];
                                if (context != null) {
                                    if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                        contextInvalidated = context != null && context[__INVALIDATED];
                                        if (contextInvalidated === true === false) {
                                            context.__invalidated = true;
                                            context[$EXPIRES] = 0;
                                            expired[++expiredLength] = context;
                                            if (context != null && typeof context === 'object') {
                                                head = root.__head;
                                                tail = root.__tail;
                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                context === head && (root.__head = root.__next = head = next);
                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                context.__next = context.__prev = undefined;
                                                head = tail = next = prev = undefined;
                                            }
                                        }
                                        context = undefined;
                                    }
                                }
                                contextType = context != null && context[$TYPE];
                                contextValue = contextType === 'sentinel' ? context.value : context;
                                contextTimestamp = context != null && context[$TIMESTAMP];
                                message = messageParent && messageParent[key];
                                if (!(context != null) && !(message != null)) {
                                    break resolvePath;
                                }
                                messageType = message != null && message[$TYPE];
                                messageValue = messageType === 'sentinel' ? message.value : message;
                                messageTimestamp = message != null && message[$TIMESTAMP];
                                messageExpires = (message != null || null) && message[$EXPIRES];
                                if ((messageTimestamp < contextTimestamp || messageExpires === 0 && ((context = message) || true)) === false === true) {
                                    messageSize = message != null && message[$SIZE] || 0;
                                    originalMessageSize = messageSize || 0;
                                    if ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) {
                                        messageType = 'array';
                                        originalMessageSize = messageValue.length || 1;
                                        messageSize = (messageType === 'sentinel' && 50 || 0) + originalMessageSize;
                                        messageValue[__CONTAINER] = message;
                                    } else if (messageType === 'sentinel') {
                                        messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                    } else if (messageType === 'error') {
                                        if (typeof errorSelector === 'function') {
                                            message = Enumerable.errorSelector(message);
                                        }
                                        messageSize = 50 + originalMessageSize;
                                    } else if (messageValue == null || typeof messageValue !== 'object') {
                                        originalMessageSize = typeof messageValue === 'string' && messageValue.length || 1;
                                        messageSize = 50 + originalMessageSize;
                                        messageType = 'sentinel';
                                        message = {
                                            '$type': messageType,
                                            'value': messageValue
                                        };
                                    } else {
                                        messageSize = message[$SIZE] || 50 * 2;
                                        messageType = message[$TYPE] = messageType || 'leaf';
                                    }
                                    message[$SIZE] = sizeOffset = messageSize;
                                    if (!!((messageExpires = (message != null || null) && message[$EXPIRES]) != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < now())) === false) {
                                        messageSize = message != null && message[$SIZE] || 0;
                                        do {
                                            if (key != null && key !== __NULL) {
                                                if (context != null && context !== message) {
                                                    contextRefsLength = context.__refsLength || 0;
                                                    messageRefsLength = message.__refsLength || 0;
                                                    i = -1;
                                                    while (++i < contextRefsLength) {
                                                        if ((reference = context[__REF + i]) !== undefined) {
                                                            reference[__CONTEXT] = message;
                                                            message[__REF + (messageRefsLength + i)] = reference;
                                                            context[__REF + i] = undefined;
                                                        }
                                                    }
                                                    message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                    context[__REFS_LENGTH] = reference = undefined;
                                                    contextLeafStack = [];
                                                    contextLeafDepth = 0;
                                                    keyTmp = key;
                                                    contextTmp = context;
                                                    contextParentTmp = contextParent;
                                                    contextTypeTmp = contextType;
                                                    recursing:
                                                        while (contextLeafDepth > -1) {
                                                            if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                                contextRefsLength = context.__refsLength || 0;
                                                                i = -1;
                                                                while (++i < contextRefsLength) {
                                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                                        reference.__context = undefined;
                                                                        context[__REF + i] = undefined;
                                                                    }
                                                                }
                                                                context.__refsLength = undefined;
                                                                contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                    i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                    n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                    while (++i <= n) {
                                                                        referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                    }
                                                                    referenceContext[__REFS_LENGTH] = n;
                                                                    contextValue[__REF_INDEX] = undefined;
                                                                    contextValue[__CONTEXT] = undefined;
                                                                    referenceContext = undefined;
                                                                }
                                                                if (context != null && typeof context === 'object') {
                                                                    head = root.__head;
                                                                    tail = root.__tail;
                                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                    context === head && (root.__head = root.__next = head = next);
                                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                                    context.__next = context.__prev = undefined;
                                                                    head = tail = next = prev = undefined;
                                                                }
                                                                context = contextParent;
                                                                contextParent = contextLeaves && contextLeaves.parent;
                                                                contextLeafStack[contextLeafDepth--] = undefined;
                                                                contextType = context != null && context[$TYPE];
                                                                continue;
                                                            }
                                                            if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                contextLeafKeys = Object.keys(context);
                                                                contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                contextLeaves.parent = contextParent;
                                                                i = -1;
                                                                n = contextLeafKeys.length;
                                                                while (++i < n) {
                                                                    if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                        contextLeaves[i] = context[contextLeafKey];
                                                                    }
                                                                }
                                                            }
                                                            contextParent = context;
                                                            if (context = contextLeaves.pop()) {
                                                                contextLeafDepth++;
                                                                contextType = context != null && context[$TYPE];
                                                            } else {
                                                                contextType = 'leaf';
                                                                context = contextParent;
                                                                contextParent = contextLeaves.parent;
                                                            }
                                                            continue;
                                                        }
                                                    key = keyTmp;
                                                    context = contextTmp;
                                                    contextParent = contextParentTmp;
                                                    contextType = contextTypeTmp;
                                                    contextTmp = contextTypeTmp = undefined;
                                                    if (context != null && typeof context === 'object') {
                                                        head = root.__head;
                                                        tail = root.__tail;
                                                        (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                        (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                        context === head && (root.__head = root.__next = head = next);
                                                        context === tail && (root.__tail = root.__prev = tail = prev);
                                                        context.__next = context.__prev = undefined;
                                                        head = tail = next = prev = undefined;
                                                    }
                                                }
                                                message[$SIZE] = messageSize - sizeOffset;
                                                contextParent[key] = context = message;
                                                break;
                                            }
                                            context = contexts[--column];
                                            key = context[__KEY];
                                            contextParent = contexts[column - 1] || contextCache;
                                        } while (column > -1);
                                        context[__SELF] = context;
                                        context[__KEY] = key;
                                        context[__PARENT] = contextParent;
                                        context[__ROOT] = contextCache;
                                        if (context[__GENERATION] === undefined) {
                                            context[__GENERATION] = 0;
                                        }
                                        contextTmp = context;
                                        contextParentTmp = contextParent;
                                        while (context !== undefined) {
                                            contextSize = context['$size'] = (context['$size'] || 0) + sizeOffset;
                                            contextTmp2 = context;
                                            if (context[__GENERATION_UPDATED] !== generation) {
                                                generationStack = [];
                                                generationDepth = 0;
                                                while (generationDepth > -1) {
                                                    if ((generationReferences = generationStack[generationDepth]) === undefined) {
                                                        i = k = -1;
                                                        n = context[__REFS_LENGTH] || 0;
                                                        generationStack[generationDepth] = generationReferences = [];
                                                        context[__GENERATION_UPDATED] = generation;
                                                        context[__GENERATION] = (context[__GENERATION] || 0) + 1;
                                                        if ((reference = context[__PARENT]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                            generationReferences[++k] = reference;
                                                        }
                                                        while (++i < n) {
                                                            if ((reference = context[__REF + i]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                generationReferences[++k] = reference;
                                                            }
                                                        }
                                                    }
                                                    if ((context = generationReferences.pop()) !== undefined) {
                                                        ++generationDepth;
                                                    } else {
                                                        generationStack[generationDepth--] = undefined;
                                                    }
                                                }
                                            }
                                            reference = generationStack = generationReferences = undefined;
                                            context = contextTmp2;
                                            if ((contextParent = context[__PARENT]) !== undefined && contextSize <= 0) {
                                                contextRefsLength = context.__refsLength || 0;
                                                i = -1;
                                                while (++i < contextRefsLength) {
                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                        reference.__context = undefined;
                                                        context[__REF + i] = undefined;
                                                    }
                                                }
                                                context.__refsLength = undefined;
                                                contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                    i = (contextValue[__REF_INDEX] || 0) - 1;
                                                    n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                    while (++i <= n) {
                                                        referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                    }
                                                    referenceContext[__REFS_LENGTH] = n;
                                                    contextValue[__REF_INDEX] = undefined;
                                                    contextValue[__CONTEXT] = undefined;
                                                    referenceContext = undefined;
                                                }
                                                if (context != null && typeof context === 'object') {
                                                    head = root.__head;
                                                    tail = root.__tail;
                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                    context === head && (root.__head = root.__next = head = next);
                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                    context.__next = context.__prev = undefined;
                                                    head = tail = next = prev = undefined;
                                                }
                                            }
                                            context = contextParent;
                                        }
                                        context = contextTmp;
                                        contextParent = contextParentTmp;
                                        contextTmp = contextTmp2 = contextParentTmp = undefined;
                                        contextType = context != null && context[$TYPE];
                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                    }
                                }
                            }
                        }
                        break resolvePath;
                    } while (true);
                if (context != null) {
                    if (context != null && typeof context === 'object' && contextExpires !== 1) {
                        head = root.__head;
                        tail = root.__tail;
                        next = context.__next, prev = context.__prev;
                        if (context !== head) {
                            next && (next != null && typeof next === 'object') && (next.__prev = prev);
                            prev && (prev != null && typeof prev === 'object') && (prev.__next = next);
                            (next = head) && (head != null && typeof head === 'object') && (head.__prev = context);
                            root.__head = root.__next = head = context;
                            head.__next = next;
                            head.__prev = undefined;
                        }
                        if (tail == null || context === tail) {
                            root.__tail = root.__prev = tail = prev || context;
                        }
                        head = tail = next = prev = undefined;
                    }
                    if (contextType === 'error') {
                        if (expandsCount > -1) {
                            requestedPath[requestedPath.length] = null;
                        }
                        contextValue = context;
                    }
                }
                if (context == null || refreshing === true) {
                    src = optimizedPath;
                    dest = new Array(n = src.length);
                    i = -1;
                    while (++i < n) {
                        dest[i] = src[i];
                    }
                    opt = dest;
                    src = optimizedBoundPath;
                    dest = new Array(n = src.length);
                    i = -1;
                    while (++i < n) {
                        dest[i] = src[i];
                    }
                    req = dest;
                    reqLen = n;
                    i = -1;
                    n = requestedPath.length;
                    while (++i < n) {
                        key = path[i];
                        key2 = requestedPath[i];
                        req[reqLen + i] = key && typeof key === 'object' && [key2] || key2;
                    }
                    if (column < length) {
                        j = column + 1;
                        k = length + 1;
                        reqLen = req.length;
                        optLen = opt.length;
                        i = -1;
                        n = k - j;
                        while (++i < n) {
                            req[reqLen + i] = opt[optLen + i] = path[j + i];
                        }
                    }
                    req.pathSetIndex = index;
                    requestedMissingPaths[requestedMissingPaths.length] = req;
                    optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                } else if (contextValue !== undefined || boxed === true) {
                    src = optimizedPath;
                    dest = new Array(n = src.length);
                    i = -1;
                    while (++i < n) {
                        dest[i] = src[i];
                    }
                    opt = dest;
                    src = requestedPath;
                    dest = new Array(n = src.length);
                    i = -1;
                    while (++i < n) {
                        dest[i] = src[i];
                    }
                    req = dest;
                    requestedPaths[requestedPaths.length] = req;
                    optimizedPaths[optimizedPaths.length] = opt;
                    if (!!jsonCache) {
                        hasValues = true;
                        if (contextType === 'error') {
                            if (err === undefined) {
                                if (boxed === true) {
                                    err = context;
                                } else {
                                    dest = {};
                                    src = context;
                                    keys = Object.keys(src);
                                    i = -1;
                                    n = keys.length;
                                    while (++i < n) {
                                        x = keys[i];
                                        !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                                    }
                                    err = dest;
                                }
                                val = !!includeErrors && err || undefined;
                            }
                            errors[errors.length] = {
                                path: req,
                                value: err
                            };
                            err = undefined;
                        } else {
                            if (boxed === true) {
                                val = context;
                            } else if (contextValue != null && typeof contextValue === 'object') {
                                if (Array.isArray(contextValue)) {
                                    src = contextValue;
                                    dest = new Array(n = src.length);
                                    i = -1;
                                    while (++i < n) {
                                        dest[i] = src[i];
                                    }
                                    val = dest;
                                } else {
                                    dest = {};
                                    src = contextValue;
                                    keys = Object.keys(src);
                                    i = -1;
                                    n = keys.length;
                                    while (++i < n) {
                                        x = keys[i];
                                        !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                                    }
                                    val = dest;
                                }
                            } else {
                                val = contextValue;
                            }
                        }
                        do {
                            jsonKey = jsonKeys[jsonDepth];
                        } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                        if (jsonKey != null && jsonKey !== __NULL) {
                            json = jsons[jsonDepth - 1] || jsonCache;
                        } else {
                            json = jsonCache;
                        }
                        if (jsonKey != null && jsonKey !== __NULL) {
                            json[jsonKey] = val;
                        } else {
                            json = jsons[jsonDepth] = val;
                        }
                        if (!boxed && !!val && typeof val === 'object' && !Array.isArray(val)) {
                            val[$TYPE] = 'leaf';
                        }
                    }
                }
                for (; column > -1; --column) {
                    key = path[column];
                    if (key == null || typeof key !== 'object') {
                        continue;
                    }
                    isKeySet = true;
                    if (Array.isArray(key)) {
                        jsonDepth -= Number(jsonDepth > 0);
                        if (++key.index === key.length) {
                            key = key[key.index = 0];
                            if (key == null || typeof key !== 'object') {
                                continue;
                            }
                        } else {
                            break;
                        }
                    }
                    if (++key[__OFFSET] > (key.to || (key.to = key.from + (key.length || 1) - 1))) {
                        key[__OFFSET] = key.from;
                        continue;
                    }
                    jsonDepth -= Number(jsonDepth > 0);
                    break;
                }
            }
            path.column = column;
        }
    }
    json = jsons[-1];
    if (!!values) {
        values[0] = hasValues && { json: json } || undefined;
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setJSONGAsValues() {
    var returnBlocker;
    var generation, model, state, values, errorSelector, onNext, errors, boxed, includeErrors, refreshing, connected, root, contextCache, context, expired, expiredLength, boundPath, optimizedBoundPath, column, offset, jsonDepth, boundPathValue, contexts, requested, optimized, requestedPaths, optimizedPaths, requestedMissingPaths, optimizedMissingPaths, requestedPath, optimizedPath, jsongEnvelopes, messages, pbv, contextParent, index, count, paths, messageCache, messageParent, message, pathIndex, pathCount, refsByCols, path, pathSet, length, resetOptimizedDepth, reference, i, j, n, isKeySet, key, contextExpires, contextInvalidated, head, tail, next, prev, contextType, contextValue, contextTimestamp, messageType, messageValue, messageTimestamp, messageExpires, sizeOffset, branchKeyTmp, messageSize, contextRefsLength, messageRefsLength, contextLeafStack, contextLeafDepth, keyTmp, contextTmp, contextParentTmp, contextTypeTmp, referenceContext, contextLeaves, contextLeafKeys, contextLeafKey, originalMessageSize, contextSize, contextTmp2, generationStack, generationDepth, generationReferences, k, expandsCount, outermostColumn, outermostLength, outermostPath, refLen, refContainer, backRefs, src, dest, opt, req, reqLen, key2, optLen, err, keys, x, val;
    generation = __GENERATION_GENERATION++;
    model = arguments[0];
    state = arguments[1];
    values = arguments[2];
    errorSelector = arguments[3];
    if (typeof values === 'function') {
        onNext = values;
        values = undefined;
    }
    errors = state.errors || (state.errors = []);
    boxed = model._boxed;
    includeErrors = model._includeErrors;
    refreshing = model._refreshing;
    connected = model._connected;
    root = model._root;
    contextCache = context = model._cache;
    expired = root.expired;
    expiredLength = expired.length;
    boundPath = state.boundPath || model._path;
    optimizedBoundPath = [];
    column = state.column || (state.column = 0) - 1;
    offset = state.offset || (state.offset = 0);
    jsonDepth = state.jsonDepth || (state.jsonDepth = 0);
    boundPathValue = state.boundPathValue;
    contexts = state.contexts || (state.contexts = []);
    requested = state.requested || (state.requested = {});
    optimized = state.optimized || (state.optimized = {});
    requestedPaths = state.requestedPaths || (state.requestedPaths = []);
    optimizedPaths = state.optimizedPaths || (state.optimizedPaths = []);
    requestedMissingPaths = state.requestedMissingPaths || (state.requestedMissingPaths = []);
    optimizedMissingPaths = state.optimizedMissingPaths || (state.optimizedMissingPaths = []);
    requestedPath = state.requestedPath || (state.requestedPath = []);
    optimizedPath = state.optimizedPath || (state.optimizedPath = []);
    jsongEnvelopes = state;
    messages = state.messages || (state.messages = []);
    pbv = state.pbv || (state.pbv = {});
    pbv.path = requestedPath;
    !!values && (values.length = 0);
    contexts[column] = contextParent = context;
    messages = state.messages || (state.messages = []);
    index = 0;
    count = jsongEnvelopes.length;
    for (; index < count; ++index) {
        jsongEnvelope = jsongEnvelopes[index];
        paths = jsongEnvelope.paths;
        messages[-1] = messageCache = messageParent = message = jsongEnvelope.jsong;
        pathIndex = paths.index || (paths.index = 0);
        pathCount = paths.length;
        for (; pathIndex < pathCount; ++pathIndex) {
            pathSet = paths[pathIndex];
            offset = 0;
            refsByCols = state.refsByCols = [];
            refsByCols[-1] = optimizedBoundPath;
            path = pathSet;
            length = path.length - 1;
            column = path.column || (path.column = 0);
            while (column > -1) {
                resetOptimizedDepth = column;
                while (--resetOptimizedDepth >= -1) {
                    if (!!(reference = refsByCols[resetOptimizedDepth])) {
                        i = j = -1;
                        n = reference.length;
                        offset = n - ++resetOptimizedDepth;
                        while (++i < n) {
                            optimizedPath[++j] = reference[i];
                        }
                        while (resetOptimizedDepth < column) {
                            optimizedPath[++j] = requestedPath[resetOptimizedDepth++];
                        }
                        optimizedPath.length = offset + resetOptimizedDepth;
                        break;
                    }
                }
                messageParent = messages[column - 1];
                contextParent = contexts[column - 1];
                resolvePath:
                    do {
                        for (; column < length; ++column) {
                            key = path[column];
                            isKeySet = false;
                            if (key != null && typeof key === 'object') {
                                isKeySet = true;
                                if (Array.isArray(key)) {
                                    key = key[key.index || (key.index = 0)];
                                    if (key != null && typeof key === 'object') {
                                        key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                    }
                                } else {
                                    key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            }
                            requestedPath[requestedPath.length = column] = key;
                            if (key != null && key !== __NULL) {
                                optimizedPath[optimizedPath.length = column + offset] = key;
                                context = contextParent[key];
                                if (context != null) {
                                    if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                        contextInvalidated = context != null && context[__INVALIDATED];
                                        if (contextInvalidated === true === false) {
                                            context.__invalidated = true;
                                            context[$EXPIRES] = 0;
                                            expired[++expiredLength] = context;
                                            if (context != null && typeof context === 'object') {
                                                head = root.__head;
                                                tail = root.__tail;
                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                context === head && (root.__head = root.__next = head = next);
                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                context.__next = context.__prev = undefined;
                                                head = tail = next = prev = undefined;
                                            }
                                        }
                                        context = undefined;
                                    }
                                }
                                contextType = context != null && context[$TYPE];
                                contextValue = contextType === 'sentinel' ? context.value : context;
                                contextTimestamp = context != null && context[$TIMESTAMP];
                                message = messageParent && messageParent[key];
                                if (!(context != null) && !(message != null)) {
                                    break resolvePath;
                                }
                                messageType = message != null && message[$TYPE];
                                messageValue = messageType === 'sentinel' ? message.value : message;
                                messageTimestamp = message != null && message[$TIMESTAMP];
                                messageExpires = (message != null || null) && message[$EXPIRES];
                                if (!!((messageExpires = (message != null || null) && message[$EXPIRES]) != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < now())) === false) {
                                    if (context != null === false) {
                                        sizeOffset = 0;
                                        branchKeyTmp = key;
                                        messageSize = message != null && message[$SIZE] || 0;
                                        do {
                                            if (key != null && key !== __NULL) {
                                                if (context != null && context !== message) {
                                                    contextRefsLength = context.__refsLength || 0;
                                                    messageRefsLength = message.__refsLength || 0;
                                                    i = -1;
                                                    while (++i < contextRefsLength) {
                                                        if ((reference = context[__REF + i]) !== undefined) {
                                                            reference[__CONTEXT] = message;
                                                            message[__REF + (messageRefsLength + i)] = reference;
                                                            context[__REF + i] = undefined;
                                                        }
                                                    }
                                                    message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                    context[__REFS_LENGTH] = reference = undefined;
                                                    contextLeafStack = [];
                                                    contextLeafDepth = 0;
                                                    keyTmp = key;
                                                    contextTmp = context;
                                                    contextParentTmp = contextParent;
                                                    contextTypeTmp = contextType;
                                                    recursing:
                                                        while (contextLeafDepth > -1) {
                                                            if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                                contextRefsLength = context.__refsLength || 0;
                                                                i = -1;
                                                                while (++i < contextRefsLength) {
                                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                                        reference.__context = undefined;
                                                                        context[__REF + i] = undefined;
                                                                    }
                                                                }
                                                                context.__refsLength = undefined;
                                                                contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                    i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                    n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                    while (++i <= n) {
                                                                        referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                    }
                                                                    referenceContext[__REFS_LENGTH] = n;
                                                                    contextValue[__REF_INDEX] = undefined;
                                                                    contextValue[__CONTEXT] = undefined;
                                                                    referenceContext = undefined;
                                                                }
                                                                if (context != null && typeof context === 'object') {
                                                                    head = root.__head;
                                                                    tail = root.__tail;
                                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                    context === head && (root.__head = root.__next = head = next);
                                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                                    context.__next = context.__prev = undefined;
                                                                    head = tail = next = prev = undefined;
                                                                }
                                                                context = contextParent;
                                                                contextParent = contextLeaves && contextLeaves.parent;
                                                                contextLeafStack[contextLeafDepth--] = undefined;
                                                                contextType = context != null && context[$TYPE];
                                                                continue;
                                                            }
                                                            if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                contextLeafKeys = Object.keys(context);
                                                                contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                contextLeaves.parent = contextParent;
                                                                i = -1;
                                                                n = contextLeafKeys.length;
                                                                while (++i < n) {
                                                                    if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                        contextLeaves[i] = context[contextLeafKey];
                                                                    }
                                                                }
                                                            }
                                                            contextParent = context;
                                                            if (context = contextLeaves.pop()) {
                                                                contextLeafDepth++;
                                                                contextType = context != null && context[$TYPE];
                                                            } else {
                                                                contextType = 'leaf';
                                                                context = contextParent;
                                                                contextParent = contextLeaves.parent;
                                                            }
                                                            continue;
                                                        }
                                                    key = keyTmp;
                                                    context = contextTmp;
                                                    contextParent = contextParentTmp;
                                                    contextType = contextTypeTmp;
                                                    contextTmp = contextTypeTmp = undefined;
                                                    if (context != null && typeof context === 'object') {
                                                        head = root.__head;
                                                        tail = root.__tail;
                                                        (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                        (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                        context === head && (root.__head = root.__next = head = next);
                                                        context === tail && (root.__tail = root.__prev = tail = prev);
                                                        context.__next = context.__prev = undefined;
                                                        head = tail = next = prev = undefined;
                                                    }
                                                }
                                                message[$SIZE] = messageSize - sizeOffset;
                                                contextParent[key] = context = message;
                                                break;
                                            }
                                            context = contexts[--column];
                                            key = context[__KEY];
                                            contextParent = contexts[column - 1] || contextCache;
                                        } while (column > -1);
                                        context[__SELF] = context;
                                        context[__KEY] = key;
                                        context[__PARENT] = contextParent;
                                        context[__ROOT] = contextCache;
                                        if (context[__GENERATION] === undefined) {
                                            context[__GENERATION] = 0;
                                        }
                                        contextType = context != null && context[$TYPE];
                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                        key = branchKeyTmp;
                                    } else if (context !== message && ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) && ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue)) && (messageTimestamp < contextTimestamp || messageExpires === 0 && ((context = message) || true)) === false) {
                                        inserting:
                                            while (true) {
                                                i = 0;
                                                if ((i = contextValue.length) === messageValue.length) {
                                                    checking_refs:
                                                        while (--i > -1) {
                                                            if (contextValue[i] !== messageValue[i]) {
                                                                break checking_refs;
                                                            }
                                                        }
                                                    if (i === -1) {
                                                        break inserting;
                                                    }
                                                }
                                                branchKeyTmp = key;
                                                messageSize = message != null && message[$SIZE] || 0;
                                                originalMessageSize = messageSize || 0;
                                                if ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) {
                                                    messageType = 'array';
                                                    originalMessageSize = messageValue.length || 1;
                                                    messageSize = (messageType === 'sentinel' && 50 || 0) + originalMessageSize;
                                                    messageValue[__CONTAINER] = message;
                                                } else if (messageType === 'sentinel') {
                                                    messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                } else if (messageType === 'error') {
                                                    if (typeof errorSelector === 'function') {
                                                        message = Enumerable.errorSelector(message);
                                                    }
                                                    messageSize = 50 + originalMessageSize;
                                                } else if (messageValue == null || typeof messageValue !== 'object') {
                                                    originalMessageSize = typeof messageValue === 'string' && messageValue.length || 1;
                                                    messageSize = 50 + originalMessageSize;
                                                    messageType = 'sentinel';
                                                    message = {
                                                        '$type': messageType,
                                                        'value': messageValue
                                                    };
                                                } else {
                                                    messageSize = message[$SIZE] || 50 * 2;
                                                    messageType = message[$TYPE] = messageType || 'leaf';
                                                }
                                                message[$SIZE] = sizeOffset = messageSize;
                                                do {
                                                    if (key != null && key !== __NULL) {
                                                        if (context != null && context !== message) {
                                                            contextRefsLength = context.__refsLength || 0;
                                                            messageRefsLength = message.__refsLength || 0;
                                                            i = -1;
                                                            while (++i < contextRefsLength) {
                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                    reference[__CONTEXT] = message;
                                                                    message[__REF + (messageRefsLength + i)] = reference;
                                                                    context[__REF + i] = undefined;
                                                                }
                                                            }
                                                            message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                            context[__REFS_LENGTH] = reference = undefined;
                                                            contextLeafStack = [];
                                                            contextLeafDepth = 0;
                                                            keyTmp = key;
                                                            contextTmp = context;
                                                            contextParentTmp = contextParent;
                                                            contextTypeTmp = contextType;
                                                            recursing:
                                                                while (contextLeafDepth > -1) {
                                                                    if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                                                        contextRefsLength = context.__refsLength || 0;
                                                                        i = -1;
                                                                        while (++i < contextRefsLength) {
                                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                                reference.__context = undefined;
                                                                                context[__REF + i] = undefined;
                                                                            }
                                                                        }
                                                                        context.__refsLength = undefined;
                                                                        contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                        if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                            i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                            n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                            while (++i <= n) {
                                                                                referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                            }
                                                                            referenceContext[__REFS_LENGTH] = n;
                                                                            contextValue[__REF_INDEX] = undefined;
                                                                            contextValue[__CONTEXT] = undefined;
                                                                            referenceContext = undefined;
                                                                        }
                                                                        if (context != null && typeof context === 'object') {
                                                                            head = root.__head;
                                                                            tail = root.__tail;
                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                            context === head && (root.__head = root.__next = head = next);
                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                            context.__next = context.__prev = undefined;
                                                                            head = tail = next = prev = undefined;
                                                                        }
                                                                        context = contextParent;
                                                                        contextParent = contextLeaves && contextLeaves.parent;
                                                                        contextLeafStack[contextLeafDepth--] = undefined;
                                                                        contextType = context != null && context[$TYPE];
                                                                        continue;
                                                                    }
                                                                    if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                        contextLeafKeys = Object.keys(context);
                                                                        contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                        contextLeaves.parent = contextParent;
                                                                        i = -1;
                                                                        n = contextLeafKeys.length;
                                                                        while (++i < n) {
                                                                            if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                contextLeaves[i] = context[contextLeafKey];
                                                                            }
                                                                        }
                                                                    }
                                                                    contextParent = context;
                                                                    if (context = contextLeaves.pop()) {
                                                                        contextLeafDepth++;
                                                                        contextType = context != null && context[$TYPE];
                                                                    } else {
                                                                        contextType = 'leaf';
                                                                        context = contextParent;
                                                                        contextParent = contextLeaves.parent;
                                                                    }
                                                                    continue;
                                                                }
                                                            key = keyTmp;
                                                            context = contextTmp;
                                                            contextParent = contextParentTmp;
                                                            contextType = contextTypeTmp;
                                                            contextTmp = contextTypeTmp = undefined;
                                                            if (context != null && typeof context === 'object') {
                                                                head = root.__head;
                                                                tail = root.__tail;
                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                context === head && (root.__head = root.__next = head = next);
                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                context.__next = context.__prev = undefined;
                                                                head = tail = next = prev = undefined;
                                                            }
                                                        }
                                                        message[$SIZE] = messageSize - sizeOffset;
                                                        contextParent[key] = context = message;
                                                        break;
                                                    }
                                                    context = contexts[--column];
                                                    key = context[__KEY];
                                                    contextParent = contexts[column - 1] || contextCache;
                                                } while (column > -1);
                                                context[__SELF] = context;
                                                context[__KEY] = key;
                                                context[__PARENT] = contextParent;
                                                context[__ROOT] = contextCache;
                                                if (context[__GENERATION] === undefined) {
                                                    context[__GENERATION] = 0;
                                                }
                                                contextTmp = context;
                                                contextParentTmp = contextParent;
                                                while (context !== undefined) {
                                                    contextSize = context['$size'] = (context['$size'] || 0) + sizeOffset;
                                                    contextTmp2 = context;
                                                    if (context[__GENERATION_UPDATED] !== generation) {
                                                        generationStack = [];
                                                        generationDepth = 0;
                                                        while (generationDepth > -1) {
                                                            if ((generationReferences = generationStack[generationDepth]) === undefined) {
                                                                i = k = -1;
                                                                n = context[__REFS_LENGTH] || 0;
                                                                generationStack[generationDepth] = generationReferences = [];
                                                                context[__GENERATION_UPDATED] = generation;
                                                                context[__GENERATION] = (context[__GENERATION] || 0) + 1;
                                                                if ((reference = context[__PARENT]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                    generationReferences[++k] = reference;
                                                                }
                                                                while (++i < n) {
                                                                    if ((reference = context[__REF + i]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                        generationReferences[++k] = reference;
                                                                    }
                                                                }
                                                            }
                                                            if ((context = generationReferences.pop()) !== undefined) {
                                                                ++generationDepth;
                                                            } else {
                                                                generationStack[generationDepth--] = undefined;
                                                            }
                                                        }
                                                    }
                                                    reference = generationStack = generationReferences = undefined;
                                                    context = contextTmp2;
                                                    if ((contextParent = context[__PARENT]) !== undefined && contextSize <= 0) {
                                                        contextRefsLength = context.__refsLength || 0;
                                                        i = -1;
                                                        while (++i < contextRefsLength) {
                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                reference.__context = undefined;
                                                                context[__REF + i] = undefined;
                                                            }
                                                        }
                                                        context.__refsLength = undefined;
                                                        contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                        if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                            i = (contextValue[__REF_INDEX] || 0) - 1;
                                                            n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                            while (++i <= n) {
                                                                referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                            }
                                                            referenceContext[__REFS_LENGTH] = n;
                                                            contextValue[__REF_INDEX] = undefined;
                                                            contextValue[__CONTEXT] = undefined;
                                                            referenceContext = undefined;
                                                        }
                                                        if (context != null && typeof context === 'object') {
                                                            head = root.__head;
                                                            tail = root.__tail;
                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                            context === head && (root.__head = root.__next = head = next);
                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                            context.__next = context.__prev = undefined;
                                                            head = tail = next = prev = undefined;
                                                        }
                                                    }
                                                    context = contextParent;
                                                }
                                                context = contextTmp;
                                                contextParent = contextParentTmp;
                                                contextTmp = contextTmp2 = contextParentTmp = undefined;
                                                contextType = context != null && context[$TYPE];
                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                key = branchKeyTmp;
                                                break;
                                            }
                                    } else {
                                        context[__SELF] = context;
                                        context[__KEY] = key;
                                        context[__PARENT] = contextParent;
                                        context[__ROOT] = contextCache;
                                        if (context[__GENERATION] === undefined) {
                                            context[__GENERATION] = 0;
                                        }
                                    }
                                } else {
                                    context[__SELF] = context;
                                    context[__KEY] = key;
                                    context[__PARENT] = contextParent;
                                    context[__ROOT] = contextCache;
                                    if (context[__GENERATION] === undefined) {
                                        context[__GENERATION] = 0;
                                    }
                                }
                                branchKeyTmp = key;
                                if ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue)) {
                                    expandsCount = -1;
                                    refsByCols[outermostColumn = column] = contextValue;
                                    do {
                                        branchKeyTmp = key;
                                        if (false) {
                                        } else {
                                            message = messageCache;
                                            messageParent = messageCache;
                                            refsByCols[outermostColumn = column] = contextValue;
                                            outermostLength = length;
                                            outermostPath = path;
                                            offset = 0;
                                            column = -1;
                                            path = contextValue;
                                            length = path.length - 1;
                                            contextParent = contextCache;
                                            while (++column < length) {
                                                if ((key = path[column]) == null) {
                                                    continue;
                                                }
                                                optimizedPath[optimizedPath.length = column + offset] = key;
                                                context = contextParent[key];
                                                if (context != null) {
                                                    if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                        contextInvalidated = context != null && context[__INVALIDATED];
                                                        if (contextInvalidated === true === false) {
                                                            context.__invalidated = true;
                                                            context[$EXPIRES] = 0;
                                                            expired[++expiredLength] = context;
                                                            if (context != null && typeof context === 'object') {
                                                                head = root.__head;
                                                                tail = root.__tail;
                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                context === head && (root.__head = root.__next = head = next);
                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                context.__next = context.__prev = undefined;
                                                                head = tail = next = prev = undefined;
                                                            }
                                                        }
                                                        context = undefined;
                                                    }
                                                }
                                                contextType = context != null && context[$TYPE];
                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                contextTimestamp = context != null && context[$TIMESTAMP];
                                                message = messageParent && messageParent[key];
                                                if (!(context != null) && !(message != null)) {
                                                    break resolvePath;
                                                }
                                                messageType = message != null && message[$TYPE];
                                                messageValue = messageType === 'sentinel' ? message.value : message;
                                                messageTimestamp = message != null && message[$TIMESTAMP];
                                                messageExpires = (message != null || null) && message[$EXPIRES];
                                                if (!!((messageExpires = (message != null || null) && message[$EXPIRES]) != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < now())) === false) {
                                                    if (context != null === false) {
                                                        sizeOffset = 0;
                                                        branchKeyTmp = key;
                                                        messageSize = message != null && message[$SIZE] || 0;
                                                        do {
                                                            if (key != null && key !== __NULL) {
                                                                if (context != null && context !== message) {
                                                                    contextRefsLength = context.__refsLength || 0;
                                                                    messageRefsLength = message.__refsLength || 0;
                                                                    i = -1;
                                                                    while (++i < contextRefsLength) {
                                                                        if ((reference = context[__REF + i]) !== undefined) {
                                                                            reference[__CONTEXT] = message;
                                                                            message[__REF + (messageRefsLength + i)] = reference;
                                                                            context[__REF + i] = undefined;
                                                                        }
                                                                    }
                                                                    message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                                    context[__REFS_LENGTH] = reference = undefined;
                                                                    contextLeafStack = [];
                                                                    contextLeafDepth = 0;
                                                                    keyTmp = key;
                                                                    contextTmp = context;
                                                                    contextParentTmp = contextParent;
                                                                    contextTypeTmp = contextType;
                                                                    recursing:
                                                                        while (contextLeafDepth > -1) {
                                                                            if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                                                contextRefsLength = context.__refsLength || 0;
                                                                                i = -1;
                                                                                while (++i < contextRefsLength) {
                                                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                                                        reference.__context = undefined;
                                                                                        context[__REF + i] = undefined;
                                                                                    }
                                                                                }
                                                                                context.__refsLength = undefined;
                                                                                contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                                if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                    i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                    n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                    while (++i <= n) {
                                                                                        referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                    }
                                                                                    referenceContext[__REFS_LENGTH] = n;
                                                                                    contextValue[__REF_INDEX] = undefined;
                                                                                    contextValue[__CONTEXT] = undefined;
                                                                                    referenceContext = undefined;
                                                                                }
                                                                                if (context != null && typeof context === 'object') {
                                                                                    head = root.__head;
                                                                                    tail = root.__tail;
                                                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                    context === head && (root.__head = root.__next = head = next);
                                                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                    context.__next = context.__prev = undefined;
                                                                                    head = tail = next = prev = undefined;
                                                                                }
                                                                                context = contextParent;
                                                                                contextParent = contextLeaves && contextLeaves.parent;
                                                                                contextLeafStack[contextLeafDepth--] = undefined;
                                                                                contextType = context != null && context[$TYPE];
                                                                                continue;
                                                                            }
                                                                            if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                                contextLeafKeys = Object.keys(context);
                                                                                contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                                contextLeaves.parent = contextParent;
                                                                                i = -1;
                                                                                n = contextLeafKeys.length;
                                                                                while (++i < n) {
                                                                                    if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                        contextLeaves[i] = context[contextLeafKey];
                                                                                    }
                                                                                }
                                                                            }
                                                                            contextParent = context;
                                                                            if (context = contextLeaves.pop()) {
                                                                                contextLeafDepth++;
                                                                                contextType = context != null && context[$TYPE];
                                                                            } else {
                                                                                contextType = 'leaf';
                                                                                context = contextParent;
                                                                                contextParent = contextLeaves.parent;
                                                                            }
                                                                            continue;
                                                                        }
                                                                    key = keyTmp;
                                                                    context = contextTmp;
                                                                    contextParent = contextParentTmp;
                                                                    contextType = contextTypeTmp;
                                                                    contextTmp = contextTypeTmp = undefined;
                                                                    if (context != null && typeof context === 'object') {
                                                                        head = root.__head;
                                                                        tail = root.__tail;
                                                                        (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                        (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                        context === head && (root.__head = root.__next = head = next);
                                                                        context === tail && (root.__tail = root.__prev = tail = prev);
                                                                        context.__next = context.__prev = undefined;
                                                                        head = tail = next = prev = undefined;
                                                                    }
                                                                }
                                                                message[$SIZE] = messageSize - sizeOffset;
                                                                contextParent[key] = context = message;
                                                                break;
                                                            }
                                                            context = contexts[--column];
                                                            key = context[__KEY];
                                                            contextParent = contexts[column - 1] || contextCache;
                                                        } while (column > -1);
                                                        context[__SELF] = context;
                                                        context[__KEY] = key;
                                                        context[__PARENT] = contextParent;
                                                        context[__ROOT] = contextCache;
                                                        if (context[__GENERATION] === undefined) {
                                                            context[__GENERATION] = 0;
                                                        }
                                                        contextType = context != null && context[$TYPE];
                                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                                        key = branchKeyTmp;
                                                    } else if (context !== message && ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) && ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue)) && (messageTimestamp < contextTimestamp || messageExpires === 0 && ((context = message) || true)) === false) {
                                                        inserting:
                                                            while (true) {
                                                                i = 0;
                                                                if ((i = contextValue.length) === messageValue.length) {
                                                                    checking_refs:
                                                                        while (--i > -1) {
                                                                            if (contextValue[i] !== messageValue[i]) {
                                                                                break checking_refs;
                                                                            }
                                                                        }
                                                                    if (i === -1) {
                                                                        break inserting;
                                                                    }
                                                                }
                                                                branchKeyTmp = key;
                                                                messageSize = message != null && message[$SIZE] || 0;
                                                                originalMessageSize = messageSize || 0;
                                                                if ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) {
                                                                    messageType = 'array';
                                                                    originalMessageSize = messageValue.length || 1;
                                                                    messageSize = (messageType === 'sentinel' && 50 || 0) + originalMessageSize;
                                                                    messageValue[__CONTAINER] = message;
                                                                } else if (messageType === 'sentinel') {
                                                                    messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                                } else if (messageType === 'error') {
                                                                    if (typeof errorSelector === 'function') {
                                                                        message = Enumerable.errorSelector(message);
                                                                    }
                                                                    messageSize = 50 + originalMessageSize;
                                                                } else if (messageValue == null || typeof messageValue !== 'object') {
                                                                    originalMessageSize = typeof messageValue === 'string' && messageValue.length || 1;
                                                                    messageSize = 50 + originalMessageSize;
                                                                    messageType = 'sentinel';
                                                                    message = {
                                                                        '$type': messageType,
                                                                        'value': messageValue
                                                                    };
                                                                } else {
                                                                    messageSize = message[$SIZE] || 50 * 2;
                                                                    messageType = message[$TYPE] = messageType || 'leaf';
                                                                }
                                                                message[$SIZE] = sizeOffset = messageSize;
                                                                do {
                                                                    if (key != null && key !== __NULL) {
                                                                        if (context != null && context !== message) {
                                                                            contextRefsLength = context.__refsLength || 0;
                                                                            messageRefsLength = message.__refsLength || 0;
                                                                            i = -1;
                                                                            while (++i < contextRefsLength) {
                                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                                    reference[__CONTEXT] = message;
                                                                                    message[__REF + (messageRefsLength + i)] = reference;
                                                                                    context[__REF + i] = undefined;
                                                                                }
                                                                            }
                                                                            message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                                            context[__REFS_LENGTH] = reference = undefined;
                                                                            contextLeafStack = [];
                                                                            contextLeafDepth = 0;
                                                                            keyTmp = key;
                                                                            contextTmp = context;
                                                                            contextParentTmp = contextParent;
                                                                            contextTypeTmp = contextType;
                                                                            recursing:
                                                                                while (contextLeafDepth > -1) {
                                                                                    if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                                                                        contextRefsLength = context.__refsLength || 0;
                                                                                        i = -1;
                                                                                        while (++i < contextRefsLength) {
                                                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                                                reference.__context = undefined;
                                                                                                context[__REF + i] = undefined;
                                                                                            }
                                                                                        }
                                                                                        context.__refsLength = undefined;
                                                                                        contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                                        if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                            i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                            n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                            while (++i <= n) {
                                                                                                referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                            }
                                                                                            referenceContext[__REFS_LENGTH] = n;
                                                                                            contextValue[__REF_INDEX] = undefined;
                                                                                            contextValue[__CONTEXT] = undefined;
                                                                                            referenceContext = undefined;
                                                                                        }
                                                                                        if (context != null && typeof context === 'object') {
                                                                                            head = root.__head;
                                                                                            tail = root.__tail;
                                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                            context === head && (root.__head = root.__next = head = next);
                                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                            context.__next = context.__prev = undefined;
                                                                                            head = tail = next = prev = undefined;
                                                                                        }
                                                                                        context = contextParent;
                                                                                        contextParent = contextLeaves && contextLeaves.parent;
                                                                                        contextLeafStack[contextLeafDepth--] = undefined;
                                                                                        contextType = context != null && context[$TYPE];
                                                                                        continue;
                                                                                    }
                                                                                    if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                                        contextLeafKeys = Object.keys(context);
                                                                                        contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                                        contextLeaves.parent = contextParent;
                                                                                        i = -1;
                                                                                        n = contextLeafKeys.length;
                                                                                        while (++i < n) {
                                                                                            if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                                contextLeaves[i] = context[contextLeafKey];
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    contextParent = context;
                                                                                    if (context = contextLeaves.pop()) {
                                                                                        contextLeafDepth++;
                                                                                        contextType = context != null && context[$TYPE];
                                                                                    } else {
                                                                                        contextType = 'leaf';
                                                                                        context = contextParent;
                                                                                        contextParent = contextLeaves.parent;
                                                                                    }
                                                                                    continue;
                                                                                }
                                                                            key = keyTmp;
                                                                            context = contextTmp;
                                                                            contextParent = contextParentTmp;
                                                                            contextType = contextTypeTmp;
                                                                            contextTmp = contextTypeTmp = undefined;
                                                                            if (context != null && typeof context === 'object') {
                                                                                head = root.__head;
                                                                                tail = root.__tail;
                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                context.__next = context.__prev = undefined;
                                                                                head = tail = next = prev = undefined;
                                                                            }
                                                                        }
                                                                        message[$SIZE] = messageSize - sizeOffset;
                                                                        contextParent[key] = context = message;
                                                                        break;
                                                                    }
                                                                    context = contexts[--column];
                                                                    key = context[__KEY];
                                                                    contextParent = contexts[column - 1] || contextCache;
                                                                } while (column > -1);
                                                                context[__SELF] = context;
                                                                context[__KEY] = key;
                                                                context[__PARENT] = contextParent;
                                                                context[__ROOT] = contextCache;
                                                                if (context[__GENERATION] === undefined) {
                                                                    context[__GENERATION] = 0;
                                                                }
                                                                contextTmp = context;
                                                                contextParentTmp = contextParent;
                                                                while (context !== undefined) {
                                                                    contextSize = context['$size'] = (context['$size'] || 0) + sizeOffset;
                                                                    contextTmp2 = context;
                                                                    if (context[__GENERATION_UPDATED] !== generation) {
                                                                        generationStack = [];
                                                                        generationDepth = 0;
                                                                        while (generationDepth > -1) {
                                                                            if ((generationReferences = generationStack[generationDepth]) === undefined) {
                                                                                i = k = -1;
                                                                                n = context[__REFS_LENGTH] || 0;
                                                                                generationStack[generationDepth] = generationReferences = [];
                                                                                context[__GENERATION_UPDATED] = generation;
                                                                                context[__GENERATION] = (context[__GENERATION] || 0) + 1;
                                                                                if ((reference = context[__PARENT]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                                    generationReferences[++k] = reference;
                                                                                }
                                                                                while (++i < n) {
                                                                                    if ((reference = context[__REF + i]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                                        generationReferences[++k] = reference;
                                                                                    }
                                                                                }
                                                                            }
                                                                            if ((context = generationReferences.pop()) !== undefined) {
                                                                                ++generationDepth;
                                                                            } else {
                                                                                generationStack[generationDepth--] = undefined;
                                                                            }
                                                                        }
                                                                    }
                                                                    reference = generationStack = generationReferences = undefined;
                                                                    context = contextTmp2;
                                                                    if ((contextParent = context[__PARENT]) !== undefined && contextSize <= 0) {
                                                                        contextRefsLength = context.__refsLength || 0;
                                                                        i = -1;
                                                                        while (++i < contextRefsLength) {
                                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                                reference.__context = undefined;
                                                                                context[__REF + i] = undefined;
                                                                            }
                                                                        }
                                                                        context.__refsLength = undefined;
                                                                        contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                        if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                            i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                            n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                            while (++i <= n) {
                                                                                referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                            }
                                                                            referenceContext[__REFS_LENGTH] = n;
                                                                            contextValue[__REF_INDEX] = undefined;
                                                                            contextValue[__CONTEXT] = undefined;
                                                                            referenceContext = undefined;
                                                                        }
                                                                        if (context != null && typeof context === 'object') {
                                                                            head = root.__head;
                                                                            tail = root.__tail;
                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                            context === head && (root.__head = root.__next = head = next);
                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                            context.__next = context.__prev = undefined;
                                                                            head = tail = next = prev = undefined;
                                                                        }
                                                                    }
                                                                    context = contextParent;
                                                                }
                                                                context = contextTmp;
                                                                contextParent = contextParentTmp;
                                                                contextTmp = contextTmp2 = contextParentTmp = undefined;
                                                                contextType = context != null && context[$TYPE];
                                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                                key = branchKeyTmp;
                                                                break;
                                                            }
                                                    } else {
                                                        context[__SELF] = context;
                                                        context[__KEY] = key;
                                                        context[__PARENT] = contextParent;
                                                        context[__ROOT] = contextCache;
                                                        if (context[__GENERATION] === undefined) {
                                                            context[__GENERATION] = 0;
                                                        }
                                                    }
                                                } else {
                                                    context[__SELF] = context;
                                                    context[__KEY] = key;
                                                    context[__PARENT] = contextParent;
                                                    context[__ROOT] = contextCache;
                                                    if (context[__GENERATION] === undefined) {
                                                        context[__GENERATION] = 0;
                                                    }
                                                }
                                                contextParent = context;
                                                messageParent = message;
                                                if (context === undefined) {
                                                    i = -1;
                                                    refLen = path.length;
                                                    offset = refLen - column - 1;
                                                    optimizedPath.length = refLen;
                                                    while (++i < refLen) {
                                                        optimizedPath[i] = path[i];
                                                    }
                                                    break;
                                                } else if (!!contextType || Array.isArray(contextValue)) {
                                                    break;
                                                }
                                                contextParent = context;
                                            }
                                            if (column === length) {
                                                if ((key = path[column]) != null) {
                                                    optimizedPath[optimizedPath.length = column + offset] = key;
                                                    context = contextParent[key];
                                                    if (context != null) {
                                                        if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                            contextInvalidated = context != null && context[__INVALIDATED];
                                                            if (contextInvalidated === true === false) {
                                                                context.__invalidated = true;
                                                                context[$EXPIRES] = 0;
                                                                expired[++expiredLength] = context;
                                                                if (context != null && typeof context === 'object') {
                                                                    head = root.__head;
                                                                    tail = root.__tail;
                                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                    context === head && (root.__head = root.__next = head = next);
                                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                                    context.__next = context.__prev = undefined;
                                                                    head = tail = next = prev = undefined;
                                                                }
                                                            }
                                                            context = undefined;
                                                        }
                                                    }
                                                    contextType = context != null && context[$TYPE];
                                                    contextValue = contextType === 'sentinel' ? context.value : context;
                                                    contextTimestamp = context != null && context[$TIMESTAMP];
                                                    message = messageParent && messageParent[key];
                                                    if (!(context != null) && !(message != null)) {
                                                        break resolvePath;
                                                    }
                                                    messageType = message != null && message[$TYPE];
                                                    messageValue = messageType === 'sentinel' ? message.value : message;
                                                    messageTimestamp = message != null && message[$TIMESTAMP];
                                                    messageExpires = (message != null || null) && message[$EXPIRES];
                                                    if (!!((messageExpires = (message != null || null) && message[$EXPIRES]) != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < now())) === false) {
                                                        if (context != null === false) {
                                                            sizeOffset = 0;
                                                            branchKeyTmp = key;
                                                            messageSize = message != null && message[$SIZE] || 0;
                                                            do {
                                                                if (key != null && key !== __NULL) {
                                                                    if (context != null && context !== message) {
                                                                        contextRefsLength = context.__refsLength || 0;
                                                                        messageRefsLength = message.__refsLength || 0;
                                                                        i = -1;
                                                                        while (++i < contextRefsLength) {
                                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                                reference[__CONTEXT] = message;
                                                                                message[__REF + (messageRefsLength + i)] = reference;
                                                                                context[__REF + i] = undefined;
                                                                            }
                                                                        }
                                                                        message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                                        context[__REFS_LENGTH] = reference = undefined;
                                                                        contextLeafStack = [];
                                                                        contextLeafDepth = 0;
                                                                        keyTmp = key;
                                                                        contextTmp = context;
                                                                        contextParentTmp = contextParent;
                                                                        contextTypeTmp = contextType;
                                                                        recursing:
                                                                            while (contextLeafDepth > -1) {
                                                                                if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                                    contextValue = contextType === 'sentinel' ? context.value : context;
                                                                                    contextRefsLength = context.__refsLength || 0;
                                                                                    i = -1;
                                                                                    while (++i < contextRefsLength) {
                                                                                        if ((reference = context[__REF + i]) !== undefined) {
                                                                                            reference.__context = undefined;
                                                                                            context[__REF + i] = undefined;
                                                                                        }
                                                                                    }
                                                                                    context.__refsLength = undefined;
                                                                                    contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                                    if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                        i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                        n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                        while (++i <= n) {
                                                                                            referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                        }
                                                                                        referenceContext[__REFS_LENGTH] = n;
                                                                                        contextValue[__REF_INDEX] = undefined;
                                                                                        contextValue[__CONTEXT] = undefined;
                                                                                        referenceContext = undefined;
                                                                                    }
                                                                                    if (context != null && typeof context === 'object') {
                                                                                        head = root.__head;
                                                                                        tail = root.__tail;
                                                                                        (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                        (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                        context === head && (root.__head = root.__next = head = next);
                                                                                        context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                        context.__next = context.__prev = undefined;
                                                                                        head = tail = next = prev = undefined;
                                                                                    }
                                                                                    context = contextParent;
                                                                                    contextParent = contextLeaves && contextLeaves.parent;
                                                                                    contextLeafStack[contextLeafDepth--] = undefined;
                                                                                    contextType = context != null && context[$TYPE];
                                                                                    continue;
                                                                                }
                                                                                if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                                    contextLeafKeys = Object.keys(context);
                                                                                    contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                                    contextLeaves.parent = contextParent;
                                                                                    i = -1;
                                                                                    n = contextLeafKeys.length;
                                                                                    while (++i < n) {
                                                                                        if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                            contextLeaves[i] = context[contextLeafKey];
                                                                                        }
                                                                                    }
                                                                                }
                                                                                contextParent = context;
                                                                                if (context = contextLeaves.pop()) {
                                                                                    contextLeafDepth++;
                                                                                    contextType = context != null && context[$TYPE];
                                                                                } else {
                                                                                    contextType = 'leaf';
                                                                                    context = contextParent;
                                                                                    contextParent = contextLeaves.parent;
                                                                                }
                                                                                continue;
                                                                            }
                                                                        key = keyTmp;
                                                                        context = contextTmp;
                                                                        contextParent = contextParentTmp;
                                                                        contextType = contextTypeTmp;
                                                                        contextTmp = contextTypeTmp = undefined;
                                                                        if (context != null && typeof context === 'object') {
                                                                            head = root.__head;
                                                                            tail = root.__tail;
                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                            context === head && (root.__head = root.__next = head = next);
                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                            context.__next = context.__prev = undefined;
                                                                            head = tail = next = prev = undefined;
                                                                        }
                                                                    }
                                                                    message[$SIZE] = messageSize - sizeOffset;
                                                                    contextParent[key] = context = message;
                                                                    break;
                                                                }
                                                                context = contexts[--column];
                                                                key = context[__KEY];
                                                                contextParent = contexts[column - 1] || contextCache;
                                                            } while (column > -1);
                                                            context[__SELF] = context;
                                                            context[__KEY] = key;
                                                            context[__PARENT] = contextParent;
                                                            context[__ROOT] = contextCache;
                                                            if (context[__GENERATION] === undefined) {
                                                                context[__GENERATION] = 0;
                                                            }
                                                            contextType = context != null && context[$TYPE];
                                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                                            key = branchKeyTmp;
                                                        } else if (context !== message && ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) && ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue)) && (messageTimestamp < contextTimestamp || messageExpires === 0 && ((context = message) || true)) === false) {
                                                            inserting:
                                                                while (true) {
                                                                    i = 0;
                                                                    if ((i = contextValue.length) === messageValue.length) {
                                                                        checking_refs:
                                                                            while (--i > -1) {
                                                                                if (contextValue[i] !== messageValue[i]) {
                                                                                    break checking_refs;
                                                                                }
                                                                            }
                                                                        if (i === -1) {
                                                                            break inserting;
                                                                        }
                                                                    }
                                                                    branchKeyTmp = key;
                                                                    messageSize = message != null && message[$SIZE] || 0;
                                                                    originalMessageSize = messageSize || 0;
                                                                    if ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) {
                                                                        messageType = 'array';
                                                                        originalMessageSize = messageValue.length || 1;
                                                                        messageSize = (messageType === 'sentinel' && 50 || 0) + originalMessageSize;
                                                                        messageValue[__CONTAINER] = message;
                                                                    } else if (messageType === 'sentinel') {
                                                                        messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                                    } else if (messageType === 'error') {
                                                                        if (typeof errorSelector === 'function') {
                                                                            message = Enumerable.errorSelector(message);
                                                                        }
                                                                        messageSize = 50 + originalMessageSize;
                                                                    } else if (messageValue == null || typeof messageValue !== 'object') {
                                                                        originalMessageSize = typeof messageValue === 'string' && messageValue.length || 1;
                                                                        messageSize = 50 + originalMessageSize;
                                                                        messageType = 'sentinel';
                                                                        message = {
                                                                            '$type': messageType,
                                                                            'value': messageValue
                                                                        };
                                                                    } else {
                                                                        messageSize = message[$SIZE] || 50 * 2;
                                                                        messageType = message[$TYPE] = messageType || 'leaf';
                                                                    }
                                                                    message[$SIZE] = sizeOffset = messageSize;
                                                                    do {
                                                                        if (key != null && key !== __NULL) {
                                                                            if (context != null && context !== message) {
                                                                                contextRefsLength = context.__refsLength || 0;
                                                                                messageRefsLength = message.__refsLength || 0;
                                                                                i = -1;
                                                                                while (++i < contextRefsLength) {
                                                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                                                        reference[__CONTEXT] = message;
                                                                                        message[__REF + (messageRefsLength + i)] = reference;
                                                                                        context[__REF + i] = undefined;
                                                                                    }
                                                                                }
                                                                                message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                                                context[__REFS_LENGTH] = reference = undefined;
                                                                                contextLeafStack = [];
                                                                                contextLeafDepth = 0;
                                                                                keyTmp = key;
                                                                                contextTmp = context;
                                                                                contextParentTmp = contextParent;
                                                                                contextTypeTmp = contextType;
                                                                                recursing:
                                                                                    while (contextLeafDepth > -1) {
                                                                                        if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                                                                            contextRefsLength = context.__refsLength || 0;
                                                                                            i = -1;
                                                                                            while (++i < contextRefsLength) {
                                                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                                                    reference.__context = undefined;
                                                                                                    context[__REF + i] = undefined;
                                                                                                }
                                                                                            }
                                                                                            context.__refsLength = undefined;
                                                                                            contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                                            if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                                i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                                n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                                while (++i <= n) {
                                                                                                    referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                                }
                                                                                                referenceContext[__REFS_LENGTH] = n;
                                                                                                contextValue[__REF_INDEX] = undefined;
                                                                                                contextValue[__CONTEXT] = undefined;
                                                                                                referenceContext = undefined;
                                                                                            }
                                                                                            if (context != null && typeof context === 'object') {
                                                                                                head = root.__head;
                                                                                                tail = root.__tail;
                                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                                context.__next = context.__prev = undefined;
                                                                                                head = tail = next = prev = undefined;
                                                                                            }
                                                                                            context = contextParent;
                                                                                            contextParent = contextLeaves && contextLeaves.parent;
                                                                                            contextLeafStack[contextLeafDepth--] = undefined;
                                                                                            contextType = context != null && context[$TYPE];
                                                                                            continue;
                                                                                        }
                                                                                        if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                                            contextLeafKeys = Object.keys(context);
                                                                                            contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                                            contextLeaves.parent = contextParent;
                                                                                            i = -1;
                                                                                            n = contextLeafKeys.length;
                                                                                            while (++i < n) {
                                                                                                if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                                    contextLeaves[i] = context[contextLeafKey];
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        contextParent = context;
                                                                                        if (context = contextLeaves.pop()) {
                                                                                            contextLeafDepth++;
                                                                                            contextType = context != null && context[$TYPE];
                                                                                        } else {
                                                                                            contextType = 'leaf';
                                                                                            context = contextParent;
                                                                                            contextParent = contextLeaves.parent;
                                                                                        }
                                                                                        continue;
                                                                                    }
                                                                                key = keyTmp;
                                                                                context = contextTmp;
                                                                                contextParent = contextParentTmp;
                                                                                contextType = contextTypeTmp;
                                                                                contextTmp = contextTypeTmp = undefined;
                                                                                if (context != null && typeof context === 'object') {
                                                                                    head = root.__head;
                                                                                    tail = root.__tail;
                                                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                    context === head && (root.__head = root.__next = head = next);
                                                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                    context.__next = context.__prev = undefined;
                                                                                    head = tail = next = prev = undefined;
                                                                                }
                                                                            }
                                                                            message[$SIZE] = messageSize - sizeOffset;
                                                                            contextParent[key] = context = message;
                                                                            break;
                                                                        }
                                                                        context = contexts[--column];
                                                                        key = context[__KEY];
                                                                        contextParent = contexts[column - 1] || contextCache;
                                                                    } while (column > -1);
                                                                    context[__SELF] = context;
                                                                    context[__KEY] = key;
                                                                    context[__PARENT] = contextParent;
                                                                    context[__ROOT] = contextCache;
                                                                    if (context[__GENERATION] === undefined) {
                                                                        context[__GENERATION] = 0;
                                                                    }
                                                                    contextTmp = context;
                                                                    contextParentTmp = contextParent;
                                                                    while (context !== undefined) {
                                                                        contextSize = context['$size'] = (context['$size'] || 0) + sizeOffset;
                                                                        contextTmp2 = context;
                                                                        if (context[__GENERATION_UPDATED] !== generation) {
                                                                            generationStack = [];
                                                                            generationDepth = 0;
                                                                            while (generationDepth > -1) {
                                                                                if ((generationReferences = generationStack[generationDepth]) === undefined) {
                                                                                    i = k = -1;
                                                                                    n = context[__REFS_LENGTH] || 0;
                                                                                    generationStack[generationDepth] = generationReferences = [];
                                                                                    context[__GENERATION_UPDATED] = generation;
                                                                                    context[__GENERATION] = (context[__GENERATION] || 0) + 1;
                                                                                    if ((reference = context[__PARENT]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                                        generationReferences[++k] = reference;
                                                                                    }
                                                                                    while (++i < n) {
                                                                                        if ((reference = context[__REF + i]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                                            generationReferences[++k] = reference;
                                                                                        }
                                                                                    }
                                                                                }
                                                                                if ((context = generationReferences.pop()) !== undefined) {
                                                                                    ++generationDepth;
                                                                                } else {
                                                                                    generationStack[generationDepth--] = undefined;
                                                                                }
                                                                            }
                                                                        }
                                                                        reference = generationStack = generationReferences = undefined;
                                                                        context = contextTmp2;
                                                                        if ((contextParent = context[__PARENT]) !== undefined && contextSize <= 0) {
                                                                            contextRefsLength = context.__refsLength || 0;
                                                                            i = -1;
                                                                            while (++i < contextRefsLength) {
                                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                                    reference.__context = undefined;
                                                                                    context[__REF + i] = undefined;
                                                                                }
                                                                            }
                                                                            context.__refsLength = undefined;
                                                                            contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                            if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                while (++i <= n) {
                                                                                    referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                }
                                                                                referenceContext[__REFS_LENGTH] = n;
                                                                                contextValue[__REF_INDEX] = undefined;
                                                                                contextValue[__CONTEXT] = undefined;
                                                                                referenceContext = undefined;
                                                                            }
                                                                            if (context != null && typeof context === 'object') {
                                                                                head = root.__head;
                                                                                tail = root.__tail;
                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                context.__next = context.__prev = undefined;
                                                                                head = tail = next = prev = undefined;
                                                                            }
                                                                        }
                                                                        context = contextParent;
                                                                    }
                                                                    context = contextTmp;
                                                                    contextParent = contextParentTmp;
                                                                    contextTmp = contextTmp2 = contextParentTmp = undefined;
                                                                    contextType = context != null && context[$TYPE];
                                                                    contextValue = contextType === 'sentinel' ? context.value : context;
                                                                    key = branchKeyTmp;
                                                                    break;
                                                                }
                                                        } else {
                                                            context[__SELF] = context;
                                                            context[__KEY] = key;
                                                            context[__PARENT] = contextParent;
                                                            context[__ROOT] = contextCache;
                                                            if (context[__GENERATION] === undefined) {
                                                                context[__GENERATION] = 0;
                                                            }
                                                        }
                                                    } else {
                                                        context[__SELF] = context;
                                                        context[__KEY] = key;
                                                        context[__PARENT] = contextParent;
                                                        context[__ROOT] = contextCache;
                                                        if (context[__GENERATION] === undefined) {
                                                            context[__GENERATION] = 0;
                                                        }
                                                    }
                                                    contextParent = context;
                                                    messageParent = message;
                                                }
                                                if (context != null) {
                                                    if ((refContainer = path[__CONTAINER] || path).__context === undefined) {
                                                        backRefs = context.__refsLength || 0;
                                                        context['__ref' + backRefs] = refContainer;
                                                        context.__refsLength = backRefs + 1;
                                                        refContainer.__refIndex = backRefs;
                                                        refContainer.__context = context;
                                                        refContainer = backRefs = undefined;
                                                    }
                                                }
                                            }
                                            expandsCount = Number(contextType === 'error') - 1;
                                            column = outermostColumn;
                                            path = outermostPath;
                                            offset = length - column;
                                            length = outermostLength;
                                            key = branchKeyTmp;
                                            outermostColumn = undefined;
                                            outermostPath = undefined;
                                            outermostLength = undefined;
                                            branchKeyTmp = undefined;
                                        }
                                    } while ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue));
                                } else if (!!contextType) {
                                    break resolvePath;
                                }
                                key = branchKeyTmp;
                                contexts[column] = contextParent = context;
                                messages[column] = messageParent = message;
                            }
                        }
                        if (column === length) {
                            key = path[column];
                            isKeySet = false;
                            if (key != null && typeof key === 'object') {
                                isKeySet = true;
                                if (Array.isArray(key)) {
                                    key = key[key.index || (key.index = 0)];
                                    if (key != null && typeof key === 'object') {
                                        key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                    }
                                } else {
                                    key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            }
                            requestedPath[requestedPath.length = column] = key;
                            if (key != null && key !== __NULL) {
                                optimizedPath[optimizedPath.length = column + offset] = key;
                                context = contextParent[key];
                                if (context != null) {
                                    if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                        contextInvalidated = context != null && context[__INVALIDATED];
                                        if (contextInvalidated === true === false) {
                                            context.__invalidated = true;
                                            context[$EXPIRES] = 0;
                                            expired[++expiredLength] = context;
                                            if (context != null && typeof context === 'object') {
                                                head = root.__head;
                                                tail = root.__tail;
                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                context === head && (root.__head = root.__next = head = next);
                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                context.__next = context.__prev = undefined;
                                                head = tail = next = prev = undefined;
                                            }
                                        }
                                        context = undefined;
                                    }
                                }
                                contextType = context != null && context[$TYPE];
                                contextValue = contextType === 'sentinel' ? context.value : context;
                                contextTimestamp = context != null && context[$TIMESTAMP];
                                message = messageParent && messageParent[key];
                                if (!(context != null) && !(message != null)) {
                                    break resolvePath;
                                }
                                messageType = message != null && message[$TYPE];
                                messageValue = messageType === 'sentinel' ? message.value : message;
                                messageTimestamp = message != null && message[$TIMESTAMP];
                                messageExpires = (message != null || null) && message[$EXPIRES];
                                if ((messageTimestamp < contextTimestamp || messageExpires === 0 && ((context = message) || true)) === false === true) {
                                    messageSize = message != null && message[$SIZE] || 0;
                                    originalMessageSize = messageSize || 0;
                                    if ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) {
                                        messageType = 'array';
                                        originalMessageSize = messageValue.length || 1;
                                        messageSize = (messageType === 'sentinel' && 50 || 0) + originalMessageSize;
                                        messageValue[__CONTAINER] = message;
                                    } else if (messageType === 'sentinel') {
                                        messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                    } else if (messageType === 'error') {
                                        if (typeof errorSelector === 'function') {
                                            message = Enumerable.errorSelector(message);
                                        }
                                        messageSize = 50 + originalMessageSize;
                                    } else if (messageValue == null || typeof messageValue !== 'object') {
                                        originalMessageSize = typeof messageValue === 'string' && messageValue.length || 1;
                                        messageSize = 50 + originalMessageSize;
                                        messageType = 'sentinel';
                                        message = {
                                            '$type': messageType,
                                            'value': messageValue
                                        };
                                    } else {
                                        messageSize = message[$SIZE] || 50 * 2;
                                        messageType = message[$TYPE] = messageType || 'leaf';
                                    }
                                    message[$SIZE] = sizeOffset = messageSize;
                                    if (!!((messageExpires = (message != null || null) && message[$EXPIRES]) != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < now())) === false) {
                                        messageSize = message != null && message[$SIZE] || 0;
                                        do {
                                            if (key != null && key !== __NULL) {
                                                if (context != null && context !== message) {
                                                    contextRefsLength = context.__refsLength || 0;
                                                    messageRefsLength = message.__refsLength || 0;
                                                    i = -1;
                                                    while (++i < contextRefsLength) {
                                                        if ((reference = context[__REF + i]) !== undefined) {
                                                            reference[__CONTEXT] = message;
                                                            message[__REF + (messageRefsLength + i)] = reference;
                                                            context[__REF + i] = undefined;
                                                        }
                                                    }
                                                    message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                    context[__REFS_LENGTH] = reference = undefined;
                                                    contextLeafStack = [];
                                                    contextLeafDepth = 0;
                                                    keyTmp = key;
                                                    contextTmp = context;
                                                    contextParentTmp = contextParent;
                                                    contextTypeTmp = contextType;
                                                    recursing:
                                                        while (contextLeafDepth > -1) {
                                                            if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                                contextRefsLength = context.__refsLength || 0;
                                                                i = -1;
                                                                while (++i < contextRefsLength) {
                                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                                        reference.__context = undefined;
                                                                        context[__REF + i] = undefined;
                                                                    }
                                                                }
                                                                context.__refsLength = undefined;
                                                                contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                    i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                    n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                    while (++i <= n) {
                                                                        referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                    }
                                                                    referenceContext[__REFS_LENGTH] = n;
                                                                    contextValue[__REF_INDEX] = undefined;
                                                                    contextValue[__CONTEXT] = undefined;
                                                                    referenceContext = undefined;
                                                                }
                                                                if (context != null && typeof context === 'object') {
                                                                    head = root.__head;
                                                                    tail = root.__tail;
                                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                    context === head && (root.__head = root.__next = head = next);
                                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                                    context.__next = context.__prev = undefined;
                                                                    head = tail = next = prev = undefined;
                                                                }
                                                                context = contextParent;
                                                                contextParent = contextLeaves && contextLeaves.parent;
                                                                contextLeafStack[contextLeafDepth--] = undefined;
                                                                contextType = context != null && context[$TYPE];
                                                                continue;
                                                            }
                                                            if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                contextLeafKeys = Object.keys(context);
                                                                contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                contextLeaves.parent = contextParent;
                                                                i = -1;
                                                                n = contextLeafKeys.length;
                                                                while (++i < n) {
                                                                    if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                        contextLeaves[i] = context[contextLeafKey];
                                                                    }
                                                                }
                                                            }
                                                            contextParent = context;
                                                            if (context = contextLeaves.pop()) {
                                                                contextLeafDepth++;
                                                                contextType = context != null && context[$TYPE];
                                                            } else {
                                                                contextType = 'leaf';
                                                                context = contextParent;
                                                                contextParent = contextLeaves.parent;
                                                            }
                                                            continue;
                                                        }
                                                    key = keyTmp;
                                                    context = contextTmp;
                                                    contextParent = contextParentTmp;
                                                    contextType = contextTypeTmp;
                                                    contextTmp = contextTypeTmp = undefined;
                                                    if (context != null && typeof context === 'object') {
                                                        head = root.__head;
                                                        tail = root.__tail;
                                                        (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                        (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                        context === head && (root.__head = root.__next = head = next);
                                                        context === tail && (root.__tail = root.__prev = tail = prev);
                                                        context.__next = context.__prev = undefined;
                                                        head = tail = next = prev = undefined;
                                                    }
                                                }
                                                message[$SIZE] = messageSize - sizeOffset;
                                                contextParent[key] = context = message;
                                                break;
                                            }
                                            context = contexts[--column];
                                            key = context[__KEY];
                                            contextParent = contexts[column - 1] || contextCache;
                                        } while (column > -1);
                                        context[__SELF] = context;
                                        context[__KEY] = key;
                                        context[__PARENT] = contextParent;
                                        context[__ROOT] = contextCache;
                                        if (context[__GENERATION] === undefined) {
                                            context[__GENERATION] = 0;
                                        }
                                        contextTmp = context;
                                        contextParentTmp = contextParent;
                                        while (context !== undefined) {
                                            contextSize = context['$size'] = (context['$size'] || 0) + sizeOffset;
                                            contextTmp2 = context;
                                            if (context[__GENERATION_UPDATED] !== generation) {
                                                generationStack = [];
                                                generationDepth = 0;
                                                while (generationDepth > -1) {
                                                    if ((generationReferences = generationStack[generationDepth]) === undefined) {
                                                        i = k = -1;
                                                        n = context[__REFS_LENGTH] || 0;
                                                        generationStack[generationDepth] = generationReferences = [];
                                                        context[__GENERATION_UPDATED] = generation;
                                                        context[__GENERATION] = (context[__GENERATION] || 0) + 1;
                                                        if ((reference = context[__PARENT]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                            generationReferences[++k] = reference;
                                                        }
                                                        while (++i < n) {
                                                            if ((reference = context[__REF + i]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                                generationReferences[++k] = reference;
                                                            }
                                                        }
                                                    }
                                                    if ((context = generationReferences.pop()) !== undefined) {
                                                        ++generationDepth;
                                                    } else {
                                                        generationStack[generationDepth--] = undefined;
                                                    }
                                                }
                                            }
                                            reference = generationStack = generationReferences = undefined;
                                            context = contextTmp2;
                                            if ((contextParent = context[__PARENT]) !== undefined && contextSize <= 0) {
                                                contextRefsLength = context.__refsLength || 0;
                                                i = -1;
                                                while (++i < contextRefsLength) {
                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                        reference.__context = undefined;
                                                        context[__REF + i] = undefined;
                                                    }
                                                }
                                                context.__refsLength = undefined;
                                                contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                    i = (contextValue[__REF_INDEX] || 0) - 1;
                                                    n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                    while (++i <= n) {
                                                        referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                    }
                                                    referenceContext[__REFS_LENGTH] = n;
                                                    contextValue[__REF_INDEX] = undefined;
                                                    contextValue[__CONTEXT] = undefined;
                                                    referenceContext = undefined;
                                                }
                                                if (context != null && typeof context === 'object') {
                                                    head = root.__head;
                                                    tail = root.__tail;
                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                    context === head && (root.__head = root.__next = head = next);
                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                    context.__next = context.__prev = undefined;
                                                    head = tail = next = prev = undefined;
                                                }
                                            }
                                            context = contextParent;
                                        }
                                        context = contextTmp;
                                        contextParent = contextParentTmp;
                                        contextTmp = contextTmp2 = contextParentTmp = undefined;
                                        contextType = context != null && context[$TYPE];
                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                    }
                                }
                            }
                        }
                        break resolvePath;
                    } while (true);
                if (context != null) {
                    if (context != null && typeof context === 'object' && contextExpires !== 1) {
                        head = root.__head;
                        tail = root.__tail;
                        next = context.__next, prev = context.__prev;
                        if (context !== head) {
                            next && (next != null && typeof next === 'object') && (next.__prev = prev);
                            prev && (prev != null && typeof prev === 'object') && (prev.__next = next);
                            (next = head) && (head != null && typeof head === 'object') && (head.__prev = context);
                            root.__head = root.__next = head = context;
                            head.__next = next;
                            head.__prev = undefined;
                        }
                        if (tail == null || context === tail) {
                            root.__tail = root.__prev = tail = prev || context;
                        }
                        head = tail = next = prev = undefined;
                    }
                    if (contextType === 'error') {
                        if (expandsCount > -1) {
                            requestedPath[requestedPath.length] = null;
                        }
                        contextValue = context;
                    }
                }
                if (context == null || refreshing === true) {
                    src = optimizedPath;
                    dest = new Array(n = src.length);
                    i = -1;
                    while (++i < n) {
                        dest[i] = src[i];
                    }
                    opt = dest;
                    src = optimizedBoundPath;
                    dest = new Array(n = src.length);
                    i = -1;
                    while (++i < n) {
                        dest[i] = src[i];
                    }
                    req = dest;
                    reqLen = n;
                    i = -1;
                    n = requestedPath.length;
                    while (++i < n) {
                        key = path[i];
                        key2 = requestedPath[i];
                        req[reqLen + i] = key && typeof key === 'object' && [key2] || key2;
                    }
                    if (column < length) {
                        j = column + 1;
                        k = length + 1;
                        reqLen = req.length;
                        optLen = opt.length;
                        i = -1;
                        n = k - j;
                        while (++i < n) {
                            req[reqLen + i] = opt[optLen + i] = path[j + i];
                        }
                    }
                    req.pathSetIndex = index;
                    requestedMissingPaths[requestedMissingPaths.length] = req;
                    optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                } else if (contextValue !== undefined || boxed === true) {
                    src = optimizedPath;
                    dest = new Array(n = src.length);
                    i = -1;
                    while (++i < n) {
                        dest[i] = src[i];
                    }
                    opt = dest;
                    src = requestedPath;
                    dest = new Array(n = src.length);
                    i = -1;
                    while (++i < n) {
                        dest[i] = src[i];
                    }
                    req = dest;
                    requestedPaths[requestedPaths.length] = req;
                    optimizedPaths[optimizedPaths.length] = opt;
                    if (contextType === 'error') {
                        if (err === undefined) {
                            if (boxed === true) {
                                err = context;
                            } else {
                                dest = {};
                                src = context;
                                keys = Object.keys(src);
                                i = -1;
                                n = keys.length;
                                while (++i < n) {
                                    x = keys[i];
                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                                }
                                err = dest;
                            }
                            val = !!includeErrors && err || undefined;
                        }
                        errors[errors.length] = {
                            path: req,
                            value: err
                        };
                        err = undefined;
                    } else {
                        if (boxed === true) {
                            val = context;
                        } else if (contextValue != null && typeof contextValue === 'object') {
                            if (Array.isArray(contextValue)) {
                                src = contextValue;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                val = dest;
                            } else {
                                dest = {};
                                src = contextValue;
                                keys = Object.keys(src);
                                i = -1;
                                n = keys.length;
                                while (++i < n) {
                                    x = keys[i];
                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                                }
                                val = dest;
                            }
                        } else {
                            val = contextValue;
                        }
                    }
                    if (!(contextType === 'error')) {
                        pbv.value = val;
                        pbv.path = req;
                        dest = {};
                        src = pbv;
                        keys = Object.keys(src);
                        i = -1;
                        n = keys.length;
                        while (++i < n) {
                            x = keys[i];
                            !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                        }
                        val = dest;
                        if (!!onNext) {
                            onNext.call(model, val);
                        } else if (!!values) {
                            values[values.length] = val;
                        }
                    }
                }
                for (; column > -1; --column) {
                    key = path[column];
                    if (key == null || typeof key !== 'object') {
                        continue;
                    }
                    isKeySet = true;
                    if (Array.isArray(key)) {
                        jsonDepth -= Number(jsonDepth > 0);
                        if (++key.index === key.length) {
                            key = key[key.index = 0];
                            if (key == null || typeof key !== 'object') {
                                continue;
                            }
                        } else {
                            break;
                        }
                    }
                    if (++key[__OFFSET] > (key.to || (key.to = key.from + (key.length || 1) - 1))) {
                        key[__OFFSET] = key.from;
                        continue;
                    }
                    jsonDepth -= Number(jsonDepth > 0);
                    break;
                }
            }
            path.column = column;
        }
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setPathsAsJSON() {
    var returnBlocker;
    var generation, model, state, values, errorSelector, onNext, errors, boxed, includeErrors, refreshing, connected, root, contextCache, context, expired, expiredLength, boundPath, optimizedBoundPath, column, offset, jsonDepth, boundPathValue, contexts, requested, optimized, requestedPaths, optimizedPaths, requestedMissingPaths, optimizedMissingPaths, requestedPath, optimizedPath, paths, jsons, jsonKeys, contextParent, index, count, hasValues, jsonCache, json, refsByCols, pathSet, value, path, length, resetOptimizedDepth, reference, i, j, n, isKeySet, key, contextExpires, contextInvalidated, head, tail, next, prev, contextType, contextValue, branchKeyTmp, expandsCount, outermostColumn, refLen, outermostLength, outermostPath, sizeOffset, message, messageSize, contextRefsLength, messageRefsLength, contextLeafStack, contextLeafDepth, keyTmp, contextTmp, contextParentTmp, contextTypeTmp, referenceContext, contextLeaves, contextLeafKeys, contextLeafKey, refContainer, backRefs, jsonKey, contextTimestamp, messageType, messageValue, messageTimestamp, messageExpires, originalMessageSize, contextSize, contextTmp2, generationStack, generationDepth, generationReferences, k, src, dest, opt, req, reqLen, key2, optLen, err, keys, x, val, jsonLength;
    generation = __GENERATION_GENERATION++;
    model = arguments[0];
    state = arguments[1];
    values = arguments[2];
    errorSelector = arguments[3];
    if (typeof values === 'function') {
        onNext = values;
        values = undefined;
    }
    errors = state.errors || (state.errors = []);
    boxed = model._boxed;
    includeErrors = model._includeErrors;
    refreshing = model._refreshing;
    connected = model._connected;
    root = model._root;
    contextCache = context = model._cache;
    expired = root.expired;
    expiredLength = expired.length;
    boundPath = state.boundPath || model._path;
    optimizedBoundPath = [];
    column = state.column || (state.column = 0) - 1;
    offset = state.offset || (state.offset = 0);
    jsonDepth = state.jsonDepth || (state.jsonDepth = 0);
    boundPathValue = state.boundPathValue;
    contexts = state.contexts || (state.contexts = []);
    requested = state.requested || (state.requested = {});
    optimized = state.optimized || (state.optimized = {});
    requestedPaths = state.requestedPaths || (state.requestedPaths = []);
    optimizedPaths = state.optimizedPaths || (state.optimizedPaths = []);
    requestedMissingPaths = state.requestedMissingPaths || (state.requestedMissingPaths = []);
    optimizedMissingPaths = state.optimizedMissingPaths || (state.optimizedMissingPaths = []);
    requestedPath = state.requestedPath || (state.requestedPath = []);
    optimizedPath = state.optimizedPath || (state.optimizedPath = []);
    paths = state;
    jsons = state.jsons || (state.jsons = []);
    jsonKeys = state.jsonKeys || (state.jsonKeys = []);
    optimizedBoundPath = boundPath;
    if (contextParent == null && (contextParent = model.__context) == null) {
        if (boundPath.length === 0) {
            contextParent = contextCache;
        } else {
            if (boundPathValue == null) {
                boundPathValue = getContextSync.call(model);
            }
            optimizedBoundPath = boundPathValue.path;
            if ((contextParent = boundPathValue.value) == null) {
                contextParent = {};
            }
            boundPathValue.requested = [];
            boundPathValue.optimized = [];
            state.boundPathValue = boundPathValue;
        }
    }
    contexts[-1] = context = contextParent;
    index = paths.index || (paths.index = 0);
    count = paths.length;
    for (; index < count; ++index) {
        pathSet = paths[index];
        hasValues = false;
        jsonDepth = jsonKeys.length = 0;
        jsonCache = json = jsons[-1] = !!values && values[index] || undefined;
        offset = 0;
        refsByCols = state.refsByCols = [];
        refsByCols[-1] = optimizedBoundPath;
        if (Array.isArray(pathSet)) {
            value = undefined;
            path = pathSet;
        } else {
            value = pathSet.value;
            path = pathSet.path;
        }
        length = path.length - 1;
        column = path.column || (path.column = 0);
        while (column > -1) {
            resetOptimizedDepth = column;
            while (--resetOptimizedDepth >= -1) {
                if (!!(reference = refsByCols[resetOptimizedDepth])) {
                    i = j = -1;
                    n = reference.length;
                    offset = n - ++resetOptimizedDepth;
                    while (++i < n) {
                        optimizedPath[++j] = reference[i];
                    }
                    while (resetOptimizedDepth < column) {
                        optimizedPath[++j] = requestedPath[resetOptimizedDepth++];
                    }
                    optimizedPath.length = offset + resetOptimizedDepth;
                    break;
                }
            }
            contextParent = contexts[column - 1];
            resolvePath:
                do {
                    for (; column < length; ++column) {
                        key = path[column];
                        isKeySet = false;
                        if (key != null && typeof key === 'object') {
                            isKeySet = true;
                            if (Array.isArray(key)) {
                                key = key[key.index || (key.index = 0)];
                                if (key != null && typeof key === 'object') {
                                    key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            } else {
                                key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        }
                        requestedPath[requestedPath.length = column] = key;
                        if (key != null && key !== __NULL) {
                            !!jsonCache && isKeySet === true && (jsonKeys[jsonDepth] = key);
                            optimizedPath[optimizedPath.length = column + offset] = key;
                            context = contextParent[key];
                            if (context != null) {
                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                    contextInvalidated = context != null && context[__INVALIDATED];
                                    if (contextInvalidated === true === false) {
                                        context.__invalidated = true;
                                        context[$EXPIRES] = 0;
                                        expired[++expiredLength] = context;
                                        if (context != null && typeof context === 'object') {
                                            head = root.__head;
                                            tail = root.__tail;
                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                            context === head && (root.__head = root.__next = head = next);
                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                            context.__next = context.__prev = undefined;
                                            head = tail = next = prev = undefined;
                                        }
                                    }
                                    context = undefined;
                                }
                            }
                            contextType = context != null && context[$TYPE];
                            contextValue = contextType === 'sentinel' ? context.value : context;
                            branchKeyTmp = key;
                            if ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue)) {
                                expandsCount = -1;
                                refsByCols[outermostColumn = column] = contextValue;
                                do {
                                    branchKeyTmp = key;
                                    if ((context = context.__context) !== undefined) {
                                        i = -1;
                                        refLen = contextValue.length;
                                        offset = refLen - column - 1;
                                        optimizedPath.length = refLen;
                                        while (++i < refLen) {
                                            optimizedPath[i] = contextValue[i];
                                        }
                                        if (context != null) {
                                            if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                contextInvalidated = context != null && context[__INVALIDATED];
                                                if (contextInvalidated === true === false) {
                                                    context.__invalidated = true;
                                                    context[$EXPIRES] = 0;
                                                    expired[++expiredLength] = context;
                                                    if (context != null && typeof context === 'object') {
                                                        head = root.__head;
                                                        tail = root.__tail;
                                                        (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                        (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                        context === head && (root.__head = root.__next = head = next);
                                                        context === tail && (root.__tail = root.__prev = tail = prev);
                                                        context.__next = context.__prev = undefined;
                                                        head = tail = next = prev = undefined;
                                                    }
                                                }
                                                context = undefined;
                                            }
                                        }
                                        contextType = context != null && context[$TYPE];
                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                        if (contextType === 'error') {
                                            expandsCount = 0;
                                            break resolvePath;
                                        } else if (context != null === false) {
                                            expandsCount = -1;
                                            break resolvePath;
                                        }
                                        contextParent = context;
                                    } else {
                                        refsByCols[outermostColumn = column] = contextValue;
                                        outermostLength = length;
                                        outermostPath = path;
                                        offset = 0;
                                        column = -1;
                                        path = contextValue;
                                        length = path.length - 1;
                                        contextParent = contextCache;
                                        while (++column < length) {
                                            if ((key = path[column]) == null) {
                                                continue;
                                            }
                                            optimizedPath[optimizedPath.length = column + offset] = key;
                                            context = contextParent[key];
                                            if (context != null) {
                                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                    contextInvalidated = context != null && context[__INVALIDATED];
                                                    if (contextInvalidated === true === false) {
                                                        context.__invalidated = true;
                                                        context[$EXPIRES] = 0;
                                                        expired[++expiredLength] = context;
                                                        if (context != null && typeof context === 'object') {
                                                            head = root.__head;
                                                            tail = root.__tail;
                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                            context === head && (root.__head = root.__next = head = next);
                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                            context.__next = context.__prev = undefined;
                                                            head = tail = next = prev = undefined;
                                                        }
                                                    }
                                                    context = undefined;
                                                }
                                            }
                                            contextType = context != null && context[$TYPE];
                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                            if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                sizeOffset = 0;
                                                message = {};
                                                messageSize = message != null && message[$SIZE] || 0;
                                                do {
                                                    if (key != null && key !== __NULL) {
                                                        if (context != null && context !== message) {
                                                            contextRefsLength = context.__refsLength || 0;
                                                            messageRefsLength = message.__refsLength || 0;
                                                            i = -1;
                                                            while (++i < contextRefsLength) {
                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                    reference[__CONTEXT] = message;
                                                                    message[__REF + (messageRefsLength + i)] = reference;
                                                                    context[__REF + i] = undefined;
                                                                }
                                                            }
                                                            message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                            context[__REFS_LENGTH] = reference = undefined;
                                                            contextLeafStack = [];
                                                            contextLeafDepth = 0;
                                                            keyTmp = key;
                                                            contextTmp = context;
                                                            contextParentTmp = contextParent;
                                                            contextTypeTmp = contextType;
                                                            recursing:
                                                                while (contextLeafDepth > -1) {
                                                                    if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                                                        contextRefsLength = context.__refsLength || 0;
                                                                        i = -1;
                                                                        while (++i < contextRefsLength) {
                                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                                reference.__context = undefined;
                                                                                context[__REF + i] = undefined;
                                                                            }
                                                                        }
                                                                        context.__refsLength = undefined;
                                                                        contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                        if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                            i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                            n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                            while (++i <= n) {
                                                                                referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                            }
                                                                            referenceContext[__REFS_LENGTH] = n;
                                                                            contextValue[__REF_INDEX] = undefined;
                                                                            contextValue[__CONTEXT] = undefined;
                                                                            referenceContext = undefined;
                                                                        }
                                                                        if (context != null && typeof context === 'object') {
                                                                            head = root.__head;
                                                                            tail = root.__tail;
                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                            context === head && (root.__head = root.__next = head = next);
                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                            context.__next = context.__prev = undefined;
                                                                            head = tail = next = prev = undefined;
                                                                        }
                                                                        context = contextParent;
                                                                        contextParent = contextLeaves && contextLeaves.parent;
                                                                        contextLeafStack[contextLeafDepth--] = undefined;
                                                                        contextType = context != null && context[$TYPE];
                                                                        continue;
                                                                    }
                                                                    if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                        contextLeafKeys = Object.keys(context);
                                                                        contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                        contextLeaves.parent = contextParent;
                                                                        i = -1;
                                                                        n = contextLeafKeys.length;
                                                                        while (++i < n) {
                                                                            if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                contextLeaves[i] = context[contextLeafKey];
                                                                            }
                                                                        }
                                                                    }
                                                                    contextParent = context;
                                                                    if (context = contextLeaves.pop()) {
                                                                        contextLeafDepth++;
                                                                        contextType = context != null && context[$TYPE];
                                                                    } else {
                                                                        contextType = 'leaf';
                                                                        context = contextParent;
                                                                        contextParent = contextLeaves.parent;
                                                                    }
                                                                    continue;
                                                                }
                                                            key = keyTmp;
                                                            context = contextTmp;
                                                            contextParent = contextParentTmp;
                                                            contextType = contextTypeTmp;
                                                            contextTmp = contextTypeTmp = undefined;
                                                            if (context != null && typeof context === 'object') {
                                                                head = root.__head;
                                                                tail = root.__tail;
                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                context === head && (root.__head = root.__next = head = next);
                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                context.__next = context.__prev = undefined;
                                                                head = tail = next = prev = undefined;
                                                            }
                                                        }
                                                        message[$SIZE] = messageSize - sizeOffset;
                                                        contextParent[key] = context = message;
                                                        break;
                                                    }
                                                    context = contexts[--column];
                                                    key = context[__KEY];
                                                    contextParent = contexts[column - 1] || contextCache;
                                                } while (column > -1);
                                                context[__SELF] = context;
                                                context[__KEY] = key;
                                                context[__PARENT] = contextParent;
                                                context[__ROOT] = contextCache;
                                                if (context[__GENERATION] === undefined) {
                                                    context[__GENERATION] = 0;
                                                }
                                                contextType = context != null && context[$TYPE];
                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                            }
                                            if (context === undefined) {
                                                i = -1;
                                                refLen = path.length;
                                                offset = refLen - column - 1;
                                                optimizedPath.length = refLen;
                                                while (++i < refLen) {
                                                    optimizedPath[i] = path[i];
                                                }
                                                break;
                                            } else if (!!contextType || Array.isArray(contextValue)) {
                                                break;
                                            }
                                            contextParent = context;
                                        }
                                        if (column === length) {
                                            if ((key = path[column]) != null) {
                                                optimizedPath[optimizedPath.length = column + offset] = key;
                                                context = contextParent[key];
                                                if (context != null) {
                                                    if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                        contextInvalidated = context != null && context[__INVALIDATED];
                                                        if (contextInvalidated === true === false) {
                                                            context.__invalidated = true;
                                                            context[$EXPIRES] = 0;
                                                            expired[++expiredLength] = context;
                                                            if (context != null && typeof context === 'object') {
                                                                head = root.__head;
                                                                tail = root.__tail;
                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                context === head && (root.__head = root.__next = head = next);
                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                context.__next = context.__prev = undefined;
                                                                head = tail = next = prev = undefined;
                                                            }
                                                        }
                                                        context = undefined;
                                                    }
                                                }
                                                contextType = context != null && context[$TYPE];
                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                if ((!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) && !Array.isArray(contextValue)) {
                                                    sizeOffset = 0;
                                                    message = {};
                                                    messageSize = message != null && message[$SIZE] || 0;
                                                    do {
                                                        if (key != null && key !== __NULL) {
                                                            if (context != null && context !== message) {
                                                                contextRefsLength = context.__refsLength || 0;
                                                                messageRefsLength = message.__refsLength || 0;
                                                                i = -1;
                                                                while (++i < contextRefsLength) {
                                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                                        reference[__CONTEXT] = message;
                                                                        message[__REF + (messageRefsLength + i)] = reference;
                                                                        context[__REF + i] = undefined;
                                                                    }
                                                                }
                                                                message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                                context[__REFS_LENGTH] = reference = undefined;
                                                                contextLeafStack = [];
                                                                contextLeafDepth = 0;
                                                                keyTmp = key;
                                                                contextTmp = context;
                                                                contextParentTmp = contextParent;
                                                                contextTypeTmp = contextType;
                                                                recursing:
                                                                    while (contextLeafDepth > -1) {
                                                                        if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                                                            contextRefsLength = context.__refsLength || 0;
                                                                            i = -1;
                                                                            while (++i < contextRefsLength) {
                                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                                    reference.__context = undefined;
                                                                                    context[__REF + i] = undefined;
                                                                                }
                                                                            }
                                                                            context.__refsLength = undefined;
                                                                            contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                            if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                while (++i <= n) {
                                                                                    referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                }
                                                                                referenceContext[__REFS_LENGTH] = n;
                                                                                contextValue[__REF_INDEX] = undefined;
                                                                                contextValue[__CONTEXT] = undefined;
                                                                                referenceContext = undefined;
                                                                            }
                                                                            if (context != null && typeof context === 'object') {
                                                                                head = root.__head;
                                                                                tail = root.__tail;
                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                context.__next = context.__prev = undefined;
                                                                                head = tail = next = prev = undefined;
                                                                            }
                                                                            context = contextParent;
                                                                            contextParent = contextLeaves && contextLeaves.parent;
                                                                            contextLeafStack[contextLeafDepth--] = undefined;
                                                                            contextType = context != null && context[$TYPE];
                                                                            continue;
                                                                        }
                                                                        if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                            contextLeafKeys = Object.keys(context);
                                                                            contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                            contextLeaves.parent = contextParent;
                                                                            i = -1;
                                                                            n = contextLeafKeys.length;
                                                                            while (++i < n) {
                                                                                if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                    contextLeaves[i] = context[contextLeafKey];
                                                                                }
                                                                            }
                                                                        }
                                                                        contextParent = context;
                                                                        if (context = contextLeaves.pop()) {
                                                                            contextLeafDepth++;
                                                                            contextType = context != null && context[$TYPE];
                                                                        } else {
                                                                            contextType = 'leaf';
                                                                            context = contextParent;
                                                                            contextParent = contextLeaves.parent;
                                                                        }
                                                                        continue;
                                                                    }
                                                                key = keyTmp;
                                                                context = contextTmp;
                                                                contextParent = contextParentTmp;
                                                                contextType = contextTypeTmp;
                                                                contextTmp = contextTypeTmp = undefined;
                                                                if (context != null && typeof context === 'object') {
                                                                    head = root.__head;
                                                                    tail = root.__tail;
                                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                    context === head && (root.__head = root.__next = head = next);
                                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                                    context.__next = context.__prev = undefined;
                                                                    head = tail = next = prev = undefined;
                                                                }
                                                            }
                                                            message[$SIZE] = messageSize - sizeOffset;
                                                            contextParent[key] = context = message;
                                                            break;
                                                        }
                                                        context = contexts[--column];
                                                        key = context[__KEY];
                                                        contextParent = contexts[column - 1] || contextCache;
                                                    } while (column > -1);
                                                    context[__SELF] = context;
                                                    context[__KEY] = key;
                                                    context[__PARENT] = contextParent;
                                                    context[__ROOT] = contextCache;
                                                    if (context[__GENERATION] === undefined) {
                                                        context[__GENERATION] = 0;
                                                    }
                                                    contextType = context != null && context[$TYPE];
                                                    contextValue = contextType === 'sentinel' ? context.value : context;
                                                }
                                            }
                                            if (context != null) {
                                                if ((refContainer = path[__CONTAINER] || path).__context === undefined) {
                                                    backRefs = context.__refsLength || 0;
                                                    context['__ref' + backRefs] = refContainer;
                                                    context.__refsLength = backRefs + 1;
                                                    refContainer.__refIndex = backRefs;
                                                    refContainer.__context = context;
                                                    refContainer = backRefs = undefined;
                                                }
                                            }
                                        }
                                        expandsCount = Number(contextType === 'error') - 1;
                                        column = outermostColumn;
                                        path = outermostPath;
                                        offset = length - column;
                                        length = outermostLength;
                                        key = branchKeyTmp;
                                        outermostColumn = undefined;
                                        outermostPath = undefined;
                                        outermostLength = undefined;
                                        branchKeyTmp = undefined;
                                    }
                                } while ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue));
                            } else if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                sizeOffset = 0;
                                message = {};
                                messageSize = message != null && message[$SIZE] || 0;
                                do {
                                    if (key != null && key !== __NULL) {
                                        if (context != null && context !== message) {
                                            contextRefsLength = context.__refsLength || 0;
                                            messageRefsLength = message.__refsLength || 0;
                                            i = -1;
                                            while (++i < contextRefsLength) {
                                                if ((reference = context[__REF + i]) !== undefined) {
                                                    reference[__CONTEXT] = message;
                                                    message[__REF + (messageRefsLength + i)] = reference;
                                                    context[__REF + i] = undefined;
                                                }
                                            }
                                            message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                            context[__REFS_LENGTH] = reference = undefined;
                                            contextLeafStack = [];
                                            contextLeafDepth = 0;
                                            keyTmp = key;
                                            contextTmp = context;
                                            contextParentTmp = contextParent;
                                            contextTypeTmp = contextType;
                                            recursing:
                                                while (contextLeafDepth > -1) {
                                                    if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                                        contextRefsLength = context.__refsLength || 0;
                                                        i = -1;
                                                        while (++i < contextRefsLength) {
                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                reference.__context = undefined;
                                                                context[__REF + i] = undefined;
                                                            }
                                                        }
                                                        context.__refsLength = undefined;
                                                        contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                        if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                            i = (contextValue[__REF_INDEX] || 0) - 1;
                                                            n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                            while (++i <= n) {
                                                                referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                            }
                                                            referenceContext[__REFS_LENGTH] = n;
                                                            contextValue[__REF_INDEX] = undefined;
                                                            contextValue[__CONTEXT] = undefined;
                                                            referenceContext = undefined;
                                                        }
                                                        if (context != null && typeof context === 'object') {
                                                            head = root.__head;
                                                            tail = root.__tail;
                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                            context === head && (root.__head = root.__next = head = next);
                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                            context.__next = context.__prev = undefined;
                                                            head = tail = next = prev = undefined;
                                                        }
                                                        context = contextParent;
                                                        contextParent = contextLeaves && contextLeaves.parent;
                                                        contextLeafStack[contextLeafDepth--] = undefined;
                                                        contextType = context != null && context[$TYPE];
                                                        continue;
                                                    }
                                                    if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                        contextLeafKeys = Object.keys(context);
                                                        contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                        contextLeaves.parent = contextParent;
                                                        i = -1;
                                                        n = contextLeafKeys.length;
                                                        while (++i < n) {
                                                            if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                contextLeaves[i] = context[contextLeafKey];
                                                            }
                                                        }
                                                    }
                                                    contextParent = context;
                                                    if (context = contextLeaves.pop()) {
                                                        contextLeafDepth++;
                                                        contextType = context != null && context[$TYPE];
                                                    } else {
                                                        contextType = 'leaf';
                                                        context = contextParent;
                                                        contextParent = contextLeaves.parent;
                                                    }
                                                    continue;
                                                }
                                            key = keyTmp;
                                            context = contextTmp;
                                            contextParent = contextParentTmp;
                                            contextType = contextTypeTmp;
                                            contextTmp = contextTypeTmp = undefined;
                                            if (context != null && typeof context === 'object') {
                                                head = root.__head;
                                                tail = root.__tail;
                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                context === head && (root.__head = root.__next = head = next);
                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                context.__next = context.__prev = undefined;
                                                head = tail = next = prev = undefined;
                                            }
                                        }
                                        message[$SIZE] = messageSize - sizeOffset;
                                        contextParent[key] = context = message;
                                        break;
                                    }
                                    context = contexts[--column];
                                    key = context[__KEY];
                                    contextParent = contexts[column - 1] || contextCache;
                                } while (column > -1);
                                context[__SELF] = context;
                                context[__KEY] = key;
                                context[__PARENT] = contextParent;
                                context[__ROOT] = contextCache;
                                if (context[__GENERATION] === undefined) {
                                    context[__GENERATION] = 0;
                                }
                                contextType = context != null && context[$TYPE];
                                contextValue = contextType === 'sentinel' ? context.value : context;
                            }
                            key = branchKeyTmp;
                            contexts[column] = contextParent = context;
                            if (!!jsonCache && isKeySet === true) {
                                do {
                                    jsonKey = jsonKeys[jsonDepth];
                                } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                                if (jsonKey != null && jsonKey !== __NULL) {
                                    json = jsons[jsonDepth - 1] || jsonCache;
                                } else {
                                    json = jsonCache;
                                }
                                if (jsonKey != null && jsonKey !== __NULL) {
                                    json = json[jsonKey] || (json[jsonKey] = {});
                                }
                                jsons[jsonDepth] = json;
                                jsonDepth += 1;
                            }
                        }
                    }
                    if (column === length) {
                        key = path[column];
                        isKeySet = false;
                        if (key != null && typeof key === 'object') {
                            isKeySet = true;
                            if (Array.isArray(key)) {
                                key = key[key.index || (key.index = 0)];
                                if (key != null && typeof key === 'object') {
                                    key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            } else {
                                key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        }
                        requestedPath[requestedPath.length = column] = key;
                        if (key != null && key !== __NULL) {
                            !!jsonCache && isKeySet === true && (jsonKeys[jsonDepth] = key);
                            optimizedPath[optimizedPath.length = column + offset] = key;
                            context = contextParent[key];
                            if (context != null) {
                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                    contextInvalidated = context != null && context[__INVALIDATED];
                                    if (contextInvalidated === true === false) {
                                        context.__invalidated = true;
                                        context[$EXPIRES] = 0;
                                        expired[++expiredLength] = context;
                                        if (context != null && typeof context === 'object') {
                                            head = root.__head;
                                            tail = root.__tail;
                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                            context === head && (root.__head = root.__next = head = next);
                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                            context.__next = context.__prev = undefined;
                                            head = tail = next = prev = undefined;
                                        }
                                    }
                                    context = undefined;
                                }
                            }
                            contextType = context != null && context[$TYPE];
                            contextValue = contextType === 'sentinel' ? context.value : context;
                            contextTimestamp = context != null && context[$TIMESTAMP];
                            message = value;
                            messageType = message != null && message[$TYPE];
                            messageValue = messageType === 'sentinel' ? message.value : message;
                            messageTimestamp = message != null && message[$TIMESTAMP];
                            messageExpires = (message != null || null) && message[$EXPIRES];
                            if ((messageTimestamp < contextTimestamp || messageExpires === 0 && ((context = message) || true)) === false === true) {
                                messageSize = message != null && message[$SIZE] || 0;
                                originalMessageSize = messageSize || 0;
                                if ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) {
                                    messageType = 'array';
                                    originalMessageSize = messageValue.length || 1;
                                    messageSize = (messageType === 'sentinel' && 50 || 0) + originalMessageSize;
                                    messageValue[__CONTAINER] = message;
                                } else if (messageType === 'sentinel') {
                                    messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                } else if (messageType === 'error') {
                                    if (typeof errorSelector === 'function') {
                                        message = Enumerable.errorSelector(message);
                                    }
                                    messageSize = 50 + originalMessageSize;
                                } else if (messageValue == null || typeof messageValue !== 'object') {
                                    originalMessageSize = typeof messageValue === 'string' && messageValue.length || 1;
                                    messageSize = 50 + originalMessageSize;
                                    messageType = 'sentinel';
                                    message = {
                                        '$type': messageType,
                                        'value': messageValue
                                    };
                                } else {
                                    messageSize = message[$SIZE] || 50 * 2;
                                    messageType = message[$TYPE] = messageType || 'leaf';
                                }
                                message[$SIZE] = sizeOffset = messageSize;
                                if (!!((messageExpires = (message != null || null) && message[$EXPIRES]) != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < now())) === false) {
                                    messageSize = message != null && message[$SIZE] || 0;
                                    do {
                                        if (key != null && key !== __NULL) {
                                            if (context != null && context !== message) {
                                                contextRefsLength = context.__refsLength || 0;
                                                messageRefsLength = message.__refsLength || 0;
                                                i = -1;
                                                while (++i < contextRefsLength) {
                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                        reference[__CONTEXT] = message;
                                                        message[__REF + (messageRefsLength + i)] = reference;
                                                        context[__REF + i] = undefined;
                                                    }
                                                }
                                                message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                context[__REFS_LENGTH] = reference = undefined;
                                                contextLeafStack = [];
                                                contextLeafDepth = 0;
                                                keyTmp = key;
                                                contextTmp = context;
                                                contextParentTmp = contextParent;
                                                contextTypeTmp = contextType;
                                                recursing:
                                                    while (contextLeafDepth > -1) {
                                                        if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                                            contextRefsLength = context.__refsLength || 0;
                                                            i = -1;
                                                            while (++i < contextRefsLength) {
                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                    reference.__context = undefined;
                                                                    context[__REF + i] = undefined;
                                                                }
                                                            }
                                                            context.__refsLength = undefined;
                                                            contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                            if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                while (++i <= n) {
                                                                    referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                }
                                                                referenceContext[__REFS_LENGTH] = n;
                                                                contextValue[__REF_INDEX] = undefined;
                                                                contextValue[__CONTEXT] = undefined;
                                                                referenceContext = undefined;
                                                            }
                                                            if (context != null && typeof context === 'object') {
                                                                head = root.__head;
                                                                tail = root.__tail;
                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                context === head && (root.__head = root.__next = head = next);
                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                context.__next = context.__prev = undefined;
                                                                head = tail = next = prev = undefined;
                                                            }
                                                            context = contextParent;
                                                            contextParent = contextLeaves && contextLeaves.parent;
                                                            contextLeafStack[contextLeafDepth--] = undefined;
                                                            contextType = context != null && context[$TYPE];
                                                            continue;
                                                        }
                                                        if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                            contextLeafKeys = Object.keys(context);
                                                            contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                            contextLeaves.parent = contextParent;
                                                            i = -1;
                                                            n = contextLeafKeys.length;
                                                            while (++i < n) {
                                                                if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                    contextLeaves[i] = context[contextLeafKey];
                                                                }
                                                            }
                                                        }
                                                        contextParent = context;
                                                        if (context = contextLeaves.pop()) {
                                                            contextLeafDepth++;
                                                            contextType = context != null && context[$TYPE];
                                                        } else {
                                                            contextType = 'leaf';
                                                            context = contextParent;
                                                            contextParent = contextLeaves.parent;
                                                        }
                                                        continue;
                                                    }
                                                key = keyTmp;
                                                context = contextTmp;
                                                contextParent = contextParentTmp;
                                                contextType = contextTypeTmp;
                                                contextTmp = contextTypeTmp = undefined;
                                                if (context != null && typeof context === 'object') {
                                                    head = root.__head;
                                                    tail = root.__tail;
                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                    context === head && (root.__head = root.__next = head = next);
                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                    context.__next = context.__prev = undefined;
                                                    head = tail = next = prev = undefined;
                                                }
                                            }
                                            message[$SIZE] = messageSize - sizeOffset;
                                            contextParent[key] = context = message;
                                            break;
                                        }
                                        context = contexts[--column];
                                        key = context[__KEY];
                                        contextParent = contexts[column - 1] || contextCache;
                                    } while (column > -1);
                                    context[__SELF] = context;
                                    context[__KEY] = key;
                                    context[__PARENT] = contextParent;
                                    context[__ROOT] = contextCache;
                                    if (context[__GENERATION] === undefined) {
                                        context[__GENERATION] = 0;
                                    }
                                    contextTmp = context;
                                    contextParentTmp = contextParent;
                                    while (context !== undefined) {
                                        contextSize = context['$size'] = (context['$size'] || 0) + sizeOffset;
                                        contextTmp2 = context;
                                        if (context[__GENERATION_UPDATED] !== generation) {
                                            generationStack = [];
                                            generationDepth = 0;
                                            while (generationDepth > -1) {
                                                if ((generationReferences = generationStack[generationDepth]) === undefined) {
                                                    i = k = -1;
                                                    n = context[__REFS_LENGTH] || 0;
                                                    generationStack[generationDepth] = generationReferences = [];
                                                    context[__GENERATION_UPDATED] = generation;
                                                    context[__GENERATION] = (context[__GENERATION] || 0) + 1;
                                                    if ((reference = context[__PARENT]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                        generationReferences[++k] = reference;
                                                    }
                                                    while (++i < n) {
                                                        if ((reference = context[__REF + i]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                            generationReferences[++k] = reference;
                                                        }
                                                    }
                                                }
                                                if ((context = generationReferences.pop()) !== undefined) {
                                                    ++generationDepth;
                                                } else {
                                                    generationStack[generationDepth--] = undefined;
                                                }
                                            }
                                        }
                                        reference = generationStack = generationReferences = undefined;
                                        context = contextTmp2;
                                        if ((contextParent = context[__PARENT]) !== undefined && contextSize <= 0) {
                                            contextRefsLength = context.__refsLength || 0;
                                            i = -1;
                                            while (++i < contextRefsLength) {
                                                if ((reference = context[__REF + i]) !== undefined) {
                                                    reference.__context = undefined;
                                                    context[__REF + i] = undefined;
                                                }
                                            }
                                            context.__refsLength = undefined;
                                            contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                            if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                i = (contextValue[__REF_INDEX] || 0) - 1;
                                                n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                while (++i <= n) {
                                                    referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                }
                                                referenceContext[__REFS_LENGTH] = n;
                                                contextValue[__REF_INDEX] = undefined;
                                                contextValue[__CONTEXT] = undefined;
                                                referenceContext = undefined;
                                            }
                                            if (context != null && typeof context === 'object') {
                                                head = root.__head;
                                                tail = root.__tail;
                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                context === head && (root.__head = root.__next = head = next);
                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                context.__next = context.__prev = undefined;
                                                head = tail = next = prev = undefined;
                                            }
                                        }
                                        context = contextParent;
                                    }
                                    context = contextTmp;
                                    contextParent = contextParentTmp;
                                    contextTmp = contextTmp2 = contextParentTmp = undefined;
                                    contextType = context != null && context[$TYPE];
                                    contextValue = contextType === 'sentinel' ? context.value : context;
                                }
                            }
                        }
                    }
                    break resolvePath;
                } while (true);
            if (context != null) {
                if (context != null && typeof context === 'object' && contextExpires !== 1) {
                    head = root.__head;
                    tail = root.__tail;
                    next = context.__next, prev = context.__prev;
                    if (context !== head) {
                        next && (next != null && typeof next === 'object') && (next.__prev = prev);
                        prev && (prev != null && typeof prev === 'object') && (prev.__next = next);
                        (next = head) && (head != null && typeof head === 'object') && (head.__prev = context);
                        root.__head = root.__next = head = context;
                        head.__next = next;
                        head.__prev = undefined;
                    }
                    if (tail == null || context === tail) {
                        root.__tail = root.__prev = tail = prev || context;
                    }
                    head = tail = next = prev = undefined;
                }
                if (contextType === 'error') {
                    if (expandsCount > -1) {
                        requestedPath[requestedPath.length] = null;
                    }
                    contextValue = context;
                }
            }
            if (context == null || refreshing === true) {
                src = optimizedPath;
                dest = new Array(n = src.length);
                i = -1;
                while (++i < n) {
                    dest[i] = src[i];
                }
                opt = dest;
                src = optimizedBoundPath;
                dest = new Array(n = src.length);
                i = -1;
                while (++i < n) {
                    dest[i] = src[i];
                }
                req = dest;
                reqLen = n;
                i = -1;
                n = requestedPath.length;
                while (++i < n) {
                    key = path[i];
                    key2 = requestedPath[i];
                    req[reqLen + i] = key && typeof key === 'object' && [key2] || key2;
                }
                if (column < length) {
                    j = column + 1;
                    k = length + 1;
                    reqLen = req.length;
                    optLen = opt.length;
                    i = -1;
                    n = k - j;
                    while (++i < n) {
                        req[reqLen + i] = opt[optLen + i] = path[j + i];
                    }
                }
                req.pathSetIndex = index;
                requestedMissingPaths[requestedMissingPaths.length] = req;
                optimizedMissingPaths[optimizedMissingPaths.length] = opt;
            } else if (contextValue !== undefined || boxed === true) {
                src = optimizedPath;
                dest = new Array(n = src.length);
                i = -1;
                while (++i < n) {
                    dest[i] = src[i];
                }
                opt = dest;
                src = requestedPath;
                dest = new Array(n = src.length);
                i = -1;
                while (++i < n) {
                    dest[i] = src[i];
                }
                req = dest;
                requestedPaths[requestedPaths.length] = req;
                optimizedPaths[optimizedPaths.length] = opt;
                if (!!jsonCache) {
                    hasValues = true;
                    if (contextType === 'error') {
                        if (err === undefined) {
                            if (boxed === true) {
                                err = context;
                            } else {
                                dest = {};
                                src = context;
                                keys = Object.keys(src);
                                i = -1;
                                n = keys.length;
                                while (++i < n) {
                                    x = keys[i];
                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                                }
                                err = dest;
                            }
                            val = !!includeErrors && err || undefined;
                        }
                        errors[errors.length] = {
                            path: req,
                            value: err
                        };
                        err = undefined;
                    } else {
                        if (boxed === true) {
                            val = context;
                        } else if (contextValue != null && typeof contextValue === 'object') {
                            if (Array.isArray(contextValue)) {
                                src = contextValue;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                val = dest;
                            } else {
                                dest = {};
                                src = contextValue;
                                keys = Object.keys(src);
                                i = -1;
                                n = keys.length;
                                while (++i < n) {
                                    x = keys[i];
                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                                }
                                val = dest;
                            }
                        } else {
                            val = contextValue;
                        }
                    }
                    do {
                        jsonKey = jsonKeys[jsonDepth];
                    } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                    if (jsonKey != null && jsonKey !== __NULL) {
                        json = jsons[jsonDepth - 1] || jsonCache;
                    } else {
                        json = jsonCache;
                    }
                    if (jsonKey != null && jsonKey !== __NULL) {
                        json[jsonKey] = val;
                    } else {
                        json = jsons[jsonDepth] = val;
                    }
                }
            }
            for (; column > -1; --column) {
                key = path[column];
                if (key == null || typeof key !== 'object') {
                    continue;
                }
                isKeySet = true;
                if (Array.isArray(key)) {
                    jsonDepth -= Number(jsonDepth > 0);
                    if (++key.index === key.length) {
                        key = key[key.index = 0];
                        if (key == null || typeof key !== 'object') {
                            continue;
                        }
                    } else {
                        break;
                    }
                }
                if (++key[__OFFSET] > (key.to || (key.to = key.from + (key.length || 1) - 1))) {
                    key[__OFFSET] = key.from;
                    continue;
                }
                jsonDepth -= Number(jsonDepth > 0);
                break;
            }
        }
        path.column = column;
        if (!!jsonCache) {
            jsonDepth = -2;
            jsonLength = jsons.length;
            while (++jsonDepth < jsonLength) {
                if ((json = jsons[jsonDepth]) != null) {
                    break;
                }
            }
            if (hasValues) {
                values[index] = { json: json };
            } else {
                values[index] = undefined;
            }
        }
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setPathsAsJSONG() {
    var returnBlocker;
    var generation, model, state, values, errorSelector, onNext, errors, boxed, includeErrors, refreshing, connected, root, contextCache, context, expired, expiredLength, boundPath, optimizedBoundPath, column, offset, jsonDepth, boundPathValue, contexts, requested, optimized, requestedPaths, optimizedPaths, requestedMissingPaths, optimizedMissingPaths, requestedPath, optimizedPath, paths, jsons, jsonKeys, contextParent, index, count, hasValues, jsonCache, json, refsByCols, pathSet, value, path, length, resetOptimizedDepth, reference, i, j, n, isKeySet, key, contextExpires, contextInvalidated, head, tail, next, prev, contextType, contextValue, branchKeyTmp, jsonKey, val, src, dest, expandsCount, outermostColumn, outermostLength, outermostPath, sizeOffset, message, messageSize, contextRefsLength, messageRefsLength, contextLeafStack, contextLeafDepth, keyTmp, contextTmp, contextParentTmp, contextTypeTmp, referenceContext, contextLeaves, contextLeafKeys, contextLeafKey, err, keys, x, refLen, refContainer, backRefs, contextTimestamp, messageType, messageValue, messageTimestamp, messageExpires, originalMessageSize, contextSize, contextTmp2, generationStack, generationDepth, generationReferences, k, opt, req, reqLen, key2, optLen;
    generation = __GENERATION_GENERATION++;
    model = arguments[0];
    state = arguments[1];
    values = arguments[2];
    errorSelector = arguments[3];
    if (typeof values === 'function') {
        onNext = values;
        values = undefined;
    }
    errors = state.errors || (state.errors = []);
    boxed = model._boxed;
    includeErrors = model._includeErrors;
    refreshing = model._refreshing;
    connected = model._connected;
    root = model._root;
    contextCache = context = model._cache;
    expired = root.expired;
    expiredLength = expired.length;
    boundPath = state.boundPath || model._path;
    optimizedBoundPath = [];
    column = state.column || (state.column = 0) - 1;
    offset = state.offset || (state.offset = 0);
    jsonDepth = state.jsonDepth || (state.jsonDepth = 0);
    boundPathValue = state.boundPathValue;
    contexts = state.contexts || (state.contexts = []);
    requested = state.requested || (state.requested = {});
    optimized = state.optimized || (state.optimized = {});
    requestedPaths = state.requestedPaths || (state.requestedPaths = []);
    optimizedPaths = state.optimizedPaths || (state.optimizedPaths = []);
    requestedMissingPaths = state.requestedMissingPaths || (state.requestedMissingPaths = []);
    optimizedMissingPaths = state.optimizedMissingPaths || (state.optimizedMissingPaths = []);
    requestedPath = state.requestedPath || (state.requestedPath = []);
    optimizedPath = state.optimizedPath || (state.optimizedPath = []);
    paths = state;
    jsons = state.jsons || (state.jsons = []);
    jsonKeys = state.jsonKeys || (state.jsonKeys = []);
    includeErrors = true;
    optimizedBoundPath = boundPath;
    if (contextParent == null && (contextParent = model.__context) == null) {
        if (boundPath.length === 0) {
            contextParent = contextCache;
        } else {
            if (boundPathValue == null) {
                boundPathValue = getContextSync.call(model);
            }
            optimizedBoundPath = boundPathValue.path;
            if ((contextParent = boundPathValue.value) == null) {
                contextParent = {};
            }
            boundPathValue.requested = [];
            boundPathValue.optimized = [];
            state.boundPathValue = boundPathValue;
        }
    }
    contexts[-1] = context = contextParent;
    index = paths.index || (paths.index = 0);
    count = paths.length;
    for (; index < count; ++index) {
        pathSet = paths[index];
        hasValues = hasValues || false;
        jsonDepth = jsonKeys.length = 0;
        jsonCache = json = jsons[-1] = !!values && values[0] || undefined;
        offset = 0;
        refsByCols = state.refsByCols = [];
        refsByCols[-1] = optimizedBoundPath;
        if (Array.isArray(pathSet)) {
            value = undefined;
            path = pathSet;
        } else {
            value = pathSet.value;
            path = pathSet.path;
        }
        length = path.length - 1;
        column = path.column || (path.column = 0);
        while (column > -1) {
            resetOptimizedDepth = column;
            while (--resetOptimizedDepth >= -1) {
                if (!!(reference = refsByCols[resetOptimizedDepth])) {
                    i = j = -1;
                    n = reference.length;
                    offset = n - ++resetOptimizedDepth;
                    while (++i < n) {
                        optimizedPath[++j] = reference[i];
                    }
                    while (resetOptimizedDepth < column) {
                        optimizedPath[++j] = requestedPath[resetOptimizedDepth++];
                    }
                    optimizedPath.length = offset + resetOptimizedDepth;
                    break;
                }
            }
            contextParent = contexts[column - 1];
            resolvePath:
                do {
                    for (; column < length; ++column) {
                        key = path[column];
                        isKeySet = false;
                        if (key != null && typeof key === 'object') {
                            isKeySet = true;
                            if (Array.isArray(key)) {
                                key = key[key.index || (key.index = 0)];
                                if (key != null && typeof key === 'object') {
                                    key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            } else {
                                key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        }
                        requestedPath[requestedPath.length = column] = key;
                        if (key != null && key !== __NULL) {
                            isKeySet = true;
                            jsonKeys[jsonDepth = column] = key;
                            optimizedPath[optimizedPath.length = column + offset] = key;
                            context = contextParent[key];
                            if (context != null) {
                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                    contextInvalidated = context != null && context[__INVALIDATED];
                                    if (contextInvalidated === true === false) {
                                        context.__invalidated = true;
                                        context[$EXPIRES] = 0;
                                        expired[++expiredLength] = context;
                                        if (context != null && typeof context === 'object') {
                                            head = root.__head;
                                            tail = root.__tail;
                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                            context === head && (root.__head = root.__next = head = next);
                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                            context.__next = context.__prev = undefined;
                                            head = tail = next = prev = undefined;
                                        }
                                    }
                                    context = undefined;
                                }
                            }
                            contextType = context != null && context[$TYPE];
                            contextValue = contextType === 'sentinel' ? context.value : context;
                            branchKeyTmp = key;
                            if ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue)) {
                                isKeySet = false;
                                if ((jsonKey = key) != null && jsonKey !== __NULL) {
                                    if (boxed === true) {
                                        val = context;
                                    } else {
                                        src = contextValue;
                                        dest = new Array(n = src.length);
                                        i = -1;
                                        while (++i < n) {
                                            dest[i] = src[i];
                                        }
                                        val = dest;
                                    }
                                    do {
                                        jsonKey = jsonKeys[jsonDepth];
                                    } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                                    if (jsonKey != null && jsonKey !== __NULL) {
                                        json = jsons[jsonDepth - 1] || jsonCache;
                                    } else {
                                        json = jsonCache;
                                    }
                                    if (jsonKey != null && jsonKey !== __NULL) {
                                        json[jsonKey] = val;
                                    } else {
                                        json = jsons[jsonDepth] = val;
                                    }
                                }
                                expandsCount = -1;
                                refsByCols[outermostColumn = column] = contextValue;
                                do {
                                    branchKeyTmp = key;
                                    if (false) {
                                    } else {
                                        json = jsonCache;
                                        refsByCols[outermostColumn = column] = contextValue;
                                        outermostLength = length;
                                        outermostPath = path;
                                        offset = 0;
                                        column = -1;
                                        path = contextValue;
                                        length = path.length - 1;
                                        contextParent = contextCache;
                                        while (++column < length) {
                                            if ((key = path[column]) == null) {
                                                continue;
                                            }
                                            optimizedPath[optimizedPath.length = column + offset] = key;
                                            context = contextParent[key];
                                            if (context != null) {
                                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                    contextInvalidated = context != null && context[__INVALIDATED];
                                                    if (contextInvalidated === true === false) {
                                                        context.__invalidated = true;
                                                        context[$EXPIRES] = 0;
                                                        expired[++expiredLength] = context;
                                                        if (context != null && typeof context === 'object') {
                                                            head = root.__head;
                                                            tail = root.__tail;
                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                            context === head && (root.__head = root.__next = head = next);
                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                            context.__next = context.__prev = undefined;
                                                            head = tail = next = prev = undefined;
                                                        }
                                                    }
                                                    context = undefined;
                                                }
                                            }
                                            contextType = context != null && context[$TYPE];
                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                            if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                sizeOffset = 0;
                                                message = {};
                                                messageSize = message != null && message[$SIZE] || 0;
                                                do {
                                                    if (key != null && key !== __NULL) {
                                                        if (context != null && context !== message) {
                                                            contextRefsLength = context.__refsLength || 0;
                                                            messageRefsLength = message.__refsLength || 0;
                                                            i = -1;
                                                            while (++i < contextRefsLength) {
                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                    reference[__CONTEXT] = message;
                                                                    message[__REF + (messageRefsLength + i)] = reference;
                                                                    context[__REF + i] = undefined;
                                                                }
                                                            }
                                                            message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                            context[__REFS_LENGTH] = reference = undefined;
                                                            contextLeafStack = [];
                                                            contextLeafDepth = 0;
                                                            keyTmp = key;
                                                            contextTmp = context;
                                                            contextParentTmp = contextParent;
                                                            contextTypeTmp = contextType;
                                                            recursing:
                                                                while (contextLeafDepth > -1) {
                                                                    if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                                                        contextRefsLength = context.__refsLength || 0;
                                                                        i = -1;
                                                                        while (++i < contextRefsLength) {
                                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                                reference.__context = undefined;
                                                                                context[__REF + i] = undefined;
                                                                            }
                                                                        }
                                                                        context.__refsLength = undefined;
                                                                        contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                        if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                            i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                            n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                            while (++i <= n) {
                                                                                referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                            }
                                                                            referenceContext[__REFS_LENGTH] = n;
                                                                            contextValue[__REF_INDEX] = undefined;
                                                                            contextValue[__CONTEXT] = undefined;
                                                                            referenceContext = undefined;
                                                                        }
                                                                        if (context != null && typeof context === 'object') {
                                                                            head = root.__head;
                                                                            tail = root.__tail;
                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                            context === head && (root.__head = root.__next = head = next);
                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                            context.__next = context.__prev = undefined;
                                                                            head = tail = next = prev = undefined;
                                                                        }
                                                                        context = contextParent;
                                                                        contextParent = contextLeaves && contextLeaves.parent;
                                                                        contextLeafStack[contextLeafDepth--] = undefined;
                                                                        contextType = context != null && context[$TYPE];
                                                                        continue;
                                                                    }
                                                                    if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                        contextLeafKeys = Object.keys(context);
                                                                        contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                        contextLeaves.parent = contextParent;
                                                                        i = -1;
                                                                        n = contextLeafKeys.length;
                                                                        while (++i < n) {
                                                                            if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                contextLeaves[i] = context[contextLeafKey];
                                                                            }
                                                                        }
                                                                    }
                                                                    contextParent = context;
                                                                    if (context = contextLeaves.pop()) {
                                                                        contextLeafDepth++;
                                                                        contextType = context != null && context[$TYPE];
                                                                    } else {
                                                                        contextType = 'leaf';
                                                                        context = contextParent;
                                                                        contextParent = contextLeaves.parent;
                                                                    }
                                                                    continue;
                                                                }
                                                            key = keyTmp;
                                                            context = contextTmp;
                                                            contextParent = contextParentTmp;
                                                            contextType = contextTypeTmp;
                                                            contextTmp = contextTypeTmp = undefined;
                                                            if (context != null && typeof context === 'object') {
                                                                head = root.__head;
                                                                tail = root.__tail;
                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                context === head && (root.__head = root.__next = head = next);
                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                context.__next = context.__prev = undefined;
                                                                head = tail = next = prev = undefined;
                                                            }
                                                        }
                                                        message[$SIZE] = messageSize - sizeOffset;
                                                        contextParent[key] = context = message;
                                                        break;
                                                    }
                                                    context = contexts[--column];
                                                    key = context[__KEY];
                                                    contextParent = contexts[column - 1] || contextCache;
                                                } while (column > -1);
                                                context[__SELF] = context;
                                                context[__KEY] = key;
                                                context[__PARENT] = contextParent;
                                                context[__ROOT] = contextCache;
                                                if (context[__GENERATION] === undefined) {
                                                    context[__GENERATION] = 0;
                                                }
                                                contextType = context != null && context[$TYPE];
                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                            }
                                            if (context != null && ((jsonKey = key) != null && jsonKey !== __NULL)) {
                                                if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                    if (contextType === 'error') {
                                                        if (boxed === true) {
                                                            err = context;
                                                        } else {
                                                            dest = {};
                                                            src = context;
                                                            keys = Object.keys(src);
                                                            i = -1;
                                                            n = keys.length;
                                                            while (++i < n) {
                                                                x = keys[i];
                                                                !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                            }
                                                            err = dest;
                                                        }
                                                        val = !!includeErrors && err || undefined;
                                                    } else {
                                                        if (boxed === true) {
                                                            val = context;
                                                        } else if (contextValue != null && typeof contextValue === 'object') {
                                                            if (Array.isArray(contextValue)) {
                                                                src = contextValue;
                                                                dest = new Array(n = src.length);
                                                                i = -1;
                                                                while (++i < n) {
                                                                    dest[i] = src[i];
                                                                }
                                                                val = dest;
                                                            } else {
                                                                dest = {};
                                                                src = contextValue;
                                                                keys = Object.keys(src);
                                                                i = -1;
                                                                n = keys.length;
                                                                while (++i < n) {
                                                                    x = keys[i];
                                                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                                }
                                                                val = dest;
                                                            }
                                                        } else {
                                                            val = contextValue;
                                                        }
                                                    }
                                                    if (jsonKey != null && jsonKey !== __NULL) {
                                                        json[jsonKey] = val;
                                                    } else {
                                                        json = jsons[jsonDepth] = val;
                                                    }
                                                } else {
                                                    if (jsonKey != null && jsonKey !== __NULL) {
                                                        json = json[jsonKey] || (json[jsonKey] = {});
                                                    }
                                                }
                                            }
                                            if (context === undefined) {
                                                i = -1;
                                                refLen = path.length;
                                                offset = refLen - column - 1;
                                                optimizedPath.length = refLen;
                                                while (++i < refLen) {
                                                    optimizedPath[i] = path[i];
                                                }
                                                break;
                                            } else if (!!contextType || Array.isArray(contextValue)) {
                                                break;
                                            }
                                            contextParent = context;
                                        }
                                        if (column === length) {
                                            if ((key = path[column]) != null) {
                                                optimizedPath[optimizedPath.length = column + offset] = key;
                                                context = contextParent[key];
                                                if (context != null) {
                                                    if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                        contextInvalidated = context != null && context[__INVALIDATED];
                                                        if (contextInvalidated === true === false) {
                                                            context.__invalidated = true;
                                                            context[$EXPIRES] = 0;
                                                            expired[++expiredLength] = context;
                                                            if (context != null && typeof context === 'object') {
                                                                head = root.__head;
                                                                tail = root.__tail;
                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                context === head && (root.__head = root.__next = head = next);
                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                context.__next = context.__prev = undefined;
                                                                head = tail = next = prev = undefined;
                                                            }
                                                        }
                                                        context = undefined;
                                                    }
                                                }
                                                contextType = context != null && context[$TYPE];
                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                    sizeOffset = 0;
                                                    message = {};
                                                    messageSize = message != null && message[$SIZE] || 0;
                                                    do {
                                                        if (key != null && key !== __NULL) {
                                                            if (context != null && context !== message) {
                                                                contextRefsLength = context.__refsLength || 0;
                                                                messageRefsLength = message.__refsLength || 0;
                                                                i = -1;
                                                                while (++i < contextRefsLength) {
                                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                                        reference[__CONTEXT] = message;
                                                                        message[__REF + (messageRefsLength + i)] = reference;
                                                                        context[__REF + i] = undefined;
                                                                    }
                                                                }
                                                                message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                                context[__REFS_LENGTH] = reference = undefined;
                                                                contextLeafStack = [];
                                                                contextLeafDepth = 0;
                                                                keyTmp = key;
                                                                contextTmp = context;
                                                                contextParentTmp = contextParent;
                                                                contextTypeTmp = contextType;
                                                                recursing:
                                                                    while (contextLeafDepth > -1) {
                                                                        if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                                                            contextRefsLength = context.__refsLength || 0;
                                                                            i = -1;
                                                                            while (++i < contextRefsLength) {
                                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                                    reference.__context = undefined;
                                                                                    context[__REF + i] = undefined;
                                                                                }
                                                                            }
                                                                            context.__refsLength = undefined;
                                                                            contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                            if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                while (++i <= n) {
                                                                                    referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                }
                                                                                referenceContext[__REFS_LENGTH] = n;
                                                                                contextValue[__REF_INDEX] = undefined;
                                                                                contextValue[__CONTEXT] = undefined;
                                                                                referenceContext = undefined;
                                                                            }
                                                                            if (context != null && typeof context === 'object') {
                                                                                head = root.__head;
                                                                                tail = root.__tail;
                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                context.__next = context.__prev = undefined;
                                                                                head = tail = next = prev = undefined;
                                                                            }
                                                                            context = contextParent;
                                                                            contextParent = contextLeaves && contextLeaves.parent;
                                                                            contextLeafStack[contextLeafDepth--] = undefined;
                                                                            contextType = context != null && context[$TYPE];
                                                                            continue;
                                                                        }
                                                                        if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                            contextLeafKeys = Object.keys(context);
                                                                            contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                            contextLeaves.parent = contextParent;
                                                                            i = -1;
                                                                            n = contextLeafKeys.length;
                                                                            while (++i < n) {
                                                                                if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                    contextLeaves[i] = context[contextLeafKey];
                                                                                }
                                                                            }
                                                                        }
                                                                        contextParent = context;
                                                                        if (context = contextLeaves.pop()) {
                                                                            contextLeafDepth++;
                                                                            contextType = context != null && context[$TYPE];
                                                                        } else {
                                                                            contextType = 'leaf';
                                                                            context = contextParent;
                                                                            contextParent = contextLeaves.parent;
                                                                        }
                                                                        continue;
                                                                    }
                                                                key = keyTmp;
                                                                context = contextTmp;
                                                                contextParent = contextParentTmp;
                                                                contextType = contextTypeTmp;
                                                                contextTmp = contextTypeTmp = undefined;
                                                                if (context != null && typeof context === 'object') {
                                                                    head = root.__head;
                                                                    tail = root.__tail;
                                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                    context === head && (root.__head = root.__next = head = next);
                                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                                    context.__next = context.__prev = undefined;
                                                                    head = tail = next = prev = undefined;
                                                                }
                                                            }
                                                            message[$SIZE] = messageSize - sizeOffset;
                                                            contextParent[key] = context = message;
                                                            break;
                                                        }
                                                        context = contexts[--column];
                                                        key = context[__KEY];
                                                        contextParent = contexts[column - 1] || contextCache;
                                                    } while (column > -1);
                                                    context[__SELF] = context;
                                                    context[__KEY] = key;
                                                    context[__PARENT] = contextParent;
                                                    context[__ROOT] = contextCache;
                                                    if (context[__GENERATION] === undefined) {
                                                        context[__GENERATION] = 0;
                                                    }
                                                    contextType = context != null && context[$TYPE];
                                                    contextValue = contextType === 'sentinel' ? context.value : context;
                                                }
                                                if (context != null && ((jsonKey = key) != null && jsonKey !== __NULL)) {
                                                    if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                        if (contextType === 'error') {
                                                            if (boxed === true) {
                                                                err = context;
                                                            } else {
                                                                dest = {};
                                                                src = context;
                                                                keys = Object.keys(src);
                                                                i = -1;
                                                                n = keys.length;
                                                                while (++i < n) {
                                                                    x = keys[i];
                                                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                                }
                                                                err = dest;
                                                            }
                                                            val = !!includeErrors && err || undefined;
                                                        } else {
                                                            if (boxed === true) {
                                                                val = context;
                                                            } else if (contextValue != null && typeof contextValue === 'object') {
                                                                if (Array.isArray(contextValue)) {
                                                                    src = contextValue;
                                                                    dest = new Array(n = src.length);
                                                                    i = -1;
                                                                    while (++i < n) {
                                                                        dest[i] = src[i];
                                                                    }
                                                                    val = dest;
                                                                } else {
                                                                    dest = {};
                                                                    src = contextValue;
                                                                    keys = Object.keys(src);
                                                                    i = -1;
                                                                    n = keys.length;
                                                                    while (++i < n) {
                                                                        x = keys[i];
                                                                        !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                                    }
                                                                    val = dest;
                                                                }
                                                            } else {
                                                                val = contextValue;
                                                            }
                                                        }
                                                        if (jsonKey != null && jsonKey !== __NULL) {
                                                            json[jsonKey] = val;
                                                        } else {
                                                            json = jsons[jsonDepth] = val;
                                                        }
                                                    } else {
                                                        if (jsonKey != null && jsonKey !== __NULL) {
                                                            json = json[jsonKey] || (json[jsonKey] = {});
                                                        }
                                                    }
                                                }
                                            }
                                            if (context != null) {
                                                if ((refContainer = path[__CONTAINER] || path).__context === undefined) {
                                                    backRefs = context.__refsLength || 0;
                                                    context['__ref' + backRefs] = refContainer;
                                                    context.__refsLength = backRefs + 1;
                                                    refContainer.__refIndex = backRefs;
                                                    refContainer.__context = context;
                                                    refContainer = backRefs = undefined;
                                                }
                                            }
                                        }
                                        expandsCount = Number(contextType === 'error') - 1;
                                        column = outermostColumn;
                                        path = outermostPath;
                                        offset = length - column;
                                        length = outermostLength;
                                        key = branchKeyTmp;
                                        outermostColumn = undefined;
                                        outermostPath = undefined;
                                        outermostLength = undefined;
                                        branchKeyTmp = undefined;
                                    }
                                } while ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue));
                            } else if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                sizeOffset = 0;
                                message = {};
                                messageSize = message != null && message[$SIZE] || 0;
                                do {
                                    if (key != null && key !== __NULL) {
                                        if (context != null && context !== message) {
                                            contextRefsLength = context.__refsLength || 0;
                                            messageRefsLength = message.__refsLength || 0;
                                            i = -1;
                                            while (++i < contextRefsLength) {
                                                if ((reference = context[__REF + i]) !== undefined) {
                                                    reference[__CONTEXT] = message;
                                                    message[__REF + (messageRefsLength + i)] = reference;
                                                    context[__REF + i] = undefined;
                                                }
                                            }
                                            message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                            context[__REFS_LENGTH] = reference = undefined;
                                            contextLeafStack = [];
                                            contextLeafDepth = 0;
                                            keyTmp = key;
                                            contextTmp = context;
                                            contextParentTmp = contextParent;
                                            contextTypeTmp = contextType;
                                            recursing:
                                                while (contextLeafDepth > -1) {
                                                    if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                                        contextRefsLength = context.__refsLength || 0;
                                                        i = -1;
                                                        while (++i < contextRefsLength) {
                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                reference.__context = undefined;
                                                                context[__REF + i] = undefined;
                                                            }
                                                        }
                                                        context.__refsLength = undefined;
                                                        contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                        if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                            i = (contextValue[__REF_INDEX] || 0) - 1;
                                                            n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                            while (++i <= n) {
                                                                referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                            }
                                                            referenceContext[__REFS_LENGTH] = n;
                                                            contextValue[__REF_INDEX] = undefined;
                                                            contextValue[__CONTEXT] = undefined;
                                                            referenceContext = undefined;
                                                        }
                                                        if (context != null && typeof context === 'object') {
                                                            head = root.__head;
                                                            tail = root.__tail;
                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                            context === head && (root.__head = root.__next = head = next);
                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                            context.__next = context.__prev = undefined;
                                                            head = tail = next = prev = undefined;
                                                        }
                                                        context = contextParent;
                                                        contextParent = contextLeaves && contextLeaves.parent;
                                                        contextLeafStack[contextLeafDepth--] = undefined;
                                                        contextType = context != null && context[$TYPE];
                                                        continue;
                                                    }
                                                    if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                        contextLeafKeys = Object.keys(context);
                                                        contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                        contextLeaves.parent = contextParent;
                                                        i = -1;
                                                        n = contextLeafKeys.length;
                                                        while (++i < n) {
                                                            if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                contextLeaves[i] = context[contextLeafKey];
                                                            }
                                                        }
                                                    }
                                                    contextParent = context;
                                                    if (context = contextLeaves.pop()) {
                                                        contextLeafDepth++;
                                                        contextType = context != null && context[$TYPE];
                                                    } else {
                                                        contextType = 'leaf';
                                                        context = contextParent;
                                                        contextParent = contextLeaves.parent;
                                                    }
                                                    continue;
                                                }
                                            key = keyTmp;
                                            context = contextTmp;
                                            contextParent = contextParentTmp;
                                            contextType = contextTypeTmp;
                                            contextTmp = contextTypeTmp = undefined;
                                            if (context != null && typeof context === 'object') {
                                                head = root.__head;
                                                tail = root.__tail;
                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                context === head && (root.__head = root.__next = head = next);
                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                context.__next = context.__prev = undefined;
                                                head = tail = next = prev = undefined;
                                            }
                                        }
                                        message[$SIZE] = messageSize - sizeOffset;
                                        contextParent[key] = context = message;
                                        break;
                                    }
                                    context = contexts[--column];
                                    key = context[__KEY];
                                    contextParent = contexts[column - 1] || contextCache;
                                } while (column > -1);
                                context[__SELF] = context;
                                context[__KEY] = key;
                                context[__PARENT] = contextParent;
                                context[__ROOT] = contextCache;
                                if (context[__GENERATION] === undefined) {
                                    context[__GENERATION] = 0;
                                }
                                contextType = context != null && context[$TYPE];
                                contextValue = contextType === 'sentinel' ? context.value : context;
                            }
                            key = branchKeyTmp;
                            contexts[column] = contextParent = context;
                            if (isKeySet === true && ((jsonKey = key) != null && jsonKey !== __NULL)) {
                                do {
                                    jsonKey = jsonKeys[jsonDepth];
                                } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                                if (jsonKey != null && jsonKey !== __NULL) {
                                    json = jsons[jsonDepth - 1] || jsonCache;
                                } else {
                                    json = jsonCache;
                                }
                                if (jsonKey != null && jsonKey !== __NULL) {
                                    json = json[jsonKey] || (json[jsonKey] = {});
                                }
                            }
                            jsons[jsonDepth] = json;
                            jsonDepth += 1;
                        }
                    }
                    if (column === length) {
                        key = path[column];
                        isKeySet = false;
                        if (key != null && typeof key === 'object') {
                            isKeySet = true;
                            if (Array.isArray(key)) {
                                key = key[key.index || (key.index = 0)];
                                if (key != null && typeof key === 'object') {
                                    key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            } else {
                                key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        }
                        requestedPath[requestedPath.length = column] = key;
                        if (key != null && key !== __NULL) {
                            jsonDepth = column;
                            isKeySet = true;
                            !!jsonCache && isKeySet === true && (jsonKeys[jsonDepth] = key);
                            optimizedPath[optimizedPath.length = column + offset] = key;
                            context = contextParent[key];
                            if (context != null) {
                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                    contextInvalidated = context != null && context[__INVALIDATED];
                                    if (contextInvalidated === true === false) {
                                        context.__invalidated = true;
                                        context[$EXPIRES] = 0;
                                        expired[++expiredLength] = context;
                                        if (context != null && typeof context === 'object') {
                                            head = root.__head;
                                            tail = root.__tail;
                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                            context === head && (root.__head = root.__next = head = next);
                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                            context.__next = context.__prev = undefined;
                                            head = tail = next = prev = undefined;
                                        }
                                    }
                                    context = undefined;
                                }
                            }
                            contextType = context != null && context[$TYPE];
                            contextValue = contextType === 'sentinel' ? context.value : context;
                            contextTimestamp = context != null && context[$TIMESTAMP];
                            message = value;
                            messageType = message != null && message[$TYPE];
                            messageValue = messageType === 'sentinel' ? message.value : message;
                            messageTimestamp = message != null && message[$TIMESTAMP];
                            messageExpires = (message != null || null) && message[$EXPIRES];
                            if ((messageTimestamp < contextTimestamp || messageExpires === 0 && ((context = message) || true)) === false === true) {
                                messageSize = message != null && message[$SIZE] || 0;
                                originalMessageSize = messageSize || 0;
                                if ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) {
                                    messageType = 'array';
                                    originalMessageSize = messageValue.length || 1;
                                    messageSize = (messageType === 'sentinel' && 50 || 0) + originalMessageSize;
                                    messageValue[__CONTAINER] = message;
                                } else if (messageType === 'sentinel') {
                                    messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                } else if (messageType === 'error') {
                                    if (typeof errorSelector === 'function') {
                                        message = Enumerable.errorSelector(message);
                                    }
                                    messageSize = 50 + originalMessageSize;
                                } else if (messageValue == null || typeof messageValue !== 'object') {
                                    originalMessageSize = typeof messageValue === 'string' && messageValue.length || 1;
                                    messageSize = 50 + originalMessageSize;
                                    messageType = 'sentinel';
                                    message = {
                                        '$type': messageType,
                                        'value': messageValue
                                    };
                                } else {
                                    messageSize = message[$SIZE] || 50 * 2;
                                    messageType = message[$TYPE] = messageType || 'leaf';
                                }
                                message[$SIZE] = sizeOffset = messageSize;
                                if (!!((messageExpires = (message != null || null) && message[$EXPIRES]) != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < now())) === false) {
                                    messageSize = message != null && message[$SIZE] || 0;
                                    do {
                                        if (key != null && key !== __NULL) {
                                            if (context != null && context !== message) {
                                                contextRefsLength = context.__refsLength || 0;
                                                messageRefsLength = message.__refsLength || 0;
                                                i = -1;
                                                while (++i < contextRefsLength) {
                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                        reference[__CONTEXT] = message;
                                                        message[__REF + (messageRefsLength + i)] = reference;
                                                        context[__REF + i] = undefined;
                                                    }
                                                }
                                                message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                context[__REFS_LENGTH] = reference = undefined;
                                                contextLeafStack = [];
                                                contextLeafDepth = 0;
                                                keyTmp = key;
                                                contextTmp = context;
                                                contextParentTmp = contextParent;
                                                contextTypeTmp = contextType;
                                                recursing:
                                                    while (contextLeafDepth > -1) {
                                                        if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                                            contextRefsLength = context.__refsLength || 0;
                                                            i = -1;
                                                            while (++i < contextRefsLength) {
                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                    reference.__context = undefined;
                                                                    context[__REF + i] = undefined;
                                                                }
                                                            }
                                                            context.__refsLength = undefined;
                                                            contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                            if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                while (++i <= n) {
                                                                    referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                }
                                                                referenceContext[__REFS_LENGTH] = n;
                                                                contextValue[__REF_INDEX] = undefined;
                                                                contextValue[__CONTEXT] = undefined;
                                                                referenceContext = undefined;
                                                            }
                                                            if (context != null && typeof context === 'object') {
                                                                head = root.__head;
                                                                tail = root.__tail;
                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                context === head && (root.__head = root.__next = head = next);
                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                context.__next = context.__prev = undefined;
                                                                head = tail = next = prev = undefined;
                                                            }
                                                            context = contextParent;
                                                            contextParent = contextLeaves && contextLeaves.parent;
                                                            contextLeafStack[contextLeafDepth--] = undefined;
                                                            contextType = context != null && context[$TYPE];
                                                            continue;
                                                        }
                                                        if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                            contextLeafKeys = Object.keys(context);
                                                            contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                            contextLeaves.parent = contextParent;
                                                            i = -1;
                                                            n = contextLeafKeys.length;
                                                            while (++i < n) {
                                                                if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                    contextLeaves[i] = context[contextLeafKey];
                                                                }
                                                            }
                                                        }
                                                        contextParent = context;
                                                        if (context = contextLeaves.pop()) {
                                                            contextLeafDepth++;
                                                            contextType = context != null && context[$TYPE];
                                                        } else {
                                                            contextType = 'leaf';
                                                            context = contextParent;
                                                            contextParent = contextLeaves.parent;
                                                        }
                                                        continue;
                                                    }
                                                key = keyTmp;
                                                context = contextTmp;
                                                contextParent = contextParentTmp;
                                                contextType = contextTypeTmp;
                                                contextTmp = contextTypeTmp = undefined;
                                                if (context != null && typeof context === 'object') {
                                                    head = root.__head;
                                                    tail = root.__tail;
                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                    context === head && (root.__head = root.__next = head = next);
                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                    context.__next = context.__prev = undefined;
                                                    head = tail = next = prev = undefined;
                                                }
                                            }
                                            message[$SIZE] = messageSize - sizeOffset;
                                            contextParent[key] = context = message;
                                            break;
                                        }
                                        context = contexts[--column];
                                        key = context[__KEY];
                                        contextParent = contexts[column - 1] || contextCache;
                                    } while (column > -1);
                                    context[__SELF] = context;
                                    context[__KEY] = key;
                                    context[__PARENT] = contextParent;
                                    context[__ROOT] = contextCache;
                                    if (context[__GENERATION] === undefined) {
                                        context[__GENERATION] = 0;
                                    }
                                    contextTmp = context;
                                    contextParentTmp = contextParent;
                                    while (context !== undefined) {
                                        contextSize = context['$size'] = (context['$size'] || 0) + sizeOffset;
                                        contextTmp2 = context;
                                        if (context[__GENERATION_UPDATED] !== generation) {
                                            generationStack = [];
                                            generationDepth = 0;
                                            while (generationDepth > -1) {
                                                if ((generationReferences = generationStack[generationDepth]) === undefined) {
                                                    i = k = -1;
                                                    n = context[__REFS_LENGTH] || 0;
                                                    generationStack[generationDepth] = generationReferences = [];
                                                    context[__GENERATION_UPDATED] = generation;
                                                    context[__GENERATION] = (context[__GENERATION] || 0) + 1;
                                                    if ((reference = context[__PARENT]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                        generationReferences[++k] = reference;
                                                    }
                                                    while (++i < n) {
                                                        if ((reference = context[__REF + i]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                            generationReferences[++k] = reference;
                                                        }
                                                    }
                                                }
                                                if ((context = generationReferences.pop()) !== undefined) {
                                                    ++generationDepth;
                                                } else {
                                                    generationStack[generationDepth--] = undefined;
                                                }
                                            }
                                        }
                                        reference = generationStack = generationReferences = undefined;
                                        context = contextTmp2;
                                        if ((contextParent = context[__PARENT]) !== undefined && contextSize <= 0) {
                                            contextRefsLength = context.__refsLength || 0;
                                            i = -1;
                                            while (++i < contextRefsLength) {
                                                if ((reference = context[__REF + i]) !== undefined) {
                                                    reference.__context = undefined;
                                                    context[__REF + i] = undefined;
                                                }
                                            }
                                            context.__refsLength = undefined;
                                            contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                            if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                i = (contextValue[__REF_INDEX] || 0) - 1;
                                                n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                while (++i <= n) {
                                                    referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                }
                                                referenceContext[__REFS_LENGTH] = n;
                                                contextValue[__REF_INDEX] = undefined;
                                                contextValue[__CONTEXT] = undefined;
                                                referenceContext = undefined;
                                            }
                                            if (context != null && typeof context === 'object') {
                                                head = root.__head;
                                                tail = root.__tail;
                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                context === head && (root.__head = root.__next = head = next);
                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                context.__next = context.__prev = undefined;
                                                head = tail = next = prev = undefined;
                                            }
                                        }
                                        context = contextParent;
                                    }
                                    context = contextTmp;
                                    contextParent = contextParentTmp;
                                    contextTmp = contextTmp2 = contextParentTmp = undefined;
                                    contextType = context != null && context[$TYPE];
                                    contextValue = contextType === 'sentinel' ? context.value : context;
                                }
                            }
                        }
                    }
                    break resolvePath;
                } while (true);
            if (context != null) {
                if (context != null && typeof context === 'object' && contextExpires !== 1) {
                    head = root.__head;
                    tail = root.__tail;
                    next = context.__next, prev = context.__prev;
                    if (context !== head) {
                        next && (next != null && typeof next === 'object') && (next.__prev = prev);
                        prev && (prev != null && typeof prev === 'object') && (prev.__next = next);
                        (next = head) && (head != null && typeof head === 'object') && (head.__prev = context);
                        root.__head = root.__next = head = context;
                        head.__next = next;
                        head.__prev = undefined;
                    }
                    if (tail == null || context === tail) {
                        root.__tail = root.__prev = tail = prev || context;
                    }
                    head = tail = next = prev = undefined;
                }
                if (contextType === 'error') {
                    if (expandsCount > -1) {
                        requestedPath[requestedPath.length] = null;
                    }
                    contextValue = context;
                }
            }
            if (context == null || refreshing === true) {
                src = optimizedPath;
                dest = new Array(n = src.length);
                i = -1;
                while (++i < n) {
                    dest[i] = src[i];
                }
                opt = dest;
                src = optimizedBoundPath;
                dest = new Array(n = src.length);
                i = -1;
                while (++i < n) {
                    dest[i] = src[i];
                }
                req = dest;
                reqLen = n;
                i = -1;
                n = requestedPath.length;
                while (++i < n) {
                    key = path[i];
                    key2 = requestedPath[i];
                    req[reqLen + i] = key && typeof key === 'object' && [key2] || key2;
                }
                if (column < length) {
                    j = column + 1;
                    k = length + 1;
                    reqLen = req.length;
                    optLen = opt.length;
                    i = -1;
                    n = k - j;
                    while (++i < n) {
                        req[reqLen + i] = opt[optLen + i] = path[j + i];
                    }
                }
                req.pathSetIndex = index;
                requestedMissingPaths[requestedMissingPaths.length] = req;
                optimizedMissingPaths[optimizedMissingPaths.length] = opt;
            } else if (contextValue !== undefined || boxed === true) {
                src = optimizedPath;
                dest = new Array(n = src.length);
                i = -1;
                while (++i < n) {
                    dest[i] = src[i];
                }
                opt = dest;
                src = requestedPath;
                dest = new Array(n = src.length);
                i = -1;
                while (++i < n) {
                    dest[i] = src[i];
                }
                req = dest;
                requestedPaths[requestedPaths.length] = req;
                optimizedPaths[optimizedPaths.length] = opt;
                hasValues = true;
                if (err) {
                    errors[errors.length] = {
                        path: req,
                        value: err
                    };
                    err = undefined;
                } else if ((jsonKey = key) != null && jsonKey !== __NULL) {
                    if (contextType === 'error') {
                        if (err === undefined) {
                            if (boxed === true) {
                                err = context;
                            } else {
                                dest = {};
                                src = context;
                                keys = Object.keys(src);
                                i = -1;
                                n = keys.length;
                                while (++i < n) {
                                    x = keys[i];
                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                }
                                err = dest;
                            }
                            val = !!includeErrors && err || undefined;
                        }
                        errors[errors.length] = {
                            path: req,
                            value: err
                        };
                        err = undefined;
                    } else {
                        if (boxed === true) {
                            val = context;
                        } else if (contextValue != null && typeof contextValue === 'object') {
                            if (Array.isArray(contextValue)) {
                                src = contextValue;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                val = dest;
                            } else {
                                dest = {};
                                src = contextValue;
                                keys = Object.keys(src);
                                i = -1;
                                n = keys.length;
                                while (++i < n) {
                                    x = keys[i];
                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                }
                                val = dest;
                            }
                        } else {
                            val = contextValue;
                        }
                    }
                    do {
                        jsonKey = jsonKeys[jsonDepth];
                    } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                    if (jsonKey != null && jsonKey !== __NULL) {
                        json = jsons[jsonDepth - 1] || jsonCache;
                    } else {
                        json = jsonCache;
                    }
                    if (jsonKey != null && jsonKey !== __NULL) {
                        json[jsonKey] = val;
                    } else {
                        json = jsons[jsonDepth] = val;
                    }
                }
            }
            for (; column > -1; --column) {
                key = path[column];
                if (key == null || typeof key !== 'object') {
                    continue;
                }
                isKeySet = true;
                if (Array.isArray(key)) {
                    jsonDepth -= Number(jsonDepth > 0);
                    if (++key.index === key.length) {
                        key = key[key.index = 0];
                        if (key == null || typeof key !== 'object') {
                            continue;
                        }
                    } else {
                        break;
                    }
                }
                if (++key[__OFFSET] > (key.to || (key.to = key.from + (key.length || 1) - 1))) {
                    key[__OFFSET] = key.from;
                    continue;
                }
                jsonDepth -= Number(jsonDepth > 0);
                break;
            }
        }
        path.column = column;
    }
    json = jsons[-1];
    if (!!values) {
        values[0] = hasValues && {
            'paths': requestedPaths,
            'jsong': json
        } || undefined;
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setPathsAsPathMap() {
    var returnBlocker;
    var generation, model, state, values, errorSelector, onNext, errors, boxed, includeErrors, refreshing, connected, root, contextCache, context, expired, expiredLength, boundPath, optimizedBoundPath, column, offset, jsonDepth, boundPathValue, contexts, requested, optimized, requestedPaths, optimizedPaths, requestedMissingPaths, optimizedMissingPaths, requestedPath, optimizedPath, paths, jsons, jsonKeys, contextParent, index, count, hasValues, jsonCache, json, refsByCols, pathSet, value, path, length, resetOptimizedDepth, reference, i, j, n, isKeySet, key, contextExpires, contextInvalidated, head, tail, next, prev, contextType, contextValue, branchKeyTmp, expandsCount, outermostColumn, refLen, outermostLength, outermostPath, sizeOffset, message, messageSize, contextRefsLength, messageRefsLength, contextLeafStack, contextLeafDepth, keyTmp, contextTmp, contextParentTmp, contextTypeTmp, referenceContext, contextLeaves, contextLeafKeys, contextLeafKey, refContainer, backRefs, jsonKey, contextTimestamp, messageType, messageValue, messageTimestamp, messageExpires, originalMessageSize, contextSize, contextTmp2, generationStack, generationDepth, generationReferences, k, src, dest, opt, req, reqLen, key2, optLen, err, keys, x, val;
    generation = __GENERATION_GENERATION++;
    model = arguments[0];
    state = arguments[1];
    values = arguments[2];
    errorSelector = arguments[3];
    if (typeof values === 'function') {
        onNext = values;
        values = undefined;
    }
    errors = state.errors || (state.errors = []);
    boxed = model._boxed;
    includeErrors = model._includeErrors;
    refreshing = model._refreshing;
    connected = model._connected;
    root = model._root;
    contextCache = context = model._cache;
    expired = root.expired;
    expiredLength = expired.length;
    boundPath = state.boundPath || model._path;
    optimizedBoundPath = [];
    column = state.column || (state.column = 0) - 1;
    offset = state.offset || (state.offset = 0);
    jsonDepth = state.jsonDepth || (state.jsonDepth = 0);
    boundPathValue = state.boundPathValue;
    contexts = state.contexts || (state.contexts = []);
    requested = state.requested || (state.requested = {});
    optimized = state.optimized || (state.optimized = {});
    requestedPaths = state.requestedPaths || (state.requestedPaths = []);
    optimizedPaths = state.optimizedPaths || (state.optimizedPaths = []);
    requestedMissingPaths = state.requestedMissingPaths || (state.requestedMissingPaths = []);
    optimizedMissingPaths = state.optimizedMissingPaths || (state.optimizedMissingPaths = []);
    requestedPath = state.requestedPath || (state.requestedPath = []);
    optimizedPath = state.optimizedPath || (state.optimizedPath = []);
    paths = state;
    jsons = state.jsons || (state.jsons = []);
    jsonKeys = state.jsonKeys || (state.jsonKeys = []);
    optimizedBoundPath = boundPath;
    if (contextParent == null && (contextParent = model.__context) == null) {
        if (boundPath.length === 0) {
            contextParent = contextCache;
        } else {
            if (boundPathValue == null) {
                boundPathValue = getContextSync.call(model);
            }
            optimizedBoundPath = boundPathValue.path;
            if ((contextParent = boundPathValue.value) == null) {
                contextParent = {};
            }
            boundPathValue.requested = [];
            boundPathValue.optimized = [];
            state.boundPathValue = boundPathValue;
        }
    }
    contexts[-1] = context = contextParent;
    index = paths.index || (paths.index = 0);
    count = paths.length;
    for (; index < count; ++index) {
        pathSet = paths[index];
        hasValues = hasValues || false;
        jsonDepth = jsonKeys.length = 0;
        jsonCache = json = jsons[-1] = !!values && values[0] || undefined;
        offset = 0;
        refsByCols = state.refsByCols = [];
        refsByCols[-1] = optimizedBoundPath;
        if (Array.isArray(pathSet)) {
            value = undefined;
            path = pathSet;
        } else {
            value = pathSet.value;
            path = pathSet.path;
        }
        length = path.length - 1;
        column = path.column || (path.column = 0);
        while (column > -1) {
            resetOptimizedDepth = column;
            while (--resetOptimizedDepth >= -1) {
                if (!!(reference = refsByCols[resetOptimizedDepth])) {
                    i = j = -1;
                    n = reference.length;
                    offset = n - ++resetOptimizedDepth;
                    while (++i < n) {
                        optimizedPath[++j] = reference[i];
                    }
                    while (resetOptimizedDepth < column) {
                        optimizedPath[++j] = requestedPath[resetOptimizedDepth++];
                    }
                    optimizedPath.length = offset + resetOptimizedDepth;
                    break;
                }
            }
            contextParent = contexts[column - 1];
            resolvePath:
                do {
                    for (; column < length; ++column) {
                        key = path[column];
                        isKeySet = false;
                        if (key != null && typeof key === 'object') {
                            isKeySet = true;
                            if (Array.isArray(key)) {
                                key = key[key.index || (key.index = 0)];
                                if (key != null && typeof key === 'object') {
                                    key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            } else {
                                key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        }
                        requestedPath[requestedPath.length = column] = key;
                        if (key != null && key !== __NULL) {
                            jsonDepth = column;
                            isKeySet = true;
                            !!jsonCache && isKeySet === true && (jsonKeys[jsonDepth] = key);
                            optimizedPath[optimizedPath.length = column + offset] = key;
                            context = contextParent[key];
                            if (context != null) {
                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                    contextInvalidated = context != null && context[__INVALIDATED];
                                    if (contextInvalidated === true === false) {
                                        context.__invalidated = true;
                                        context[$EXPIRES] = 0;
                                        expired[++expiredLength] = context;
                                        if (context != null && typeof context === 'object') {
                                            head = root.__head;
                                            tail = root.__tail;
                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                            context === head && (root.__head = root.__next = head = next);
                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                            context.__next = context.__prev = undefined;
                                            head = tail = next = prev = undefined;
                                        }
                                    }
                                    context = undefined;
                                }
                            }
                            contextType = context != null && context[$TYPE];
                            contextValue = contextType === 'sentinel' ? context.value : context;
                            branchKeyTmp = key;
                            if ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue)) {
                                expandsCount = -1;
                                refsByCols[outermostColumn = column] = contextValue;
                                do {
                                    branchKeyTmp = key;
                                    if ((context = context.__context) !== undefined) {
                                        i = -1;
                                        refLen = contextValue.length;
                                        offset = refLen - column - 1;
                                        optimizedPath.length = refLen;
                                        while (++i < refLen) {
                                            optimizedPath[i] = contextValue[i];
                                        }
                                        if (context != null) {
                                            if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                contextInvalidated = context != null && context[__INVALIDATED];
                                                if (contextInvalidated === true === false) {
                                                    context.__invalidated = true;
                                                    context[$EXPIRES] = 0;
                                                    expired[++expiredLength] = context;
                                                    if (context != null && typeof context === 'object') {
                                                        head = root.__head;
                                                        tail = root.__tail;
                                                        (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                        (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                        context === head && (root.__head = root.__next = head = next);
                                                        context === tail && (root.__tail = root.__prev = tail = prev);
                                                        context.__next = context.__prev = undefined;
                                                        head = tail = next = prev = undefined;
                                                    }
                                                }
                                                context = undefined;
                                            }
                                        }
                                        contextType = context != null && context[$TYPE];
                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                        if (contextType === 'error') {
                                            expandsCount = 0;
                                            break resolvePath;
                                        } else if (context != null === false) {
                                            expandsCount = -1;
                                            break resolvePath;
                                        }
                                        contextParent = context;
                                    } else {
                                        refsByCols[outermostColumn = column] = contextValue;
                                        outermostLength = length;
                                        outermostPath = path;
                                        offset = 0;
                                        column = -1;
                                        path = contextValue;
                                        length = path.length - 1;
                                        contextParent = contextCache;
                                        while (++column < length) {
                                            if ((key = path[column]) == null) {
                                                continue;
                                            }
                                            optimizedPath[optimizedPath.length = column + offset] = key;
                                            context = contextParent[key];
                                            if (context != null) {
                                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                    contextInvalidated = context != null && context[__INVALIDATED];
                                                    if (contextInvalidated === true === false) {
                                                        context.__invalidated = true;
                                                        context[$EXPIRES] = 0;
                                                        expired[++expiredLength] = context;
                                                        if (context != null && typeof context === 'object') {
                                                            head = root.__head;
                                                            tail = root.__tail;
                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                            context === head && (root.__head = root.__next = head = next);
                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                            context.__next = context.__prev = undefined;
                                                            head = tail = next = prev = undefined;
                                                        }
                                                    }
                                                    context = undefined;
                                                }
                                            }
                                            contextType = context != null && context[$TYPE];
                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                            if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                sizeOffset = 0;
                                                message = {};
                                                messageSize = message != null && message[$SIZE] || 0;
                                                do {
                                                    if (key != null && key !== __NULL) {
                                                        if (context != null && context !== message) {
                                                            contextRefsLength = context.__refsLength || 0;
                                                            messageRefsLength = message.__refsLength || 0;
                                                            i = -1;
                                                            while (++i < contextRefsLength) {
                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                    reference[__CONTEXT] = message;
                                                                    message[__REF + (messageRefsLength + i)] = reference;
                                                                    context[__REF + i] = undefined;
                                                                }
                                                            }
                                                            message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                            context[__REFS_LENGTH] = reference = undefined;
                                                            contextLeafStack = [];
                                                            contextLeafDepth = 0;
                                                            keyTmp = key;
                                                            contextTmp = context;
                                                            contextParentTmp = contextParent;
                                                            contextTypeTmp = contextType;
                                                            recursing:
                                                                while (contextLeafDepth > -1) {
                                                                    if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                                                        contextRefsLength = context.__refsLength || 0;
                                                                        i = -1;
                                                                        while (++i < contextRefsLength) {
                                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                                reference.__context = undefined;
                                                                                context[__REF + i] = undefined;
                                                                            }
                                                                        }
                                                                        context.__refsLength = undefined;
                                                                        contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                        if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                            i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                            n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                            while (++i <= n) {
                                                                                referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                            }
                                                                            referenceContext[__REFS_LENGTH] = n;
                                                                            contextValue[__REF_INDEX] = undefined;
                                                                            contextValue[__CONTEXT] = undefined;
                                                                            referenceContext = undefined;
                                                                        }
                                                                        if (context != null && typeof context === 'object') {
                                                                            head = root.__head;
                                                                            tail = root.__tail;
                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                            context === head && (root.__head = root.__next = head = next);
                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                            context.__next = context.__prev = undefined;
                                                                            head = tail = next = prev = undefined;
                                                                        }
                                                                        context = contextParent;
                                                                        contextParent = contextLeaves && contextLeaves.parent;
                                                                        contextLeafStack[contextLeafDepth--] = undefined;
                                                                        contextType = context != null && context[$TYPE];
                                                                        continue;
                                                                    }
                                                                    if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                        contextLeafKeys = Object.keys(context);
                                                                        contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                        contextLeaves.parent = contextParent;
                                                                        i = -1;
                                                                        n = contextLeafKeys.length;
                                                                        while (++i < n) {
                                                                            if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                contextLeaves[i] = context[contextLeafKey];
                                                                            }
                                                                        }
                                                                    }
                                                                    contextParent = context;
                                                                    if (context = contextLeaves.pop()) {
                                                                        contextLeafDepth++;
                                                                        contextType = context != null && context[$TYPE];
                                                                    } else {
                                                                        contextType = 'leaf';
                                                                        context = contextParent;
                                                                        contextParent = contextLeaves.parent;
                                                                    }
                                                                    continue;
                                                                }
                                                            key = keyTmp;
                                                            context = contextTmp;
                                                            contextParent = contextParentTmp;
                                                            contextType = contextTypeTmp;
                                                            contextTmp = contextTypeTmp = undefined;
                                                            if (context != null && typeof context === 'object') {
                                                                head = root.__head;
                                                                tail = root.__tail;
                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                context === head && (root.__head = root.__next = head = next);
                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                context.__next = context.__prev = undefined;
                                                                head = tail = next = prev = undefined;
                                                            }
                                                        }
                                                        message[$SIZE] = messageSize - sizeOffset;
                                                        contextParent[key] = context = message;
                                                        break;
                                                    }
                                                    context = contexts[--column];
                                                    key = context[__KEY];
                                                    contextParent = contexts[column - 1] || contextCache;
                                                } while (column > -1);
                                                context[__SELF] = context;
                                                context[__KEY] = key;
                                                context[__PARENT] = contextParent;
                                                context[__ROOT] = contextCache;
                                                if (context[__GENERATION] === undefined) {
                                                    context[__GENERATION] = 0;
                                                }
                                                contextType = context != null && context[$TYPE];
                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                            }
                                            if (context === undefined) {
                                                i = -1;
                                                refLen = path.length;
                                                offset = refLen - column - 1;
                                                optimizedPath.length = refLen;
                                                while (++i < refLen) {
                                                    optimizedPath[i] = path[i];
                                                }
                                                break;
                                            } else if (!!contextType || Array.isArray(contextValue)) {
                                                break;
                                            }
                                            contextParent = context;
                                        }
                                        if (column === length) {
                                            if ((key = path[column]) != null) {
                                                optimizedPath[optimizedPath.length = column + offset] = key;
                                                context = contextParent[key];
                                                if (context != null) {
                                                    if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                        contextInvalidated = context != null && context[__INVALIDATED];
                                                        if (contextInvalidated === true === false) {
                                                            context.__invalidated = true;
                                                            context[$EXPIRES] = 0;
                                                            expired[++expiredLength] = context;
                                                            if (context != null && typeof context === 'object') {
                                                                head = root.__head;
                                                                tail = root.__tail;
                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                context === head && (root.__head = root.__next = head = next);
                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                context.__next = context.__prev = undefined;
                                                                head = tail = next = prev = undefined;
                                                            }
                                                        }
                                                        context = undefined;
                                                    }
                                                }
                                                contextType = context != null && context[$TYPE];
                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                if ((!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) && !Array.isArray(contextValue)) {
                                                    sizeOffset = 0;
                                                    message = {};
                                                    messageSize = message != null && message[$SIZE] || 0;
                                                    do {
                                                        if (key != null && key !== __NULL) {
                                                            if (context != null && context !== message) {
                                                                contextRefsLength = context.__refsLength || 0;
                                                                messageRefsLength = message.__refsLength || 0;
                                                                i = -1;
                                                                while (++i < contextRefsLength) {
                                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                                        reference[__CONTEXT] = message;
                                                                        message[__REF + (messageRefsLength + i)] = reference;
                                                                        context[__REF + i] = undefined;
                                                                    }
                                                                }
                                                                message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                                context[__REFS_LENGTH] = reference = undefined;
                                                                contextLeafStack = [];
                                                                contextLeafDepth = 0;
                                                                keyTmp = key;
                                                                contextTmp = context;
                                                                contextParentTmp = contextParent;
                                                                contextTypeTmp = contextType;
                                                                recursing:
                                                                    while (contextLeafDepth > -1) {
                                                                        if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                                                            contextRefsLength = context.__refsLength || 0;
                                                                            i = -1;
                                                                            while (++i < contextRefsLength) {
                                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                                    reference.__context = undefined;
                                                                                    context[__REF + i] = undefined;
                                                                                }
                                                                            }
                                                                            context.__refsLength = undefined;
                                                                            contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                            if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                while (++i <= n) {
                                                                                    referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                }
                                                                                referenceContext[__REFS_LENGTH] = n;
                                                                                contextValue[__REF_INDEX] = undefined;
                                                                                contextValue[__CONTEXT] = undefined;
                                                                                referenceContext = undefined;
                                                                            }
                                                                            if (context != null && typeof context === 'object') {
                                                                                head = root.__head;
                                                                                tail = root.__tail;
                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                context.__next = context.__prev = undefined;
                                                                                head = tail = next = prev = undefined;
                                                                            }
                                                                            context = contextParent;
                                                                            contextParent = contextLeaves && contextLeaves.parent;
                                                                            contextLeafStack[contextLeafDepth--] = undefined;
                                                                            contextType = context != null && context[$TYPE];
                                                                            continue;
                                                                        }
                                                                        if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                            contextLeafKeys = Object.keys(context);
                                                                            contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                            contextLeaves.parent = contextParent;
                                                                            i = -1;
                                                                            n = contextLeafKeys.length;
                                                                            while (++i < n) {
                                                                                if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                    contextLeaves[i] = context[contextLeafKey];
                                                                                }
                                                                            }
                                                                        }
                                                                        contextParent = context;
                                                                        if (context = contextLeaves.pop()) {
                                                                            contextLeafDepth++;
                                                                            contextType = context != null && context[$TYPE];
                                                                        } else {
                                                                            contextType = 'leaf';
                                                                            context = contextParent;
                                                                            contextParent = contextLeaves.parent;
                                                                        }
                                                                        continue;
                                                                    }
                                                                key = keyTmp;
                                                                context = contextTmp;
                                                                contextParent = contextParentTmp;
                                                                contextType = contextTypeTmp;
                                                                contextTmp = contextTypeTmp = undefined;
                                                                if (context != null && typeof context === 'object') {
                                                                    head = root.__head;
                                                                    tail = root.__tail;
                                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                    context === head && (root.__head = root.__next = head = next);
                                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                                    context.__next = context.__prev = undefined;
                                                                    head = tail = next = prev = undefined;
                                                                }
                                                            }
                                                            message[$SIZE] = messageSize - sizeOffset;
                                                            contextParent[key] = context = message;
                                                            break;
                                                        }
                                                        context = contexts[--column];
                                                        key = context[__KEY];
                                                        contextParent = contexts[column - 1] || contextCache;
                                                    } while (column > -1);
                                                    context[__SELF] = context;
                                                    context[__KEY] = key;
                                                    context[__PARENT] = contextParent;
                                                    context[__ROOT] = contextCache;
                                                    if (context[__GENERATION] === undefined) {
                                                        context[__GENERATION] = 0;
                                                    }
                                                    contextType = context != null && context[$TYPE];
                                                    contextValue = contextType === 'sentinel' ? context.value : context;
                                                }
                                            }
                                            if (context != null) {
                                                if ((refContainer = path[__CONTAINER] || path).__context === undefined) {
                                                    backRefs = context.__refsLength || 0;
                                                    context['__ref' + backRefs] = refContainer;
                                                    context.__refsLength = backRefs + 1;
                                                    refContainer.__refIndex = backRefs;
                                                    refContainer.__context = context;
                                                    refContainer = backRefs = undefined;
                                                }
                                            }
                                        }
                                        expandsCount = Number(contextType === 'error') - 1;
                                        column = outermostColumn;
                                        path = outermostPath;
                                        offset = length - column;
                                        length = outermostLength;
                                        key = branchKeyTmp;
                                        outermostColumn = undefined;
                                        outermostPath = undefined;
                                        outermostLength = undefined;
                                        branchKeyTmp = undefined;
                                    }
                                } while ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue));
                            } else if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                sizeOffset = 0;
                                message = {};
                                messageSize = message != null && message[$SIZE] || 0;
                                do {
                                    if (key != null && key !== __NULL) {
                                        if (context != null && context !== message) {
                                            contextRefsLength = context.__refsLength || 0;
                                            messageRefsLength = message.__refsLength || 0;
                                            i = -1;
                                            while (++i < contextRefsLength) {
                                                if ((reference = context[__REF + i]) !== undefined) {
                                                    reference[__CONTEXT] = message;
                                                    message[__REF + (messageRefsLength + i)] = reference;
                                                    context[__REF + i] = undefined;
                                                }
                                            }
                                            message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                            context[__REFS_LENGTH] = reference = undefined;
                                            contextLeafStack = [];
                                            contextLeafDepth = 0;
                                            keyTmp = key;
                                            contextTmp = context;
                                            contextParentTmp = contextParent;
                                            contextTypeTmp = contextType;
                                            recursing:
                                                while (contextLeafDepth > -1) {
                                                    if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                                        contextRefsLength = context.__refsLength || 0;
                                                        i = -1;
                                                        while (++i < contextRefsLength) {
                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                reference.__context = undefined;
                                                                context[__REF + i] = undefined;
                                                            }
                                                        }
                                                        context.__refsLength = undefined;
                                                        contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                        if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                            i = (contextValue[__REF_INDEX] || 0) - 1;
                                                            n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                            while (++i <= n) {
                                                                referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                            }
                                                            referenceContext[__REFS_LENGTH] = n;
                                                            contextValue[__REF_INDEX] = undefined;
                                                            contextValue[__CONTEXT] = undefined;
                                                            referenceContext = undefined;
                                                        }
                                                        if (context != null && typeof context === 'object') {
                                                            head = root.__head;
                                                            tail = root.__tail;
                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                            context === head && (root.__head = root.__next = head = next);
                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                            context.__next = context.__prev = undefined;
                                                            head = tail = next = prev = undefined;
                                                        }
                                                        context = contextParent;
                                                        contextParent = contextLeaves && contextLeaves.parent;
                                                        contextLeafStack[contextLeafDepth--] = undefined;
                                                        contextType = context != null && context[$TYPE];
                                                        continue;
                                                    }
                                                    if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                        contextLeafKeys = Object.keys(context);
                                                        contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                        contextLeaves.parent = contextParent;
                                                        i = -1;
                                                        n = contextLeafKeys.length;
                                                        while (++i < n) {
                                                            if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                contextLeaves[i] = context[contextLeafKey];
                                                            }
                                                        }
                                                    }
                                                    contextParent = context;
                                                    if (context = contextLeaves.pop()) {
                                                        contextLeafDepth++;
                                                        contextType = context != null && context[$TYPE];
                                                    } else {
                                                        contextType = 'leaf';
                                                        context = contextParent;
                                                        contextParent = contextLeaves.parent;
                                                    }
                                                    continue;
                                                }
                                            key = keyTmp;
                                            context = contextTmp;
                                            contextParent = contextParentTmp;
                                            contextType = contextTypeTmp;
                                            contextTmp = contextTypeTmp = undefined;
                                            if (context != null && typeof context === 'object') {
                                                head = root.__head;
                                                tail = root.__tail;
                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                context === head && (root.__head = root.__next = head = next);
                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                context.__next = context.__prev = undefined;
                                                head = tail = next = prev = undefined;
                                            }
                                        }
                                        message[$SIZE] = messageSize - sizeOffset;
                                        contextParent[key] = context = message;
                                        break;
                                    }
                                    context = contexts[--column];
                                    key = context[__KEY];
                                    contextParent = contexts[column - 1] || contextCache;
                                } while (column > -1);
                                context[__SELF] = context;
                                context[__KEY] = key;
                                context[__PARENT] = contextParent;
                                context[__ROOT] = contextCache;
                                if (context[__GENERATION] === undefined) {
                                    context[__GENERATION] = 0;
                                }
                                contextType = context != null && context[$TYPE];
                                contextValue = contextType === 'sentinel' ? context.value : context;
                            }
                            key = branchKeyTmp;
                            contexts[column] = contextParent = context;
                            if (!!jsonCache && isKeySet === true) {
                                do {
                                    jsonKey = jsonKeys[jsonDepth];
                                } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                                if (jsonKey != null && jsonKey !== __NULL) {
                                    json = jsons[jsonDepth - 1] || jsonCache;
                                } else {
                                    json = jsonCache;
                                }
                                if (jsonKey != null && jsonKey !== __NULL) {
                                    json = json[jsonKey] || (json[jsonKey] = {});
                                    json[__KEY] = jsonKey;
                                    json[__GENERATION] = context[__GENERATION] || 0;
                                }
                                jsons[jsonDepth] = json;
                                jsonDepth += 1;
                            }
                        }
                    }
                    if (column === length) {
                        key = path[column];
                        isKeySet = false;
                        if (key != null && typeof key === 'object') {
                            isKeySet = true;
                            if (Array.isArray(key)) {
                                key = key[key.index || (key.index = 0)];
                                if (key != null && typeof key === 'object') {
                                    key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            } else {
                                key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        }
                        requestedPath[requestedPath.length = column] = key;
                        if (key != null && key !== __NULL) {
                            jsonDepth = column;
                            isKeySet = true;
                            !!jsonCache && isKeySet === true && (jsonKeys[jsonDepth] = key);
                            optimizedPath[optimizedPath.length = column + offset] = key;
                            context = contextParent[key];
                            if (context != null) {
                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                    contextInvalidated = context != null && context[__INVALIDATED];
                                    if (contextInvalidated === true === false) {
                                        context.__invalidated = true;
                                        context[$EXPIRES] = 0;
                                        expired[++expiredLength] = context;
                                        if (context != null && typeof context === 'object') {
                                            head = root.__head;
                                            tail = root.__tail;
                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                            context === head && (root.__head = root.__next = head = next);
                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                            context.__next = context.__prev = undefined;
                                            head = tail = next = prev = undefined;
                                        }
                                    }
                                    context = undefined;
                                }
                            }
                            contextType = context != null && context[$TYPE];
                            contextValue = contextType === 'sentinel' ? context.value : context;
                            contextTimestamp = context != null && context[$TIMESTAMP];
                            message = value;
                            messageType = message != null && message[$TYPE];
                            messageValue = messageType === 'sentinel' ? message.value : message;
                            messageTimestamp = message != null && message[$TIMESTAMP];
                            messageExpires = (message != null || null) && message[$EXPIRES];
                            if ((messageTimestamp < contextTimestamp || messageExpires === 0 && ((context = message) || true)) === false === true) {
                                messageSize = message != null && message[$SIZE] || 0;
                                originalMessageSize = messageSize || 0;
                                if ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) {
                                    messageType = 'array';
                                    originalMessageSize = messageValue.length || 1;
                                    messageSize = (messageType === 'sentinel' && 50 || 0) + originalMessageSize;
                                    messageValue[__CONTAINER] = message;
                                } else if (messageType === 'sentinel') {
                                    messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                } else if (messageType === 'error') {
                                    if (typeof errorSelector === 'function') {
                                        message = Enumerable.errorSelector(message);
                                    }
                                    messageSize = 50 + originalMessageSize;
                                } else if (messageValue == null || typeof messageValue !== 'object') {
                                    originalMessageSize = typeof messageValue === 'string' && messageValue.length || 1;
                                    messageSize = 50 + originalMessageSize;
                                    messageType = 'sentinel';
                                    message = {
                                        '$type': messageType,
                                        'value': messageValue
                                    };
                                } else {
                                    messageSize = message[$SIZE] || 50 * 2;
                                    messageType = message[$TYPE] = messageType || 'leaf';
                                }
                                message[$SIZE] = sizeOffset = messageSize;
                                if (!!((messageExpires = (message != null || null) && message[$EXPIRES]) != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < now())) === false) {
                                    messageSize = message != null && message[$SIZE] || 0;
                                    do {
                                        if (key != null && key !== __NULL) {
                                            if (context != null && context !== message) {
                                                contextRefsLength = context.__refsLength || 0;
                                                messageRefsLength = message.__refsLength || 0;
                                                i = -1;
                                                while (++i < contextRefsLength) {
                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                        reference[__CONTEXT] = message;
                                                        message[__REF + (messageRefsLength + i)] = reference;
                                                        context[__REF + i] = undefined;
                                                    }
                                                }
                                                message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                context[__REFS_LENGTH] = reference = undefined;
                                                contextLeafStack = [];
                                                contextLeafDepth = 0;
                                                keyTmp = key;
                                                contextTmp = context;
                                                contextParentTmp = contextParent;
                                                contextTypeTmp = contextType;
                                                recursing:
                                                    while (contextLeafDepth > -1) {
                                                        if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                                            contextRefsLength = context.__refsLength || 0;
                                                            i = -1;
                                                            while (++i < contextRefsLength) {
                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                    reference.__context = undefined;
                                                                    context[__REF + i] = undefined;
                                                                }
                                                            }
                                                            context.__refsLength = undefined;
                                                            contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                            if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                while (++i <= n) {
                                                                    referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                }
                                                                referenceContext[__REFS_LENGTH] = n;
                                                                contextValue[__REF_INDEX] = undefined;
                                                                contextValue[__CONTEXT] = undefined;
                                                                referenceContext = undefined;
                                                            }
                                                            if (context != null && typeof context === 'object') {
                                                                head = root.__head;
                                                                tail = root.__tail;
                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                context === head && (root.__head = root.__next = head = next);
                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                context.__next = context.__prev = undefined;
                                                                head = tail = next = prev = undefined;
                                                            }
                                                            context = contextParent;
                                                            contextParent = contextLeaves && contextLeaves.parent;
                                                            contextLeafStack[contextLeafDepth--] = undefined;
                                                            contextType = context != null && context[$TYPE];
                                                            continue;
                                                        }
                                                        if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                            contextLeafKeys = Object.keys(context);
                                                            contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                            contextLeaves.parent = contextParent;
                                                            i = -1;
                                                            n = contextLeafKeys.length;
                                                            while (++i < n) {
                                                                if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                    contextLeaves[i] = context[contextLeafKey];
                                                                }
                                                            }
                                                        }
                                                        contextParent = context;
                                                        if (context = contextLeaves.pop()) {
                                                            contextLeafDepth++;
                                                            contextType = context != null && context[$TYPE];
                                                        } else {
                                                            contextType = 'leaf';
                                                            context = contextParent;
                                                            contextParent = contextLeaves.parent;
                                                        }
                                                        continue;
                                                    }
                                                key = keyTmp;
                                                context = contextTmp;
                                                contextParent = contextParentTmp;
                                                contextType = contextTypeTmp;
                                                contextTmp = contextTypeTmp = undefined;
                                                if (context != null && typeof context === 'object') {
                                                    head = root.__head;
                                                    tail = root.__tail;
                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                    context === head && (root.__head = root.__next = head = next);
                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                    context.__next = context.__prev = undefined;
                                                    head = tail = next = prev = undefined;
                                                }
                                            }
                                            message[$SIZE] = messageSize - sizeOffset;
                                            contextParent[key] = context = message;
                                            break;
                                        }
                                        context = contexts[--column];
                                        key = context[__KEY];
                                        contextParent = contexts[column - 1] || contextCache;
                                    } while (column > -1);
                                    context[__SELF] = context;
                                    context[__KEY] = key;
                                    context[__PARENT] = contextParent;
                                    context[__ROOT] = contextCache;
                                    if (context[__GENERATION] === undefined) {
                                        context[__GENERATION] = 0;
                                    }
                                    contextTmp = context;
                                    contextParentTmp = contextParent;
                                    while (context !== undefined) {
                                        contextSize = context['$size'] = (context['$size'] || 0) + sizeOffset;
                                        contextTmp2 = context;
                                        if (context[__GENERATION_UPDATED] !== generation) {
                                            generationStack = [];
                                            generationDepth = 0;
                                            while (generationDepth > -1) {
                                                if ((generationReferences = generationStack[generationDepth]) === undefined) {
                                                    i = k = -1;
                                                    n = context[__REFS_LENGTH] || 0;
                                                    generationStack[generationDepth] = generationReferences = [];
                                                    context[__GENERATION_UPDATED] = generation;
                                                    context[__GENERATION] = (context[__GENERATION] || 0) + 1;
                                                    if ((reference = context[__PARENT]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                        generationReferences[++k] = reference;
                                                    }
                                                    while (++i < n) {
                                                        if ((reference = context[__REF + i]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                            generationReferences[++k] = reference;
                                                        }
                                                    }
                                                }
                                                if ((context = generationReferences.pop()) !== undefined) {
                                                    ++generationDepth;
                                                } else {
                                                    generationStack[generationDepth--] = undefined;
                                                }
                                            }
                                        }
                                        reference = generationStack = generationReferences = undefined;
                                        context = contextTmp2;
                                        if ((contextParent = context[__PARENT]) !== undefined && contextSize <= 0) {
                                            contextRefsLength = context.__refsLength || 0;
                                            i = -1;
                                            while (++i < contextRefsLength) {
                                                if ((reference = context[__REF + i]) !== undefined) {
                                                    reference.__context = undefined;
                                                    context[__REF + i] = undefined;
                                                }
                                            }
                                            context.__refsLength = undefined;
                                            contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                            if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                i = (contextValue[__REF_INDEX] || 0) - 1;
                                                n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                while (++i <= n) {
                                                    referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                }
                                                referenceContext[__REFS_LENGTH] = n;
                                                contextValue[__REF_INDEX] = undefined;
                                                contextValue[__CONTEXT] = undefined;
                                                referenceContext = undefined;
                                            }
                                            if (context != null && typeof context === 'object') {
                                                head = root.__head;
                                                tail = root.__tail;
                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                context === head && (root.__head = root.__next = head = next);
                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                context.__next = context.__prev = undefined;
                                                head = tail = next = prev = undefined;
                                            }
                                        }
                                        context = contextParent;
                                    }
                                    context = contextTmp;
                                    contextParent = contextParentTmp;
                                    contextTmp = contextTmp2 = contextParentTmp = undefined;
                                    contextType = context != null && context[$TYPE];
                                    contextValue = contextType === 'sentinel' ? context.value : context;
                                }
                            }
                        }
                    }
                    break resolvePath;
                } while (true);
            if (context != null) {
                if (context != null && typeof context === 'object' && contextExpires !== 1) {
                    head = root.__head;
                    tail = root.__tail;
                    next = context.__next, prev = context.__prev;
                    if (context !== head) {
                        next && (next != null && typeof next === 'object') && (next.__prev = prev);
                        prev && (prev != null && typeof prev === 'object') && (prev.__next = next);
                        (next = head) && (head != null && typeof head === 'object') && (head.__prev = context);
                        root.__head = root.__next = head = context;
                        head.__next = next;
                        head.__prev = undefined;
                    }
                    if (tail == null || context === tail) {
                        root.__tail = root.__prev = tail = prev || context;
                    }
                    head = tail = next = prev = undefined;
                }
                if (contextType === 'error') {
                    if (expandsCount > -1) {
                        requestedPath[requestedPath.length] = null;
                    }
                    contextValue = context;
                }
            }
            if (context == null || refreshing === true) {
                src = optimizedPath;
                dest = new Array(n = src.length);
                i = -1;
                while (++i < n) {
                    dest[i] = src[i];
                }
                opt = dest;
                src = optimizedBoundPath;
                dest = new Array(n = src.length);
                i = -1;
                while (++i < n) {
                    dest[i] = src[i];
                }
                req = dest;
                reqLen = n;
                i = -1;
                n = requestedPath.length;
                while (++i < n) {
                    key = path[i];
                    key2 = requestedPath[i];
                    req[reqLen + i] = key && typeof key === 'object' && [key2] || key2;
                }
                if (column < length) {
                    j = column + 1;
                    k = length + 1;
                    reqLen = req.length;
                    optLen = opt.length;
                    i = -1;
                    n = k - j;
                    while (++i < n) {
                        req[reqLen + i] = opt[optLen + i] = path[j + i];
                    }
                }
                req.pathSetIndex = index;
                requestedMissingPaths[requestedMissingPaths.length] = req;
                optimizedMissingPaths[optimizedMissingPaths.length] = opt;
            } else if (contextValue !== undefined || boxed === true) {
                src = optimizedPath;
                dest = new Array(n = src.length);
                i = -1;
                while (++i < n) {
                    dest[i] = src[i];
                }
                opt = dest;
                src = requestedPath;
                dest = new Array(n = src.length);
                i = -1;
                while (++i < n) {
                    dest[i] = src[i];
                }
                req = dest;
                requestedPaths[requestedPaths.length] = req;
                optimizedPaths[optimizedPaths.length] = opt;
                if (!!jsonCache) {
                    hasValues = true;
                    if (contextType === 'error') {
                        if (err === undefined) {
                            if (boxed === true) {
                                err = context;
                            } else {
                                dest = {};
                                src = context;
                                keys = Object.keys(src);
                                i = -1;
                                n = keys.length;
                                while (++i < n) {
                                    x = keys[i];
                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                                }
                                err = dest;
                            }
                            val = !!includeErrors && err || undefined;
                        }
                        errors[errors.length] = {
                            path: req,
                            value: err
                        };
                        err = undefined;
                    } else {
                        if (boxed === true) {
                            val = context;
                        } else if (contextValue != null && typeof contextValue === 'object') {
                            if (Array.isArray(contextValue)) {
                                src = contextValue;
                                dest = new Array(n = src.length);
                                i = -1;
                                while (++i < n) {
                                    dest[i] = src[i];
                                }
                                val = dest;
                            } else {
                                dest = {};
                                src = contextValue;
                                keys = Object.keys(src);
                                i = -1;
                                n = keys.length;
                                while (++i < n) {
                                    x = keys[i];
                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                                }
                                val = dest;
                            }
                        } else {
                            val = contextValue;
                        }
                    }
                    do {
                        jsonKey = jsonKeys[jsonDepth];
                    } while ((jsonKey != null && jsonKey !== __NULL) === false && --jsonDepth > -1);
                    if (jsonKey != null && jsonKey !== __NULL) {
                        json = jsons[jsonDepth - 1] || jsonCache;
                    } else {
                        json = jsonCache;
                    }
                    if (jsonKey != null && jsonKey !== __NULL) {
                        json[jsonKey] = val;
                    } else {
                        json = jsons[jsonDepth] = val;
                    }
                    if (!boxed && !!val && typeof val === 'object' && !Array.isArray(val)) {
                        val[$TYPE] = 'leaf';
                    }
                }
            }
            for (; column > -1; --column) {
                key = path[column];
                if (key == null || typeof key !== 'object') {
                    continue;
                }
                isKeySet = true;
                if (Array.isArray(key)) {
                    jsonDepth -= Number(jsonDepth > 0);
                    if (++key.index === key.length) {
                        key = key[key.index = 0];
                        if (key == null || typeof key !== 'object') {
                            continue;
                        }
                    } else {
                        break;
                    }
                }
                if (++key[__OFFSET] > (key.to || (key.to = key.from + (key.length || 1) - 1))) {
                    key[__OFFSET] = key.from;
                    continue;
                }
                jsonDepth -= Number(jsonDepth > 0);
                break;
            }
        }
        path.column = column;
    }
    json = jsons[-1];
    if (!!values) {
        values[0] = hasValues && { json: json } || undefined;
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setPathsAsValues() {
    var returnBlocker;
    var generation, model, state, values, errorSelector, onNext, errors, boxed, includeErrors, refreshing, connected, root, contextCache, context, expired, expiredLength, boundPath, optimizedBoundPath, column, offset, jsonDepth, boundPathValue, contexts, requested, optimized, requestedPaths, optimizedPaths, requestedMissingPaths, optimizedMissingPaths, requestedPath, optimizedPath, paths, pbv, contextParent, messages, index, count, refsByCols, pathSet, value, path, length, resetOptimizedDepth, reference, i, j, n, isKeySet, key, contextExpires, contextInvalidated, head, tail, next, prev, contextType, contextValue, branchKeyTmp, expandsCount, outermostColumn, refLen, outermostLength, outermostPath, sizeOffset, message, messageSize, contextRefsLength, messageRefsLength, contextLeafStack, contextLeafDepth, keyTmp, contextTmp, contextParentTmp, contextTypeTmp, referenceContext, contextLeaves, contextLeafKeys, contextLeafKey, refContainer, backRefs, contextTimestamp, messageType, messageValue, messageTimestamp, messageExpires, originalMessageSize, contextSize, contextTmp2, generationStack, generationDepth, generationReferences, k, src, dest, opt, req, reqLen, key2, optLen, err, keys, x, val;
    generation = __GENERATION_GENERATION++;
    model = arguments[0];
    state = arguments[1];
    values = arguments[2];
    errorSelector = arguments[3];
    if (typeof values === 'function') {
        onNext = values;
        values = undefined;
    }
    errors = state.errors || (state.errors = []);
    boxed = model._boxed;
    includeErrors = model._includeErrors;
    refreshing = model._refreshing;
    connected = model._connected;
    root = model._root;
    contextCache = context = model._cache;
    expired = root.expired;
    expiredLength = expired.length;
    boundPath = state.boundPath || model._path;
    optimizedBoundPath = [];
    column = state.column || (state.column = 0) - 1;
    offset = state.offset || (state.offset = 0);
    jsonDepth = state.jsonDepth || (state.jsonDepth = 0);
    boundPathValue = state.boundPathValue;
    contexts = state.contexts || (state.contexts = []);
    requested = state.requested || (state.requested = {});
    optimized = state.optimized || (state.optimized = {});
    requestedPaths = state.requestedPaths || (state.requestedPaths = []);
    optimizedPaths = state.optimizedPaths || (state.optimizedPaths = []);
    requestedMissingPaths = state.requestedMissingPaths || (state.requestedMissingPaths = []);
    optimizedMissingPaths = state.optimizedMissingPaths || (state.optimizedMissingPaths = []);
    requestedPath = state.requestedPath || (state.requestedPath = []);
    optimizedPath = state.optimizedPath || (state.optimizedPath = []);
    paths = state;
    pbv = state.pbv || (state.pbv = {});
    pbv.path = requestedPath;
    !!values && (values.length = 0);
    optimizedBoundPath = boundPath;
    if (contextParent == null && (contextParent = model.__context) == null) {
        if (boundPath.length === 0) {
            contextParent = contextCache;
        } else {
            if (boundPathValue == null) {
                boundPathValue = getContextSync.call(model);
            }
            optimizedBoundPath = boundPathValue.path;
            if ((contextParent = boundPathValue.value) == null) {
                contextParent = {};
            }
            boundPathValue.requested = [];
            boundPathValue.optimized = [];
            state.boundPathValue = boundPathValue;
        }
    }
    contexts[-1] = context = contextParent;
    messages = state.messages || (state.messages = []);
    index = paths.index || (paths.index = 0);
    count = paths.length;
    for (; index < count; ++index) {
        pathSet = paths[index];
        offset = 0;
        refsByCols = state.refsByCols = [];
        refsByCols[-1] = optimizedBoundPath;
        if (Array.isArray(pathSet)) {
            value = undefined;
            path = pathSet;
        } else {
            value = pathSet.value;
            path = pathSet.path;
        }
        length = path.length - 1;
        column = path.column || (path.column = 0);
        while (column > -1) {
            resetOptimizedDepth = column;
            while (--resetOptimizedDepth >= -1) {
                if (!!(reference = refsByCols[resetOptimizedDepth])) {
                    i = j = -1;
                    n = reference.length;
                    offset = n - ++resetOptimizedDepth;
                    while (++i < n) {
                        optimizedPath[++j] = reference[i];
                    }
                    while (resetOptimizedDepth < column) {
                        optimizedPath[++j] = requestedPath[resetOptimizedDepth++];
                    }
                    optimizedPath.length = offset + resetOptimizedDepth;
                    break;
                }
            }
            contextParent = contexts[column - 1];
            resolvePath:
                do {
                    for (; column < length; ++column) {
                        key = path[column];
                        isKeySet = false;
                        if (key != null && typeof key === 'object') {
                            isKeySet = true;
                            if (Array.isArray(key)) {
                                key = key[key.index || (key.index = 0)];
                                if (key != null && typeof key === 'object') {
                                    key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            } else {
                                key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        }
                        requestedPath[requestedPath.length = column] = key;
                        if (key != null && key !== __NULL) {
                            optimizedPath[optimizedPath.length = column + offset] = key;
                            context = contextParent[key];
                            if (context != null) {
                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                    contextInvalidated = context != null && context[__INVALIDATED];
                                    if (contextInvalidated === true === false) {
                                        context.__invalidated = true;
                                        context[$EXPIRES] = 0;
                                        expired[++expiredLength] = context;
                                        if (context != null && typeof context === 'object') {
                                            head = root.__head;
                                            tail = root.__tail;
                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                            context === head && (root.__head = root.__next = head = next);
                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                            context.__next = context.__prev = undefined;
                                            head = tail = next = prev = undefined;
                                        }
                                    }
                                    context = undefined;
                                }
                            }
                            contextType = context != null && context[$TYPE];
                            contextValue = contextType === 'sentinel' ? context.value : context;
                            branchKeyTmp = key;
                            if ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue)) {
                                expandsCount = -1;
                                refsByCols[outermostColumn = column] = contextValue;
                                do {
                                    branchKeyTmp = key;
                                    if ((context = context.__context) !== undefined) {
                                        i = -1;
                                        refLen = contextValue.length;
                                        offset = refLen - column - 1;
                                        optimizedPath.length = refLen;
                                        while (++i < refLen) {
                                            optimizedPath[i] = contextValue[i];
                                        }
                                        if (context != null) {
                                            if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                contextInvalidated = context != null && context[__INVALIDATED];
                                                if (contextInvalidated === true === false) {
                                                    context.__invalidated = true;
                                                    context[$EXPIRES] = 0;
                                                    expired[++expiredLength] = context;
                                                    if (context != null && typeof context === 'object') {
                                                        head = root.__head;
                                                        tail = root.__tail;
                                                        (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                        (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                        context === head && (root.__head = root.__next = head = next);
                                                        context === tail && (root.__tail = root.__prev = tail = prev);
                                                        context.__next = context.__prev = undefined;
                                                        head = tail = next = prev = undefined;
                                                    }
                                                }
                                                context = undefined;
                                            }
                                        }
                                        contextType = context != null && context[$TYPE];
                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                        if (contextType === 'error') {
                                            expandsCount = 0;
                                            break resolvePath;
                                        } else if (context != null === false) {
                                            expandsCount = -1;
                                            break resolvePath;
                                        }
                                        contextParent = context;
                                    } else {
                                        refsByCols[outermostColumn = column] = contextValue;
                                        outermostLength = length;
                                        outermostPath = path;
                                        offset = 0;
                                        column = -1;
                                        path = contextValue;
                                        length = path.length - 1;
                                        contextParent = contextCache;
                                        while (++column < length) {
                                            if ((key = path[column]) == null) {
                                                continue;
                                            }
                                            optimizedPath[optimizedPath.length = column + offset] = key;
                                            context = contextParent[key];
                                            if (context != null) {
                                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                    contextInvalidated = context != null && context[__INVALIDATED];
                                                    if (contextInvalidated === true === false) {
                                                        context.__invalidated = true;
                                                        context[$EXPIRES] = 0;
                                                        expired[++expiredLength] = context;
                                                        if (context != null && typeof context === 'object') {
                                                            head = root.__head;
                                                            tail = root.__tail;
                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                            context === head && (root.__head = root.__next = head = next);
                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                            context.__next = context.__prev = undefined;
                                                            head = tail = next = prev = undefined;
                                                        }
                                                    }
                                                    context = undefined;
                                                }
                                            }
                                            contextType = context != null && context[$TYPE];
                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                            if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                sizeOffset = 0;
                                                message = {};
                                                messageSize = message != null && message[$SIZE] || 0;
                                                do {
                                                    if (key != null && key !== __NULL) {
                                                        if (context != null && context !== message) {
                                                            contextRefsLength = context.__refsLength || 0;
                                                            messageRefsLength = message.__refsLength || 0;
                                                            i = -1;
                                                            while (++i < contextRefsLength) {
                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                    reference[__CONTEXT] = message;
                                                                    message[__REF + (messageRefsLength + i)] = reference;
                                                                    context[__REF + i] = undefined;
                                                                }
                                                            }
                                                            message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                            context[__REFS_LENGTH] = reference = undefined;
                                                            contextLeafStack = [];
                                                            contextLeafDepth = 0;
                                                            keyTmp = key;
                                                            contextTmp = context;
                                                            contextParentTmp = contextParent;
                                                            contextTypeTmp = contextType;
                                                            recursing:
                                                                while (contextLeafDepth > -1) {
                                                                    if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                                                        contextRefsLength = context.__refsLength || 0;
                                                                        i = -1;
                                                                        while (++i < contextRefsLength) {
                                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                                reference.__context = undefined;
                                                                                context[__REF + i] = undefined;
                                                                            }
                                                                        }
                                                                        context.__refsLength = undefined;
                                                                        contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                        if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                            i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                            n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                            while (++i <= n) {
                                                                                referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                            }
                                                                            referenceContext[__REFS_LENGTH] = n;
                                                                            contextValue[__REF_INDEX] = undefined;
                                                                            contextValue[__CONTEXT] = undefined;
                                                                            referenceContext = undefined;
                                                                        }
                                                                        if (context != null && typeof context === 'object') {
                                                                            head = root.__head;
                                                                            tail = root.__tail;
                                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                            context === head && (root.__head = root.__next = head = next);
                                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                                            context.__next = context.__prev = undefined;
                                                                            head = tail = next = prev = undefined;
                                                                        }
                                                                        context = contextParent;
                                                                        contextParent = contextLeaves && contextLeaves.parent;
                                                                        contextLeafStack[contextLeafDepth--] = undefined;
                                                                        contextType = context != null && context[$TYPE];
                                                                        continue;
                                                                    }
                                                                    if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                        contextLeafKeys = Object.keys(context);
                                                                        contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                        contextLeaves.parent = contextParent;
                                                                        i = -1;
                                                                        n = contextLeafKeys.length;
                                                                        while (++i < n) {
                                                                            if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                contextLeaves[i] = context[contextLeafKey];
                                                                            }
                                                                        }
                                                                    }
                                                                    contextParent = context;
                                                                    if (context = contextLeaves.pop()) {
                                                                        contextLeafDepth++;
                                                                        contextType = context != null && context[$TYPE];
                                                                    } else {
                                                                        contextType = 'leaf';
                                                                        context = contextParent;
                                                                        contextParent = contextLeaves.parent;
                                                                    }
                                                                    continue;
                                                                }
                                                            key = keyTmp;
                                                            context = contextTmp;
                                                            contextParent = contextParentTmp;
                                                            contextType = contextTypeTmp;
                                                            contextTmp = contextTypeTmp = undefined;
                                                            if (context != null && typeof context === 'object') {
                                                                head = root.__head;
                                                                tail = root.__tail;
                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                context === head && (root.__head = root.__next = head = next);
                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                context.__next = context.__prev = undefined;
                                                                head = tail = next = prev = undefined;
                                                            }
                                                        }
                                                        message[$SIZE] = messageSize - sizeOffset;
                                                        contextParent[key] = context = message;
                                                        break;
                                                    }
                                                    context = contexts[--column];
                                                    key = context[__KEY];
                                                    contextParent = contexts[column - 1] || contextCache;
                                                } while (column > -1);
                                                context[__SELF] = context;
                                                context[__KEY] = key;
                                                context[__PARENT] = contextParent;
                                                context[__ROOT] = contextCache;
                                                if (context[__GENERATION] === undefined) {
                                                    context[__GENERATION] = 0;
                                                }
                                                contextType = context != null && context[$TYPE];
                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                            }
                                            if (context === undefined) {
                                                i = -1;
                                                refLen = path.length;
                                                offset = refLen - column - 1;
                                                optimizedPath.length = refLen;
                                                while (++i < refLen) {
                                                    optimizedPath[i] = path[i];
                                                }
                                                break;
                                            } else if (!!contextType || Array.isArray(contextValue)) {
                                                break;
                                            }
                                            contextParent = context;
                                        }
                                        if (column === length) {
                                            if ((key = path[column]) != null) {
                                                optimizedPath[optimizedPath.length = column + offset] = key;
                                                context = contextParent[key];
                                                if (context != null) {
                                                    if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                                        contextInvalidated = context != null && context[__INVALIDATED];
                                                        if (contextInvalidated === true === false) {
                                                            context.__invalidated = true;
                                                            context[$EXPIRES] = 0;
                                                            expired[++expiredLength] = context;
                                                            if (context != null && typeof context === 'object') {
                                                                head = root.__head;
                                                                tail = root.__tail;
                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                context === head && (root.__head = root.__next = head = next);
                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                context.__next = context.__prev = undefined;
                                                                head = tail = next = prev = undefined;
                                                            }
                                                        }
                                                        context = undefined;
                                                    }
                                                }
                                                contextType = context != null && context[$TYPE];
                                                contextValue = contextType === 'sentinel' ? context.value : context;
                                                if ((!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) && !Array.isArray(contextValue)) {
                                                    sizeOffset = 0;
                                                    message = {};
                                                    messageSize = message != null && message[$SIZE] || 0;
                                                    do {
                                                        if (key != null && key !== __NULL) {
                                                            if (context != null && context !== message) {
                                                                contextRefsLength = context.__refsLength || 0;
                                                                messageRefsLength = message.__refsLength || 0;
                                                                i = -1;
                                                                while (++i < contextRefsLength) {
                                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                                        reference[__CONTEXT] = message;
                                                                        message[__REF + (messageRefsLength + i)] = reference;
                                                                        context[__REF + i] = undefined;
                                                                    }
                                                                }
                                                                message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                                context[__REFS_LENGTH] = reference = undefined;
                                                                contextLeafStack = [];
                                                                contextLeafDepth = 0;
                                                                keyTmp = key;
                                                                contextTmp = context;
                                                                contextParentTmp = contextParent;
                                                                contextTypeTmp = contextType;
                                                                recursing:
                                                                    while (contextLeafDepth > -1) {
                                                                        if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                                                            contextRefsLength = context.__refsLength || 0;
                                                                            i = -1;
                                                                            while (++i < contextRefsLength) {
                                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                                    reference.__context = undefined;
                                                                                    context[__REF + i] = undefined;
                                                                                }
                                                                            }
                                                                            context.__refsLength = undefined;
                                                                            contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                                            if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                                i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                                n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                                while (++i <= n) {
                                                                                    referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                                }
                                                                                referenceContext[__REFS_LENGTH] = n;
                                                                                contextValue[__REF_INDEX] = undefined;
                                                                                contextValue[__CONTEXT] = undefined;
                                                                                referenceContext = undefined;
                                                                            }
                                                                            if (context != null && typeof context === 'object') {
                                                                                head = root.__head;
                                                                                tail = root.__tail;
                                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                                context === head && (root.__head = root.__next = head = next);
                                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                                context.__next = context.__prev = undefined;
                                                                                head = tail = next = prev = undefined;
                                                                            }
                                                                            context = contextParent;
                                                                            contextParent = contextLeaves && contextLeaves.parent;
                                                                            contextLeafStack[contextLeafDepth--] = undefined;
                                                                            contextType = context != null && context[$TYPE];
                                                                            continue;
                                                                        }
                                                                        if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                                            contextLeafKeys = Object.keys(context);
                                                                            contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                                            contextLeaves.parent = contextParent;
                                                                            i = -1;
                                                                            n = contextLeafKeys.length;
                                                                            while (++i < n) {
                                                                                if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                                    contextLeaves[i] = context[contextLeafKey];
                                                                                }
                                                                            }
                                                                        }
                                                                        contextParent = context;
                                                                        if (context = contextLeaves.pop()) {
                                                                            contextLeafDepth++;
                                                                            contextType = context != null && context[$TYPE];
                                                                        } else {
                                                                            contextType = 'leaf';
                                                                            context = contextParent;
                                                                            contextParent = contextLeaves.parent;
                                                                        }
                                                                        continue;
                                                                    }
                                                                key = keyTmp;
                                                                context = contextTmp;
                                                                contextParent = contextParentTmp;
                                                                contextType = contextTypeTmp;
                                                                contextTmp = contextTypeTmp = undefined;
                                                                if (context != null && typeof context === 'object') {
                                                                    head = root.__head;
                                                                    tail = root.__tail;
                                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                    context === head && (root.__head = root.__next = head = next);
                                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                                    context.__next = context.__prev = undefined;
                                                                    head = tail = next = prev = undefined;
                                                                }
                                                            }
                                                            message[$SIZE] = messageSize - sizeOffset;
                                                            contextParent[key] = context = message;
                                                            break;
                                                        }
                                                        context = contexts[--column];
                                                        key = context[__KEY];
                                                        contextParent = contexts[column - 1] || contextCache;
                                                    } while (column > -1);
                                                    context[__SELF] = context;
                                                    context[__KEY] = key;
                                                    context[__PARENT] = contextParent;
                                                    context[__ROOT] = contextCache;
                                                    if (context[__GENERATION] === undefined) {
                                                        context[__GENERATION] = 0;
                                                    }
                                                    contextType = context != null && context[$TYPE];
                                                    contextValue = contextType === 'sentinel' ? context.value : context;
                                                }
                                            }
                                            if (context != null) {
                                                if ((refContainer = path[__CONTAINER] || path).__context === undefined) {
                                                    backRefs = context.__refsLength || 0;
                                                    context['__ref' + backRefs] = refContainer;
                                                    context.__refsLength = backRefs + 1;
                                                    refContainer.__refIndex = backRefs;
                                                    refContainer.__context = context;
                                                    refContainer = backRefs = undefined;
                                                }
                                            }
                                        }
                                        expandsCount = Number(contextType === 'error') - 1;
                                        column = outermostColumn;
                                        path = outermostPath;
                                        offset = length - column;
                                        length = outermostLength;
                                        key = branchKeyTmp;
                                        outermostColumn = undefined;
                                        outermostPath = undefined;
                                        outermostLength = undefined;
                                        branchKeyTmp = undefined;
                                    }
                                } while ((!contextType || contextType === 'sentinel') && Array.isArray(contextValue));
                            } else if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                sizeOffset = 0;
                                message = {};
                                messageSize = message != null && message[$SIZE] || 0;
                                do {
                                    if (key != null && key !== __NULL) {
                                        if (context != null && context !== message) {
                                            contextRefsLength = context.__refsLength || 0;
                                            messageRefsLength = message.__refsLength || 0;
                                            i = -1;
                                            while (++i < contextRefsLength) {
                                                if ((reference = context[__REF + i]) !== undefined) {
                                                    reference[__CONTEXT] = message;
                                                    message[__REF + (messageRefsLength + i)] = reference;
                                                    context[__REF + i] = undefined;
                                                }
                                            }
                                            message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                            context[__REFS_LENGTH] = reference = undefined;
                                            contextLeafStack = [];
                                            contextLeafDepth = 0;
                                            keyTmp = key;
                                            contextTmp = context;
                                            contextParentTmp = contextParent;
                                            contextTypeTmp = contextType;
                                            recursing:
                                                while (contextLeafDepth > -1) {
                                                    if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                        contextValue = contextType === 'sentinel' ? context.value : context;
                                                        contextRefsLength = context.__refsLength || 0;
                                                        i = -1;
                                                        while (++i < contextRefsLength) {
                                                            if ((reference = context[__REF + i]) !== undefined) {
                                                                reference.__context = undefined;
                                                                context[__REF + i] = undefined;
                                                            }
                                                        }
                                                        context.__refsLength = undefined;
                                                        contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                        if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                            i = (contextValue[__REF_INDEX] || 0) - 1;
                                                            n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                            while (++i <= n) {
                                                                referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                            }
                                                            referenceContext[__REFS_LENGTH] = n;
                                                            contextValue[__REF_INDEX] = undefined;
                                                            contextValue[__CONTEXT] = undefined;
                                                            referenceContext = undefined;
                                                        }
                                                        if (context != null && typeof context === 'object') {
                                                            head = root.__head;
                                                            tail = root.__tail;
                                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                            context === head && (root.__head = root.__next = head = next);
                                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                                            context.__next = context.__prev = undefined;
                                                            head = tail = next = prev = undefined;
                                                        }
                                                        context = contextParent;
                                                        contextParent = contextLeaves && contextLeaves.parent;
                                                        contextLeafStack[contextLeafDepth--] = undefined;
                                                        contextType = context != null && context[$TYPE];
                                                        continue;
                                                    }
                                                    if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                        contextLeafKeys = Object.keys(context);
                                                        contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                        contextLeaves.parent = contextParent;
                                                        i = -1;
                                                        n = contextLeafKeys.length;
                                                        while (++i < n) {
                                                            if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                contextLeaves[i] = context[contextLeafKey];
                                                            }
                                                        }
                                                    }
                                                    contextParent = context;
                                                    if (context = contextLeaves.pop()) {
                                                        contextLeafDepth++;
                                                        contextType = context != null && context[$TYPE];
                                                    } else {
                                                        contextType = 'leaf';
                                                        context = contextParent;
                                                        contextParent = contextLeaves.parent;
                                                    }
                                                    continue;
                                                }
                                            key = keyTmp;
                                            context = contextTmp;
                                            contextParent = contextParentTmp;
                                            contextType = contextTypeTmp;
                                            contextTmp = contextTypeTmp = undefined;
                                            if (context != null && typeof context === 'object') {
                                                head = root.__head;
                                                tail = root.__tail;
                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                context === head && (root.__head = root.__next = head = next);
                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                context.__next = context.__prev = undefined;
                                                head = tail = next = prev = undefined;
                                            }
                                        }
                                        message[$SIZE] = messageSize - sizeOffset;
                                        contextParent[key] = context = message;
                                        break;
                                    }
                                    context = contexts[--column];
                                    key = context[__KEY];
                                    contextParent = contexts[column - 1] || contextCache;
                                } while (column > -1);
                                context[__SELF] = context;
                                context[__KEY] = key;
                                context[__PARENT] = contextParent;
                                context[__ROOT] = contextCache;
                                if (context[__GENERATION] === undefined) {
                                    context[__GENERATION] = 0;
                                }
                                contextType = context != null && context[$TYPE];
                                contextValue = contextType === 'sentinel' ? context.value : context;
                            }
                            key = branchKeyTmp;
                            contexts[column] = contextParent = context;
                        }
                    }
                    if (column === length) {
                        key = path[column];
                        isKeySet = false;
                        if (key != null && typeof key === 'object') {
                            isKeySet = true;
                            if (Array.isArray(key)) {
                                key = key[key.index || (key.index = 0)];
                                if (key != null && typeof key === 'object') {
                                    key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            } else {
                                key = key[__OFFSET] === undefined && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        }
                        requestedPath[requestedPath.length = column] = key;
                        if (key != null && key !== __NULL) {
                            optimizedPath[optimizedPath.length = column + offset] = key;
                            context = contextParent[key];
                            if (context != null) {
                                if (!!((contextExpires = (context != null || null) && context[$EXPIRES]) != null && contextExpires !== 1 && (contextExpires === 0 || contextExpires < now()))) {
                                    contextInvalidated = context != null && context[__INVALIDATED];
                                    if (contextInvalidated === true === false) {
                                        context.__invalidated = true;
                                        context[$EXPIRES] = 0;
                                        expired[++expiredLength] = context;
                                        if (context != null && typeof context === 'object') {
                                            head = root.__head;
                                            tail = root.__tail;
                                            (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                            (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                            context === head && (root.__head = root.__next = head = next);
                                            context === tail && (root.__tail = root.__prev = tail = prev);
                                            context.__next = context.__prev = undefined;
                                            head = tail = next = prev = undefined;
                                        }
                                    }
                                    context = undefined;
                                }
                            }
                            contextType = context != null && context[$TYPE];
                            contextValue = contextType === 'sentinel' ? context.value : context;
                            contextTimestamp = context != null && context[$TIMESTAMP];
                            message = value;
                            messageType = message != null && message[$TYPE];
                            messageValue = messageType === 'sentinel' ? message.value : message;
                            messageTimestamp = message != null && message[$TIMESTAMP];
                            messageExpires = (message != null || null) && message[$EXPIRES];
                            if ((messageTimestamp < contextTimestamp || messageExpires === 0 && ((context = message) || true)) === false === true) {
                                messageSize = message != null && message[$SIZE] || 0;
                                originalMessageSize = messageSize || 0;
                                if ((!messageType || messageType === 'sentinel') && Array.isArray(messageValue)) {
                                    messageType = 'array';
                                    originalMessageSize = messageValue.length || 1;
                                    messageSize = (messageType === 'sentinel' && 50 || 0) + originalMessageSize;
                                    messageValue[__CONTAINER] = message;
                                } else if (messageType === 'sentinel') {
                                    messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                } else if (messageType === 'error') {
                                    if (typeof errorSelector === 'function') {
                                        message = Enumerable.errorSelector(message);
                                    }
                                    messageSize = 50 + originalMessageSize;
                                } else if (messageValue == null || typeof messageValue !== 'object') {
                                    originalMessageSize = typeof messageValue === 'string' && messageValue.length || 1;
                                    messageSize = 50 + originalMessageSize;
                                    messageType = 'sentinel';
                                    message = {
                                        '$type': messageType,
                                        'value': messageValue
                                    };
                                } else {
                                    messageSize = message[$SIZE] || 50 * 2;
                                    messageType = message[$TYPE] = messageType || 'leaf';
                                }
                                message[$SIZE] = sizeOffset = messageSize;
                                if (!!((messageExpires = (message != null || null) && message[$EXPIRES]) != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < now())) === false) {
                                    messageSize = message != null && message[$SIZE] || 0;
                                    do {
                                        if (key != null && key !== __NULL) {
                                            if (context != null && context !== message) {
                                                contextRefsLength = context.__refsLength || 0;
                                                messageRefsLength = message.__refsLength || 0;
                                                i = -1;
                                                while (++i < contextRefsLength) {
                                                    if ((reference = context[__REF + i]) !== undefined) {
                                                        reference[__CONTEXT] = message;
                                                        message[__REF + (messageRefsLength + i)] = reference;
                                                        context[__REF + i] = undefined;
                                                    }
                                                }
                                                message[__REFS_LENGTH] = contextRefsLength + messageRefsLength;
                                                context[__REFS_LENGTH] = reference = undefined;
                                                contextLeafStack = [];
                                                contextLeafDepth = 0;
                                                keyTmp = key;
                                                contextTmp = context;
                                                contextParentTmp = contextParent;
                                                contextTypeTmp = contextType;
                                                recursing:
                                                    while (contextLeafDepth > -1) {
                                                        if (!!contextType || Array.isArray(contextValue) || (context == null || typeof context !== 'object')) {
                                                            contextValue = contextType === 'sentinel' ? context.value : context;
                                                            contextRefsLength = context.__refsLength || 0;
                                                            i = -1;
                                                            while (++i < contextRefsLength) {
                                                                if ((reference = context[__REF + i]) !== undefined) {
                                                                    reference.__context = undefined;
                                                                    context[__REF + i] = undefined;
                                                                }
                                                            }
                                                            context.__refsLength = undefined;
                                                            contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                                            if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                                i = (contextValue[__REF_INDEX] || 0) - 1;
                                                                n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                                while (++i <= n) {
                                                                    referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                                }
                                                                referenceContext[__REFS_LENGTH] = n;
                                                                contextValue[__REF_INDEX] = undefined;
                                                                contextValue[__CONTEXT] = undefined;
                                                                referenceContext = undefined;
                                                            }
                                                            if (context != null && typeof context === 'object') {
                                                                head = root.__head;
                                                                tail = root.__tail;
                                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                                context === head && (root.__head = root.__next = head = next);
                                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                                context.__next = context.__prev = undefined;
                                                                head = tail = next = prev = undefined;
                                                            }
                                                            context = contextParent;
                                                            contextParent = contextLeaves && contextLeaves.parent;
                                                            contextLeafStack[contextLeafDepth--] = undefined;
                                                            contextType = context != null && context[$TYPE];
                                                            continue;
                                                        }
                                                        if ((contextLeaves = contextLeafStack[contextLeafDepth]) === undefined) {
                                                            contextLeafKeys = Object.keys(context);
                                                            contextLeaves = contextLeafStack[contextLeafDepth] = [];
                                                            contextLeaves.parent = contextParent;
                                                            i = -1;
                                                            n = contextLeafKeys.length;
                                                            while (++i < n) {
                                                                if ((contextLeafKey = contextLeafKeys[i]) && !(!(contextLeafKey[0] !== '_' || contextLeafKey[1] !== '_') || (contextLeafKey === __SELF || contextLeafKey === __PARENT || contextLeafKey === __ROOT) || contextLeafKey[0] === '$')) {
                                                                    contextLeaves[i] = context[contextLeafKey];
                                                                }
                                                            }
                                                        }
                                                        contextParent = context;
                                                        if (context = contextLeaves.pop()) {
                                                            contextLeafDepth++;
                                                            contextType = context != null && context[$TYPE];
                                                        } else {
                                                            contextType = 'leaf';
                                                            context = contextParent;
                                                            contextParent = contextLeaves.parent;
                                                        }
                                                        continue;
                                                    }
                                                key = keyTmp;
                                                context = contextTmp;
                                                contextParent = contextParentTmp;
                                                contextType = contextTypeTmp;
                                                contextTmp = contextTypeTmp = undefined;
                                                if (context != null && typeof context === 'object') {
                                                    head = root.__head;
                                                    tail = root.__tail;
                                                    (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                    (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                    context === head && (root.__head = root.__next = head = next);
                                                    context === tail && (root.__tail = root.__prev = tail = prev);
                                                    context.__next = context.__prev = undefined;
                                                    head = tail = next = prev = undefined;
                                                }
                                            }
                                            message[$SIZE] = messageSize - sizeOffset;
                                            contextParent[key] = context = message;
                                            break;
                                        }
                                        context = contexts[--column];
                                        key = context[__KEY];
                                        contextParent = contexts[column - 1] || contextCache;
                                    } while (column > -1);
                                    context[__SELF] = context;
                                    context[__KEY] = key;
                                    context[__PARENT] = contextParent;
                                    context[__ROOT] = contextCache;
                                    if (context[__GENERATION] === undefined) {
                                        context[__GENERATION] = 0;
                                    }
                                    contextTmp = context;
                                    contextParentTmp = contextParent;
                                    while (context !== undefined) {
                                        contextSize = context['$size'] = (context['$size'] || 0) + sizeOffset;
                                        contextTmp2 = context;
                                        if (context[__GENERATION_UPDATED] !== generation) {
                                            generationStack = [];
                                            generationDepth = 0;
                                            while (generationDepth > -1) {
                                                if ((generationReferences = generationStack[generationDepth]) === undefined) {
                                                    i = k = -1;
                                                    n = context[__REFS_LENGTH] || 0;
                                                    generationStack[generationDepth] = generationReferences = [];
                                                    context[__GENERATION_UPDATED] = generation;
                                                    context[__GENERATION] = (context[__GENERATION] || 0) + 1;
                                                    if ((reference = context[__PARENT]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                        generationReferences[++k] = reference;
                                                    }
                                                    while (++i < n) {
                                                        if ((reference = context[__REF + i]) !== undefined && reference[__GENERATION_UPDATED] !== generation) {
                                                            generationReferences[++k] = reference;
                                                        }
                                                    }
                                                }
                                                if ((context = generationReferences.pop()) !== undefined) {
                                                    ++generationDepth;
                                                } else {
                                                    generationStack[generationDepth--] = undefined;
                                                }
                                            }
                                        }
                                        reference = generationStack = generationReferences = undefined;
                                        context = contextTmp2;
                                        if ((contextParent = context[__PARENT]) !== undefined && contextSize <= 0) {
                                            contextRefsLength = context.__refsLength || 0;
                                            i = -1;
                                            while (++i < contextRefsLength) {
                                                if ((reference = context[__REF + i]) !== undefined) {
                                                    reference.__context = undefined;
                                                    context[__REF + i] = undefined;
                                                }
                                            }
                                            context.__refsLength = undefined;
                                            contextParent[context[__KEY]] = context[__SELF] = context[__PARENT] = context[__ROOT] = undefined;
                                            if (referenceContext = (!contextType || contextType === 'sentinel') && Array.isArray(contextValue) && contextValue[__CONTEXT] || undefined) {
                                                i = (contextValue[__REF_INDEX] || 0) - 1;
                                                n = (referenceContext[__REFS_LENGTH] || 0) - 1;
                                                while (++i <= n) {
                                                    referenceContext[__REF + i] = referenceContext[__REF + (i + 1)];
                                                }
                                                referenceContext[__REFS_LENGTH] = n;
                                                contextValue[__REF_INDEX] = undefined;
                                                contextValue[__CONTEXT] = undefined;
                                                referenceContext = undefined;
                                            }
                                            if (context != null && typeof context === 'object') {
                                                head = root.__head;
                                                tail = root.__tail;
                                                (next = context.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                                (prev = context.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                                context === head && (root.__head = root.__next = head = next);
                                                context === tail && (root.__tail = root.__prev = tail = prev);
                                                context.__next = context.__prev = undefined;
                                                head = tail = next = prev = undefined;
                                            }
                                        }
                                        context = contextParent;
                                    }
                                    context = contextTmp;
                                    contextParent = contextParentTmp;
                                    contextTmp = contextTmp2 = contextParentTmp = undefined;
                                    contextType = context != null && context[$TYPE];
                                    contextValue = contextType === 'sentinel' ? context.value : context;
                                }
                            }
                        }
                    }
                    break resolvePath;
                } while (true);
            if (context != null) {
                if (context != null && typeof context === 'object' && contextExpires !== 1) {
                    head = root.__head;
                    tail = root.__tail;
                    next = context.__next, prev = context.__prev;
                    if (context !== head) {
                        next && (next != null && typeof next === 'object') && (next.__prev = prev);
                        prev && (prev != null && typeof prev === 'object') && (prev.__next = next);
                        (next = head) && (head != null && typeof head === 'object') && (head.__prev = context);
                        root.__head = root.__next = head = context;
                        head.__next = next;
                        head.__prev = undefined;
                    }
                    if (tail == null || context === tail) {
                        root.__tail = root.__prev = tail = prev || context;
                    }
                    head = tail = next = prev = undefined;
                }
                if (contextType === 'error') {
                    if (expandsCount > -1) {
                        requestedPath[requestedPath.length] = null;
                    }
                    contextValue = context;
                }
            }
            if (context == null || refreshing === true) {
                src = optimizedPath;
                dest = new Array(n = src.length);
                i = -1;
                while (++i < n) {
                    dest[i] = src[i];
                }
                opt = dest;
                src = optimizedBoundPath;
                dest = new Array(n = src.length);
                i = -1;
                while (++i < n) {
                    dest[i] = src[i];
                }
                req = dest;
                reqLen = n;
                i = -1;
                n = requestedPath.length;
                while (++i < n) {
                    key = path[i];
                    key2 = requestedPath[i];
                    req[reqLen + i] = key && typeof key === 'object' && [key2] || key2;
                }
                if (column < length) {
                    j = column + 1;
                    k = length + 1;
                    reqLen = req.length;
                    optLen = opt.length;
                    i = -1;
                    n = k - j;
                    while (++i < n) {
                        req[reqLen + i] = opt[optLen + i] = path[j + i];
                    }
                }
                req.pathSetIndex = index;
                requestedMissingPaths[requestedMissingPaths.length] = req;
                optimizedMissingPaths[optimizedMissingPaths.length] = opt;
            } else if (contextValue !== undefined || boxed === true) {
                src = optimizedPath;
                dest = new Array(n = src.length);
                i = -1;
                while (++i < n) {
                    dest[i] = src[i];
                }
                opt = dest;
                src = requestedPath;
                dest = new Array(n = src.length);
                i = -1;
                while (++i < n) {
                    dest[i] = src[i];
                }
                req = dest;
                requestedPaths[requestedPaths.length] = req;
                optimizedPaths[optimizedPaths.length] = opt;
                if (contextType === 'error') {
                    if (err === undefined) {
                        if (boxed === true) {
                            err = context;
                        } else {
                            dest = {};
                            src = context;
                            keys = Object.keys(src);
                            i = -1;
                            n = keys.length;
                            while (++i < n) {
                                x = keys[i];
                                !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                            }
                            err = dest;
                        }
                        val = !!includeErrors && err || undefined;
                    }
                    errors[errors.length] = {
                        path: req,
                        value: err
                    };
                    err = undefined;
                } else {
                    if (boxed === true) {
                        val = context;
                    } else if (contextValue != null && typeof contextValue === 'object') {
                        if (Array.isArray(contextValue)) {
                            src = contextValue;
                            dest = new Array(n = src.length);
                            i = -1;
                            while (++i < n) {
                                dest[i] = src[i];
                            }
                            val = dest;
                        } else {
                            dest = {};
                            src = contextValue;
                            keys = Object.keys(src);
                            i = -1;
                            n = keys.length;
                            while (++i < n) {
                                x = keys[i];
                                !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                            }
                            val = dest;
                        }
                    } else {
                        val = contextValue;
                    }
                }
                if (!(contextType === 'error')) {
                    pbv.value = val;
                    pbv.path = req;
                    dest = {};
                    src = pbv;
                    keys = Object.keys(src);
                    i = -1;
                    n = keys.length;
                    while (++i < n) {
                        x = keys[i];
                        !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
                    }
                    val = dest;
                    if (!!onNext) {
                        onNext.call(model, val);
                    } else if (!!values) {
                        values[values.length] = val;
                    }
                }
            }
            for (; column > -1; --column) {
                key = path[column];
                if (key == null || typeof key !== 'object') {
                    continue;
                }
                isKeySet = true;
                if (Array.isArray(key)) {
                    jsonDepth -= Number(jsonDepth > 0);
                    if (++key.index === key.length) {
                        key = key[key.index = 0];
                        if (key == null || typeof key !== 'object') {
                            continue;
                        }
                    } else {
                        break;
                    }
                }
                if (++key[__OFFSET] > (key.to || (key.to = key.from + (key.length || 1) - 1))) {
                    key[__OFFSET] = key.from;
                    continue;
                }
                jsonDepth -= Number(jsonDepth > 0);
                break;
            }
        }
        path.column = column;
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
module.exports = falkor;